<?php

$php_functions = array (
  '__construct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$nsname',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'name' => '__construct',
    'type' => 'string',
  ),
  '__destruct' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => '__destruct',
  ),
  '__set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldValue',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => '__set',
  ),
  '__get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDocumentField',
    'name' => '__get',
  ),
  '__isset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => '__isset',
  ),
  '__unset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => '__unset',
  ),
  '__call' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$parameters',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => '__call',
  ),
  '__callStatic' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arguments',
        'required' => true,
      ),
    ),
    'modifier' => 'public static',
    'type' => 'mixed',
    'name' => '__callStatic',
  ),
  '__sleep' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'private',
    'type' => 'void',
    'name' => '__sleep',
  ),
  '__wakeup' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => '__wakeup',
  ),
  '__toString' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => '__toString',
  ),
  '__invoke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => '__invoke',
  ),
  '__set_state' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => '__set_state',
  ),
  '__debugInfo' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => '__debugInfo',
  ),
  '__clone' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => '__clone',
  ),
  'getMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'getMessage',
  ),
  'getPrevious' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getPrevious',
  ),
  'getCode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'mixed',
    'name' => 'getCode',
  ),
  'getFile' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'getFile',
  ),
  'getLine' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getLine',
  ),
  'getTrace' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'array',
    'name' => 'getTrace',
  ),
  'getTraceAsString' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'getTraceAsString',
  ),
  'getSeverity' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'int',
    'name' => 'getSeverity',
  ),
  'current' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'current',
  ),
  'key' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'key',
  ),
  'next' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$localname',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'next',
  ),
  'rewind' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'rewind',
  ),
  'valid' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'valid',
  ),
  'getIterator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ArrayIterator',
    'name' => 'getIterator',
  ),
  'offsetExists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$property_name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'offsetExists',
  ),
  'offsetGet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$property_name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'offsetGet',
  ),
  'offsetSet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$property_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$property_value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'offsetSet',
  ),
  'offsetUnset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$property_name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'offsetUnset',
  ),
  'serialize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'serialize',
  ),
  'unserialize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'unserialize',
  ),
  'bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dsn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'boolean',
        'name' => '$force',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQSocket',
    'name' => 'bind',
  ),
  'bindTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$newthis',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$newscope',
        'initializer' => '= "static"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Closure',
    'name' => 'bindTo',
  ),
  'send' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$message',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQSocket',
    'name' => 'send',
  ),
  'throw' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Exception',
        'name' => '$exception',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'throw',
  ),
  'apc_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$unused',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$ttl',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'apc_add',
  ),
  'apc_bin_dump' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$files',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$user_vars',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'apc_bin_dump',
  ),
  'apc_bin_dumpfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$files',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$user_vars',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'apc_bin_dumpfile',
  ),
  'apc_bin_load' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'apc_bin_load',
  ),
  'apc_bin_loadfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'apc_bin_loadfile',
  ),
  'apc_cache_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cache_type',
        'initializer' => '= ""',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$limited',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'apc_cache_info',
  ),
  'apc_cas' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$old',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$new',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'apc_cas',
  ),
  'apc_clear_cache' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cache_type',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'apc_clear_cache',
  ),
  'apc_compile_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$atomic',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'apc_compile_file',
  ),
  'apc_dec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$step',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '&$success',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'apc_dec',
  ),
  'apc_define_constants' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$constants',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$case_sensitive',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'apc_define_constants',
  ),
  'apc_delete_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$keys',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'apc_delete_file',
  ),
  'apc_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'apc_delete',
  ),
  'apc_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$keys',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'apc_exists',
  ),
  'apc_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '&$success',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'apc_fetch',
  ),
  'apc_inc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$step',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '&$success',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'apc_inc',
  ),
  'apc_load_constants' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$case_sensitive',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'apc_load_constants',
  ),
  'apc_sma_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$limited',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'apc_sma_info',
  ),
  'apc_store' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$unused',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$ttl',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'apc_store',
  ),
  'getTotalCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTotalCount',
  ),
  'getTotalHits' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTotalHits',
  ),
  'getTotalSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTotalSize',
  ),
  'apd_breakpoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$debug_level',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'apd_breakpoint',
  ),
  'apd_callstack' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'apd_callstack',
  ),
  'apd_clunk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$warning',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'initializer' => '= "<BR />"',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'apd_clunk',
  ),
  'apd_continue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$debug_level',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'apd_continue',
  ),
  'apd_croak' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$warning',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'initializer' => '= "<BR />"',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'apd_croak',
  ),
  'apd_dump_function_table' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'apd_dump_function_table',
  ),
  'apd_dump_persistent_resources' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'apd_dump_persistent_resources',
  ),
  'apd_dump_regular_resources' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'apd_dump_regular_resources',
  ),
  'apd_echo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$output',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'apd_echo',
  ),
  'apd_get_active_symbols' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'apd_get_active_symbols',
  ),
  'apd_set_pprof_trace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dump_directory',
        'initializer' => '= ini_get("apd.dumpdir")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fragment',
        'initializer' => '= "pprof"',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'apd_set_pprof_trace',
  ),
  'apd_set_session_trace_socket' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$tcp_server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$socket_type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$debug_level',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'apd_set_session_trace_socket',
  ),
  'apd_set_session_trace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$debug_level',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dump_directory',
        'initializer' => '= ini_get("apd.dumpdir")',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'apd_set_session_trace',
  ),
  'apd_set_session' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$debug_level',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'apd_set_session',
  ),
  'override_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$function_args',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$function_code',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'override_function',
  ),
  'rename_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$original_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rename_function',
  ),
  'bcompiler_load_exe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_load_exe',
  ),
  'bcompiler_load' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_load',
  ),
  'bcompiler_parse_class' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_parse_class',
  ),
  'bcompiler_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_read',
  ),
  'bcompiler_write_class' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$className',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$extends',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_class',
  ),
  'bcompiler_write_constant' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$constantName',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_constant',
  ),
  'bcompiler_write_exe_footer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$startpos',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_exe_footer',
  ),
  'bcompiler_write_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_file',
  ),
  'bcompiler_write_footer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_footer',
  ),
  'bcompiler_write_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$functionName',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_function',
  ),
  'bcompiler_write_functions_from_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fileName',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_functions_from_file',
  ),
  'bcompiler_write_header' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$write_ver',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_header',
  ),
  'bcompiler_write_included_filename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcompiler_write_included_filename',
  ),
  'blenc_encrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$plaintext',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encodedfile',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encryption_key',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'blenc_encrypt',
  ),
  'debug_backtrace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= DEBUG_BACKTRACE_PROVIDE_OBJECT',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'debug_backtrace',
  ),
  'debug_print_backtrace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'debug_print_backtrace',
  ),
  'error_get_last' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'error_get_last',
  ),
  'error_log' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$message_type',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$extra_headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'error_log',
  ),
  'error_reporting' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'error_reporting',
  ),
  'restore_error_handler' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'restore_error_handler',
  ),
  'restore_exception_handler' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'restore_exception_handler',
  ),
  'set_error_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$error_handler',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$error_types',
        'initializer' => '= E_ALL | E_STRICT',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'set_error_handler',
  ),
  'handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$entity_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$base',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$system_id',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$public_id',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$notation_name',
        'required' => true,
      ),
    ),
    'name' => 'handler',
    'type' => 'resource',
  ),
  'set_exception_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$exception_handler',
        'required' => true,
      ),
    ),
    'type' => 'callable',
    'name' => 'set_exception_handler',
  ),
  'trigger_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$error_msg',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$error_type',
        'initializer' => '= E_USER_NOTICE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'trigger_error',
  ),
  'inclued_get_data' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'inclued_get_data',
  ),
  'opcache_compile_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'boolean',
    'name' => 'opcache_compile_file',
  ),
  'opcache_get_configuration' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'opcache_get_configuration',
  ),
  'opcache_get_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'boolean',
        'name' => '$get_scripts',
        'initializer' => '= TRUE',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'opcache_get_status',
  ),
  'opcache_invalidate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$script',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'boolean',
        'name' => '$force',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'type' => 'boolean',
    'name' => 'opcache_invalidate',
  ),
  'opcache_is_script_cached' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'boolean',
    'name' => 'opcache_is_script_cached',
  ),
  'opcache_reset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'boolean',
    'name' => 'opcache_reset',
  ),
  'flush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$delay',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'flush',
  ),
  'ob_clean' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'ob_clean',
  ),
  'ob_end_clean' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ob_end_clean',
  ),
  'ob_end_flush' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ob_end_flush',
  ),
  'ob_flush' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'ob_flush',
  ),
  'ob_get_clean' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ob_get_clean',
  ),
  'ob_get_contents' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ob_get_contents',
  ),
  'ob_get_flush' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ob_get_flush',
  ),
  'ob_get_length' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ob_get_length',
  ),
  'ob_get_level' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ob_get_level',
  ),
  'ob_get_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$full_status',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'ob_get_status',
  ),
  'ob_gzhandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$buffer',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ob_gzhandler',
  ),
  'ob_implicit_flush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flag',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'ob_implicit_flush',
  ),
  'ob_list_handlers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'ob_list_handlers',
  ),
  'ob_start' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$output_callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$chunk_size',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= PHP_OUTPUT_HANDLER_STDFLAGS',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ob_start',
  ),
  'output_add_rewrite_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'output_add_rewrite_var',
  ),
  'output_reset_rewrite_vars' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'output_reset_rewrite_vars',
  ),
  'assert_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$what',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'assert_options',
  ),
  'assert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$assertion',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$description',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'assert',
  ),
  'cli_get_process_title' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'cli_get_process_title',
  ),
  'cli_set_process_title' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cli_set_process_title',
  ),
  'dl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$library',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dl',
  ),
  'extension_loaded' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'extension_loaded',
  ),
  'gc_collect_cycles' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'gc_collect_cycles',
  ),
  'gc_disable' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'gc_disable',
  ),
  'gc_enable' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'gc_enable',
  ),
  'gc_enabled' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'gc_enabled',
  ),
  'get_cfg_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'get_cfg_var',
  ),
  'get_current_user' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'get_current_user',
  ),
  'get_defined_constants' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$categorize',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'get_defined_constants',
  ),
  'get_extension_funcs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$module_name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'get_extension_funcs',
  ),
  'get_include_path' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'get_include_path',
  ),
  'get_included_files' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'get_included_files',
  ),
  'get_loaded_extensions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$zend_extensions',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'get_loaded_extensions',
  ),
  'get_magic_quotes_gpc' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'get_magic_quotes_gpc',
  ),
  'get_magic_quotes_runtime' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'get_magic_quotes_runtime',
  ),
  'getenv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$varname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getenv',
  ),
  'getlastmod' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getlastmod',
  ),
  'getmygid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getmygid',
  ),
  'getmyinode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getmyinode',
  ),
  'getmypid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getmypid',
  ),
  'getmyuid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getmyuid',
  ),
  'getopt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$options',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$longopts',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getopt',
  ),
  'getrusage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$who',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getrusage',
  ),
  'ini_get_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$extension',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$details',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'ini_get_all',
  ),
  'ini_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$varname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ini_get',
  ),
  'ini_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$varname',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ini_restore',
  ),
  'ini_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$varname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$newvalue',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ini_set',
  ),
  'memory_get_peak_usage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$real_usage',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'memory_get_peak_usage',
  ),
  'memory_get_usage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$real_usage',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'memory_get_usage',
  ),
  'php_ini_loaded_file' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'php_ini_loaded_file',
  ),
  'php_ini_scanned_files' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'php_ini_scanned_files',
  ),
  'php_logo_guid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'php_logo_guid',
  ),
  'php_sapi_name' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'php_sapi_name',
  ),
  'php_uname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'initializer' => '= "a"',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'php_uname',
  ),
  'phpcredits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flag',
        'initializer' => '= CREDITS_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'phpcredits',
  ),
  'phpinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$what',
        'initializer' => '= INFO_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'phpinfo',
  ),
  'phpversion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$extension',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'phpversion',
  ),
  'putenv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'putenv',
  ),
  'restore_include_path' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'restore_include_path',
  ),
  'set_include_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$new_include_path',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'set_include_path',
  ),
  'set_magic_quotes_runtime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$new_setting',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'set_magic_quotes_runtime',
  ),
  'set_time_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'set_time_limit',
  ),
  'sys_get_temp_dir' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'sys_get_temp_dir',
  ),
  'version_compare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$version1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$version2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$operator',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'version_compare',
  ),
  'zend_logo_guid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'zend_logo_guid',
  ),
  'zend_thread_id' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'zend_thread_id',
  ),
  'zend_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'zend_version',
  ),
  'runkit_class_adopt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$parentname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_class_adopt',
  ),
  'runkit_class_emancipate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_class_emancipate',
  ),
  'runkit_constant_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$constname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_constant_add',
  ),
  'runkit_constant_redefine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$constname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$newvalue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_constant_redefine',
  ),
  'runkit_constant_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$constname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_constant_remove',
  ),
  'runkit_function_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$funcname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$arglist',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_function_add',
  ),
  'runkit_function_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$funcname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$targetname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_function_copy',
  ),
  'runkit_function_redefine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$funcname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$arglist',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_function_redefine',
  ),
  'runkit_function_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$funcname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_function_remove',
  ),
  'runkit_function_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$funcname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$newname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_function_rename',
  ),
  'runkit_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= RUNKIT_IMPORT_CLASS_METHODS',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_import',
  ),
  'runkit_lint_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_lint_file',
  ),
  'runkit_lint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_lint',
  ),
  'runkit_method_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$args',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= RUNKIT_ACC_PUBLIC',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_method_add',
  ),
  'runkit_method_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dClass',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dMethod',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sClass',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$sMethod',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_method_copy',
  ),
  'runkit_method_redefine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$args',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= RUNKIT_ACC_PUBLIC',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_method_redefine',
  ),
  'runkit_method_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_method_remove',
  ),
  'runkit_method_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$newname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'runkit_method_rename',
  ),
  'runkit_return_value_used' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'runkit_return_value_used',
  ),
  'runkit_sandbox_output_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$sandbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'runkit_sandbox_output_handler',
  ),
  'runkit_superglobals' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'runkit_superglobals',
  ),
  'uopz_backup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_backup',
  ),
  'uopz_compose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$classes',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$methods',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$properties',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_compose',
  ),
  'uopz_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'Closure',
    'name' => 'uopz_copy',
  ),
  'uopz_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_delete',
  ),
  'uopz_extend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$parent',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_extend',
  ),
  'uopz_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'uopz_flags',
  ),
  'uopz_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Closure',
        'name' => '$handler',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$modifiers',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_function',
  ),
  'uopz_implement' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$interface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_implement',
  ),
  'uopz_overload' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$opcode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Callable',
        'name' => '$callable',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_overload',
  ),
  'uopz_redefine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$constant',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_redefine',
  ),
  'uopz_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$rename',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_rename',
  ),
  'uopz_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_restore',
  ),
  'uopz_undefine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$constant',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'uopz_undefine',
  ),
  'count' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'count',
  ),
  'wincache_fcache_fileinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$summaryonly',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'wincache_fcache_fileinfo',
  ),
  'wincache_fcache_meminfo' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'wincache_fcache_meminfo',
  ),
  'wincache_lock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$isglobal',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_lock',
  ),
  'wincache_ocache_fileinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$summaryonly',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'wincache_ocache_fileinfo',
  ),
  'wincache_ocache_meminfo' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'wincache_ocache_meminfo',
  ),
  'wincache_refresh_if_changed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$files',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_refresh_if_changed',
  ),
  'wincache_rplist_fileinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$summaryonly',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'wincache_rplist_fileinfo',
  ),
  'wincache_rplist_meminfo' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'wincache_rplist_meminfo',
  ),
  'wincache_scache_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$summaryonly',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'wincache_scache_info',
  ),
  'wincache_scache_meminfo' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'wincache_scache_meminfo',
  ),
  'wincache_ucache_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$unused',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$ttl',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_ucache_add',
  ),
  'wincache_ucache_cas' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$old_value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$new_value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_ucache_cas',
  ),
  'wincache_ucache_clear' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'wincache_ucache_clear',
  ),
  'wincache_ucache_dec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$dec_by',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '&$success',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'wincache_ucache_dec',
  ),
  'wincache_ucache_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_ucache_delete',
  ),
  'wincache_ucache_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_ucache_exists',
  ),
  'wincache_ucache_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '&$success',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'wincache_ucache_get',
  ),
  'wincache_ucache_inc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$inc_by',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '&$success',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'wincache_ucache_inc',
  ),
  'wincache_ucache_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$summaryonly',
        'initializer' => '= false',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'wincache_ucache_info',
  ),
  'wincache_ucache_meminfo' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'wincache_ucache_meminfo',
  ),
  'wincache_ucache_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$unused',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$ttl',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_ucache_set',
  ),
  'wincache_unlock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'wincache_unlock',
  ),
  'xhprof_disable' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'xhprof_disable',
  ),
  'xhprof_enable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'xhprof_enable',
  ),
  'xhprof_sample_disable' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'xhprof_sample_disable',
  ),
  'xhprof_sample_enable' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'xhprof_sample_enable',
  ),
  'id3_get_frame_long_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$frameId',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'id3_get_frame_long_name',
  ),
  'id3_get_frame_short_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$frameId',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'id3_get_frame_short_name',
  ),
  'id3_get_genre_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$genre',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'id3_get_genre_id',
  ),
  'id3_get_genre_list' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'id3_get_genre_list',
  ),
  'id3_get_genre_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$genre_id',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'id3_get_genre_name',
  ),
  'id3_get_tag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'initializer' => '= ID3_BEST',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'id3_get_tag',
  ),
  'id3_get_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'id3_get_version',
  ),
  'id3_remove_tag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'initializer' => '= ID3_V1_0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'id3_remove_tag',
  ),
  'id3_set_tag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tag',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'initializer' => '= ID3_V1_0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'id3_set_tag',
  ),
  'getAudioProperties' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'KTaglib_MPEG_File',
    'name' => 'getAudioProperties',
  ),
  'getID3v1Tag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$create',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'KTaglib_ID3v1_Tag',
    'name' => 'getID3v1Tag',
  ),
  'getID3v2Tag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$create',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'KTaglib_ID3v2_Tag',
    'name' => 'getID3v2Tag',
  ),
  'getAlbum' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getAlbum',
  ),
  'getArtist' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getArtist',
  ),
  'getComment' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getComment',
  ),
  'getGenre' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getGenre',
  ),
  'getTitle' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTitle',
  ),
  'getTrack' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTrack',
  ),
  'getYear' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getYear',
  ),
  'isEmpty' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isEmpty',
  ),
  'addFrame' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'KTaglib_ID3v2_Frame',
        'name' => '$frame',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addFrame',
  ),
  'getFrameList' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFrameList',
  ),
  'getSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getSize',
  ),
  'getDescription' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDescription',
  ),
  'getMimeType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getMimeType',
  ),
  'getType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getType',
  ),
  'savePicture' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'savePicture',
  ),
  'setPicture' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setPicture',
  ),
  'setType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setType',
  ),
  'openal_buffer_create' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'openal_buffer_create',
  ),
  'openal_buffer_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$buffer',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$freq',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_buffer_data',
  ),
  'openal_buffer_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$buffer',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_buffer_destroy',
  ),
  'openal_buffer_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$buffer',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$property',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'openal_buffer_get',
  ),
  'openal_buffer_loadwav' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$buffer',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$wavfile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_buffer_loadwav',
  ),
  'openal_context_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$device',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'openal_context_create',
  ),
  'openal_context_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_context_current',
  ),
  'openal_context_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_context_destroy',
  ),
  'openal_context_process' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_context_process',
  ),
  'openal_context_suspend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_context_suspend',
  ),
  'openal_device_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$device',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_device_close',
  ),
  'openal_device_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$device_desc',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'openal_device_open',
  ),
  'openal_listener_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$property',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'openal_listener_get',
  ),
  'openal_listener_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$property',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_listener_set',
  ),
  'openal_source_create' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'openal_source_create',
  ),
  'openal_source_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_source_destroy',
  ),
  'openal_source_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$property',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'openal_source_get',
  ),
  'openal_source_pause' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_source_pause',
  ),
  'openal_source_play' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_source_play',
  ),
  'openal_source_rewind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_source_rewind',
  ),
  'openal_source_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$property',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_source_set',
  ),
  'openal_source_stop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openal_source_stop',
  ),
  'openal_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$rate',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'openal_stream',
  ),
  'kadm5_chpass_principal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$principal',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'kadm5_chpass_principal',
  ),
  'kadm5_create_principal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$principal',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'kadm5_create_principal',
  ),
  'kadm5_delete_principal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$principal',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'kadm5_delete_principal',
  ),
  'kadm5_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'kadm5_destroy',
  ),
  'kadm5_flush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'kadm5_flush',
  ),
  'kadm5_get_policies' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'kadm5_get_policies',
  ),
  'kadm5_get_principal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$principal',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'kadm5_get_principal',
  ),
  'kadm5_get_principals' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'kadm5_get_principals',
  ),
  'kadm5_init_with_password' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$admin_server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$realm',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$principal',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'kadm5_init_with_password',
  ),
  'kadm5_modify_principal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$principal',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'kadm5_modify_principal',
  ),
  'radius_acct_open' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'radius_acct_open',
  ),
  'radius_add_server' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$secret',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$max_tries',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_add_server',
  ),
  'radius_auth_open' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'radius_auth_open',
  ),
  'radius_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_close',
  ),
  'radius_config' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_config',
  ),
  'radius_create_request' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_create_request',
  ),
  'radius_cvt_addr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_cvt_addr',
  ),
  'radius_cvt_int' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'radius_cvt_int',
  ),
  'radius_cvt_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_cvt_string',
  ),
  'radius_demangle_mppe_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mangled',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_demangle_mppe_key',
  ),
  'radius_demangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mangled',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_demangle',
  ),
  'radius_get_attr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'radius_get_attr',
  ),
  'radius_get_tagged_attr_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_get_tagged_attr_data',
  ),
  'radius_get_tagged_attr_tag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'integer',
    'name' => 'radius_get_tagged_attr_tag',
  ),
  'radius_get_vendor_attr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'radius_get_vendor_attr',
  ),
  'radius_put_addr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$addr',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_addr',
  ),
  'radius_put_attr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_attr',
  ),
  'radius_put_int' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_int',
  ),
  'radius_put_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_string',
  ),
  'radius_put_vendor_addr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$vendor',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$addr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_vendor_addr',
  ),
  'radius_put_vendor_attr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$vendor',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$tag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_vendor_attr',
  ),
  'radius_put_vendor_int' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$vendor',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$tag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_vendor_int',
  ),
  'radius_put_vendor_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$vendor',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$tag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radius_put_vendor_string',
  ),
  'radius_request_authenticator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_request_authenticator',
  ),
  'radius_salt_encrypt_attr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_salt_encrypt_attr',
  ),
  'radius_send_request' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'radius_send_request',
  ),
  'radius_server_secret' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_server_secret',
  ),
  'radius_strerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$radius_handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'radius_strerror',
  ),
  'ncurses_addch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_addch',
  ),
  'ncurses_addchnstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$s',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_addchnstr',
  ),
  'ncurses_addchstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$s',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_addchstr',
  ),
  'ncurses_addnstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$s',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_addnstr',
  ),
  'ncurses_addstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_addstr',
  ),
  'ncurses_assume_default_colors' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fg',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$bg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_assume_default_colors',
  ),
  'ncurses_attroff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attributes',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_attroff',
  ),
  'ncurses_attron' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attributes',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_attron',
  ),
  'ncurses_attrset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attributes',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_attrset',
  ),
  'ncurses_baudrate' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_baudrate',
  ),
  'ncurses_beep' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_beep',
  ),
  'ncurses_bkgd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attrchar',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_bkgd',
  ),
  'ncurses_bkgdset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attrchar',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ncurses_bkgdset',
  ),
  'ncurses_border' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$right',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$bottom',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tl_corner',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$tr_corner',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$bl_corner',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$br_corner',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_border',
  ),
  'ncurses_bottom_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_bottom_panel',
  ),
  'ncurses_can_change_color' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_can_change_color',
  ),
  'ncurses_cbreak' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_cbreak',
  ),
  'ncurses_clear' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_clear',
  ),
  'ncurses_clrtobot' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_clrtobot',
  ),
  'ncurses_clrtoeol' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_clrtoeol',
  ),
  'ncurses_color_content' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$r',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$g',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '&$b',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_color_content',
  ),
  'ncurses_color_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pair',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_color_set',
  ),
  'ncurses_curs_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$visibility',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_curs_set',
  ),
  'ncurses_def_prog_mode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_def_prog_mode',
  ),
  'ncurses_def_shell_mode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_def_shell_mode',
  ),
  'ncurses_define_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$definition',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$keycode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_define_key',
  ),
  'ncurses_del_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_del_panel',
  ),
  'ncurses_delay_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$milliseconds',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_delay_output',
  ),
  'ncurses_delch' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_delch',
  ),
  'ncurses_deleteln' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_deleteln',
  ),
  'ncurses_delwin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_delwin',
  ),
  'ncurses_doupdate' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_doupdate',
  ),
  'ncurses_echo' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_echo',
  ),
  'ncurses_echochar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$character',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_echochar',
  ),
  'ncurses_end' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_end',
  ),
  'ncurses_erase' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_erase',
  ),
  'ncurses_erasechar' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ncurses_erasechar',
  ),
  'ncurses_filter' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'ncurses_filter',
  ),
  'ncurses_flash' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_flash',
  ),
  'ncurses_flushinp' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_flushinp',
  ),
  'ncurses_getch' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_getch',
  ),
  'ncurses_getmaxyx' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$x',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ncurses_getmaxyx',
  ),
  'ncurses_getmouse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$mevent',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_getmouse',
  ),
  'ncurses_getyx' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$x',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ncurses_getyx',
  ),
  'ncurses_halfdelay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$tenth',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_halfdelay',
  ),
  'ncurses_has_colors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_has_colors',
  ),
  'ncurses_has_ic' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_has_ic',
  ),
  'ncurses_has_il' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_has_il',
  ),
  'ncurses_has_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$keycode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_has_key',
  ),
  'ncurses_hide_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_hide_panel',
  ),
  'ncurses_hline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$charattr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_hline',
  ),
  'ncurses_inch' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ncurses_inch',
  ),
  'ncurses_init_color' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$r',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$g',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_init_color',
  ),
  'ncurses_init_pair' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pair',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fg',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$bg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_init_pair',
  ),
  'ncurses_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'ncurses_init',
  ),
  'ncurses_insch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$character',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_insch',
  ),
  'ncurses_insdelln' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_insdelln',
  ),
  'ncurses_insertln' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_insertln',
  ),
  'ncurses_insstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_insstr',
  ),
  'ncurses_instr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$buffer',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_instr',
  ),
  'ncurses_isendwin' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_isendwin',
  ),
  'ncurses_keyok' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$keycode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$enable',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_keyok',
  ),
  'ncurses_keypad' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$bf',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_keypad',
  ),
  'ncurses_killchar' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ncurses_killchar',
  ),
  'ncurses_longname' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ncurses_longname',
  ),
  'ncurses_meta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$8bit',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_meta',
  ),
  'ncurses_mouse_trafo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '&$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$toscreen',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_mouse_trafo',
  ),
  'ncurses_mouseinterval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$milliseconds',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mouseinterval',
  ),
  'ncurses_mousemask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$newmask',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$oldmask',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mousemask',
  ),
  'ncurses_move_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$startx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$starty',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_move_panel',
  ),
  'ncurses_move' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_move',
  ),
  'ncurses_mvaddch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$c',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvaddch',
  ),
  'ncurses_mvaddchnstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$s',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvaddchnstr',
  ),
  'ncurses_mvaddchstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$s',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvaddchstr',
  ),
  'ncurses_mvaddnstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$s',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvaddnstr',
  ),
  'ncurses_mvaddstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$s',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvaddstr',
  ),
  'ncurses_mvcur' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$old_y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$old_x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$new_y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$new_x',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvcur',
  ),
  'ncurses_mvdelch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvdelch',
  ),
  'ncurses_mvgetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvgetch',
  ),
  'ncurses_mvhline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$attrchar',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvhline',
  ),
  'ncurses_mvinch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvinch',
  ),
  'ncurses_mvvline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$attrchar',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvvline',
  ),
  'ncurses_mvwaddstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_mvwaddstr',
  ),
  'ncurses_napms' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$milliseconds',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_napms',
  ),
  'ncurses_new_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ncurses_new_panel',
  ),
  'ncurses_newpad' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cols',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ncurses_newpad',
  ),
  'ncurses_newwin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cols',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ncurses_newwin',
  ),
  'ncurses_nl' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_nl',
  ),
  'ncurses_nocbreak' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_nocbreak',
  ),
  'ncurses_noecho' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_noecho',
  ),
  'ncurses_nonl' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_nonl',
  ),
  'ncurses_noqiflush' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'ncurses_noqiflush',
  ),
  'ncurses_noraw' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_noraw',
  ),
  'ncurses_pair_content' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pair',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$f',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$b',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_pair_content',
  ),
  'ncurses_panel_above' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ncurses_panel_above',
  ),
  'ncurses_panel_below' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ncurses_panel_below',
  ),
  'ncurses_panel_window' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ncurses_panel_window',
  ),
  'ncurses_pnoutrefresh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pad',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pminrow',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pmincol',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$sminrow',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$smincol',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$smaxrow',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$smaxcol',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_pnoutrefresh',
  ),
  'ncurses_prefresh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pad',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pminrow',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pmincol',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$sminrow',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$smincol',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$smaxrow',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$smaxcol',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_prefresh',
  ),
  'ncurses_putp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_putp',
  ),
  'ncurses_qiflush' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'ncurses_qiflush',
  ),
  'ncurses_raw' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_raw',
  ),
  'ncurses_refresh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_refresh',
  ),
  'ncurses_replace_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_replace_panel',
  ),
  'ncurses_reset_prog_mode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_reset_prog_mode',
  ),
  'ncurses_reset_shell_mode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_reset_shell_mode',
  ),
  'ncurses_resetty' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_resetty',
  ),
  'ncurses_savetty' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_savetty',
  ),
  'ncurses_scr_dump' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_scr_dump',
  ),
  'ncurses_scr_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_scr_init',
  ),
  'ncurses_scr_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_scr_restore',
  ),
  'ncurses_scr_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_scr_set',
  ),
  'ncurses_scrl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_scrl',
  ),
  'ncurses_show_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_show_panel',
  ),
  'ncurses_slk_attr' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_attr',
  ),
  'ncurses_slk_attroff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$intarg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_attroff',
  ),
  'ncurses_slk_attron' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$intarg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_attron',
  ),
  'ncurses_slk_attrset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$intarg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_attrset',
  ),
  'ncurses_slk_clear' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_slk_clear',
  ),
  'ncurses_slk_color' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$intarg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_color',
  ),
  'ncurses_slk_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_slk_init',
  ),
  'ncurses_slk_noutrefresh' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_slk_noutrefresh',
  ),
  'ncurses_slk_refresh' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_refresh',
  ),
  'ncurses_slk_restore' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_restore',
  ),
  'ncurses_slk_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$labelnr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$label',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_slk_set',
  ),
  'ncurses_slk_touch' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_slk_touch',
  ),
  'ncurses_standend' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_standend',
  ),
  'ncurses_standout' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_standout',
  ),
  'ncurses_start_color' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ncurses_start_color',
  ),
  'ncurses_termattrs' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_termattrs',
  ),
  'ncurses_termname' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ncurses_termname',
  ),
  'ncurses_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$millisec',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ncurses_timeout',
  ),
  'ncurses_top_panel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$panel',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_top_panel',
  ),
  'ncurses_typeahead' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fd',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_typeahead',
  ),
  'ncurses_ungetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$keycode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_ungetch',
  ),
  'ncurses_ungetmouse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$mevent',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_ungetmouse',
  ),
  'ncurses_update_panels' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'ncurses_update_panels',
  ),
  'ncurses_use_default_colors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'ncurses_use_default_colors',
  ),
  'ncurses_use_env' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ncurses_use_env',
  ),
  'ncurses_use_extended_names' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_use_extended_names',
  ),
  'ncurses_vidattr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$intarg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_vidattr',
  ),
  'ncurses_vline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$charattr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_vline',
  ),
  'ncurses_waddch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_waddch',
  ),
  'ncurses_waddstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_waddstr',
  ),
  'ncurses_wattroff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attrs',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wattroff',
  ),
  'ncurses_wattron' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attrs',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wattron',
  ),
  'ncurses_wattrset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attrs',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wattrset',
  ),
  'ncurses_wborder' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$right',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$bottom',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$tl_corner',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$tr_corner',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$bl_corner',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$br_corner',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wborder',
  ),
  'ncurses_wclear' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wclear',
  ),
  'ncurses_wcolor_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$color_pair',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wcolor_set',
  ),
  'ncurses_werase' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_werase',
  ),
  'ncurses_wgetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wgetch',
  ),
  'ncurses_whline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$charattr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_whline',
  ),
  'ncurses_wmouse_trafo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$toscreen',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ncurses_wmouse_trafo',
  ),
  'ncurses_wmove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wmove',
  ),
  'ncurses_wnoutrefresh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wnoutrefresh',
  ),
  'ncurses_wrefresh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wrefresh',
  ),
  'ncurses_wstandend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wstandend',
  ),
  'ncurses_wstandout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wstandout',
  ),
  'ncurses_wvline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$window',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$charattr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ncurses_wvline',
  ),
  'newt_bell' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_bell',
  ),
  'newt_button_bar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$buttons',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_button_bar',
  ),
  'newt_button' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_button',
  ),
  'newt_centered_window' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_centered_window',
  ),
  'newt_checkbox_get_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkbox',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'newt_checkbox_get_value',
  ),
  'newt_checkbox_set_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$sense',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_checkbox_set_flags',
  ),
  'newt_checkbox_set_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_checkbox_set_value',
  ),
  'newt_checkbox_tree_add_item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_checkbox_tree_add_item',
  ),
  'newt_checkbox_tree_find_item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'newt_checkbox_tree_find_item',
  ),
  'newt_checkbox_tree_get_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'newt_checkbox_tree_get_current',
  ),
  'newt_checkbox_tree_get_entry_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'newt_checkbox_tree_get_entry_value',
  ),
  'newt_checkbox_tree_get_multi_selection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$seqnum',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'newt_checkbox_tree_get_multi_selection',
  ),
  'newt_checkbox_tree_get_selection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'newt_checkbox_tree_get_selection',
  ),
  'newt_checkbox_tree_multi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$seq',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_checkbox_tree_multi',
  ),
  'newt_checkbox_tree_set_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_checkbox_tree_set_current',
  ),
  'newt_checkbox_tree_set_entry_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_checkbox_tree_set_entry_value',
  ),
  'newt_checkbox_tree_set_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkboxtree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_checkbox_tree_set_entry',
  ),
  'newt_checkbox_tree_set_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$checkbox_tree',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_checkbox_tree_set_width',
  ),
  'newt_checkbox_tree' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_checkbox_tree',
  ),
  'newt_checkbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$def_value',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$seq',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_checkbox',
  ),
  'newt_clear_key_buffer' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_clear_key_buffer',
  ),
  'newt_cls' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_cls',
  ),
  'newt_compact_button' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_compact_button',
  ),
  'newt_component_add_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$component',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$func_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_component_add_callback',
  ),
  'newt_component_takes_focus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$component',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$takes_focus',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_component_takes_focus',
  ),
  'newt_create_grid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$cols',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_create_grid',
  ),
  'newt_cursor_off' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_cursor_off',
  ),
  'newt_cursor_on' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_cursor_on',
  ),
  'newt_delay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$microseconds',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_delay',
  ),
  'newt_draw_form' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_draw_form',
  ),
  'newt_draw_root_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_draw_root_text',
  ),
  'newt_entry_get_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'newt_entry_get_value',
  ),
  'newt_entry_set_filter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$entry',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$filter',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_entry_set_filter',
  ),
  'newt_entry_set_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$entry',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$sense',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_entry_set_flags',
  ),
  'newt_entry_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$entry',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$cursor_at_end',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_entry_set',
  ),
  'newt_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$init_value',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_entry',
  ),
  'newt_finished' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'newt_finished',
  ),
  'newt_form_add_component' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$component',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_add_component',
  ),
  'newt_form_add_components' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$components',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_add_components',
  ),
  'newt_form_add_hot_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_add_hot_key',
  ),
  'newt_form_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_destroy',
  ),
  'newt_form_get_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_form_get_current',
  ),
  'newt_form_run' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$exit_struct',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_run',
  ),
  'newt_form_set_background' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$from',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$background',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_set_background',
  ),
  'newt_form_set_height' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_set_height',
  ),
  'newt_form_set_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_set_size',
  ),
  'newt_form_set_timer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$milliseconds',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_set_timer',
  ),
  'newt_form_set_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_set_width',
  ),
  'newt_form_watch_fd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_form_watch_fd',
  ),
  'newt_form' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$vert_bar',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$help',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_form',
  ),
  'newt_get_screen_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '&$cols',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$rows',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_get_screen_size',
  ),
  'newt_grid_add_components_to_form' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$recurse',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_grid_add_components_to_form',
  ),
  'newt_grid_basic_window' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$middle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$buttons',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_grid_basic_window',
  ),
  'newt_grid_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$recurse',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_grid_free',
  ),
  'newt_grid_get_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resouce',
        'name' => '$grid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_grid_get_size',
  ),
  'newt_grid_h_close_stacked' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$element1_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$element1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_grid_h_close_stacked',
  ),
  'newt_grid_h_stacked' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$element1_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$element1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_grid_h_stacked',
  ),
  'newt_grid_place' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_grid_place',
  ),
  'newt_grid_set_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$col',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'resource',
        'name' => '$val',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$pad_left',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$pad_top',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$pad_right',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$pad_bottom',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'int',
        'name' => '$anchor',
        'required' => true,
      ),
      10 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_grid_set_field',
  ),
  'newt_grid_simple_window' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$middle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$buttons',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_grid_simple_window',
  ),
  'newt_grid_v_close_stacked' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$element1_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$element1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_grid_v_close_stacked',
  ),
  'newt_grid_v_stacked' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$element1_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$element1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_grid_v_stacked',
  ),
  'newt_grid_wrapped_window_at' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_grid_wrapped_window_at',
  ),
  'newt_grid_wrapped_window' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_grid_wrapped_window',
  ),
  'newt_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'newt_init',
  ),
  'newt_label_set_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$label',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_label_set_text',
  ),
  'newt_label' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_label',
  ),
  'newt_listbox_append_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_append_entry',
  ),
  'newt_listbox_clear_selection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_clear_selection',
  ),
  'newt_listbox_clear' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listobx',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_clear',
  ),
  'newt_listbox_delete_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_delete_entry',
  ),
  'newt_listbox_get_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'newt_listbox_get_current',
  ),
  'newt_listbox_get_selection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'newt_listbox_get_selection',
  ),
  'newt_listbox_insert_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_insert_entry',
  ),
  'newt_listbox_item_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_listbox_item_count',
  ),
  'newt_listbox_select_item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$sense',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_select_item',
  ),
  'newt_listbox_set_current_by_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_set_current_by_key',
  ),
  'newt_listbox_set_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_set_current',
  ),
  'newt_listbox_set_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_set_data',
  ),
  'newt_listbox_set_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_set_entry',
  ),
  'newt_listbox_set_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$listbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listbox_set_width',
  ),
  'newt_listbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_listbox',
  ),
  'newt_listitem_get_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$item',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'newt_listitem_get_data',
  ),
  'newt_listitem_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$item',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_listitem_set',
  ),
  'newt_listitem' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$is_default',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'resouce',
        'name' => '$prev_item',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_listitem',
  ),
  'newt_open_window' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_open_window',
  ),
  'newt_pop_help_line' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_pop_help_line',
  ),
  'newt_pop_window' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_pop_window',
  ),
  'newt_push_help_line' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_push_help_line',
  ),
  'newt_radio_get_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$set_member',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_radio_get_current',
  ),
  'newt_radiobutton' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$is_default',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'resource',
        'name' => '$prev_button',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_radiobutton',
  ),
  'newt_redraw_help_line' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_redraw_help_line',
  ),
  'newt_reflow_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flex_down',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flex_up',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '&$actual_width',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '&$actual_height',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'newt_reflow_text',
  ),
  'newt_refresh' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_refresh',
  ),
  'newt_resize_screen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$redraw',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_resize_screen',
  ),
  'newt_resume' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_resume',
  ),
  'newt_run_form' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$form',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_run_form',
  ),
  'newt_scale_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$scale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$amount',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_scale_set',
  ),
  'newt_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$full_value',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_scale',
  ),
  'newt_scrollbar_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$scrollbar',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$where',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$total',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_scrollbar_set',
  ),
  'newt_set_help_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_set_help_callback',
  ),
  'newt_set_suspend_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_set_suspend_callback',
  ),
  'newt_suspend' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_suspend',
  ),
  'newt_textbox_get_num_lines' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$textbox',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_textbox_get_num_lines',
  ),
  'newt_textbox_reflowed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'char',
        'name' => '$*text',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flex_down',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$flex_up',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_textbox_reflowed',
  ),
  'newt_textbox_set_height' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$textbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_textbox_set_height',
  ),
  'newt_textbox_set_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$textbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_textbox_set_text',
  ),
  'newt_textbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_textbox',
  ),
  'newt_vertical_scrollbar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$normal_colorset',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$thumb_colorset',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'newt_vertical_scrollbar',
  ),
  'newt_wait_for_key' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'newt_wait_for_key',
  ),
  'newt_win_choice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$button1_text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$button2_text',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_win_choice',
  ),
  'newt_win_entries' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$suggested_width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flex_down',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flex_up',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$data_width',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'array',
        'name' => '&$items',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$button1',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_win_entries',
  ),
  'newt_win_menu' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$suggestedWidth',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flexDown',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flexUp',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$maxListHeight',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'array',
        'name' => '$items',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '&$listItem',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$button1',
        'required' => false,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_win_menu',
  ),
  'newt_win_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$button_text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_win_message',
  ),
  'newt_win_messagev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$button_text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'newt_win_messagev',
  ),
  'newt_win_ternary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$button1_text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$button2_text',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$button3_text',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'newt_win_ternary',
  ),
  'readline_add_history' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$line',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'readline_add_history',
  ),
  'readline_callback_handler_install' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prompt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'readline_callback_handler_install',
  ),
  'readline_callback_handler_remove' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'readline_callback_handler_remove',
  ),
  'readline_callback_read_char' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'readline_callback_read_char',
  ),
  'readline_clear_history' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'readline_clear_history',
  ),
  'readline_completion_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'readline_completion_function',
  ),
  'readline_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$varname',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$newvalue',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'readline_info',
  ),
  'readline_list_history' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'readline_list_history',
  ),
  'readline_on_new_line' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'readline_on_new_line',
  ),
  'readline_read_history' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'readline_read_history',
  ),
  'readline_redisplay' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'readline_redisplay',
  ),
  'readline_write_history' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'readline_write_history',
  ),
  'readline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prompt',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'readline',
  ),
  'bzclose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bz',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'bzclose',
  ),
  'bzcompress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$blocksize',
        'initializer' => '= 4',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$workfactor',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'bzcompress',
  ),
  'bzdecompress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$small',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'bzdecompress',
  ),
  'bzerrno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bz',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'bzerrno',
  ),
  'bzerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bz',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'bzerror',
  ),
  'bzerrstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bz',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'bzerrstr',
  ),
  'bzflush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bz',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'bzflush',
  ),
  'bzopen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'bzopen',
  ),
  'bzread' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bz',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 1024',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bzread',
  ),
  'bzwrite' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bz',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'bzwrite',
  ),
  'lzf_compress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'lzf_compress',
  ),
  'lzf_decompress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'lzf_decompress',
  ),
  'lzf_optimized_for' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'lzf_optimized_for',
  ),
  'addEmptyDir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dirname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'addEmptyDir',
  ),
  'addFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localname',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'addFile',
  ),
  'addFromString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$localname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$contents',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'addFromString',
  ),
  'apiVersion' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'apiVersion',
  ),
  'buildFromDirectory' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$base_dir',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$regex',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'buildFromDirectory',
  ),
  'buildFromIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Iterator',
        'name' => '$iter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$base_directory',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'buildFromIterator',
  ),
  'canCompress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'canCompress',
  ),
  'canWrite' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'canWrite',
  ),
  'compress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compression',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'compress',
  ),
  'compressAllFilesBZIP2' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'compressAllFilesBZIP2',
  ),
  'compressAllFilesGZ' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'compressAllFilesGZ',
  ),
  'compressFiles' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compression',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'compressFiles',
  ),
  'convertToData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$compression',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$extension',
        'required' => false,
      ),
    ),
    'type' => 'PharData',
    'name' => 'convertToData',
  ),
  'convertToExecutable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$compression',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$extension',
        'required' => false,
      ),
    ),
    'type' => 'Phar',
    'name' => 'convertToExecutable',
  ),
  'copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'copy',
  ),
  'createDefaultStub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$indexfile',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$webindexfile',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'createDefaultStub',
  ),
  'decompress' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'decompress',
  ),
  'decompressFiles' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'decompressFiles',
  ),
  'delMetadata' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'delMetadata',
  ),
  'delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'delete',
  ),
  'extractTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$entries',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'extractTo',
  ),
  'getMetadata' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getMetadata',
  ),
  'getModified' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getModified',
  ),
  'getSignature' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getSignature',
  ),
  'getStub' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getStub',
  ),
  'getSupportedCompression' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'array',
    'name' => 'getSupportedCompression',
  ),
  'getSupportedSignatures' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'array',
    'name' => 'getSupportedSignatures',
  ),
  'getVersion' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getVersion',
  ),
  'hasMetadata' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasMetadata',
  ),
  'interceptFileFuncs' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'interceptFileFuncs',
  ),
  'isBuffering' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isBuffering',
  ),
  'isCompressed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compression_type',
        'initializer' => '= 9021976',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isCompressed',
  ),
  'isFileFormat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isFileFormat',
  ),
  'isValidPharFilename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$executable',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'isValidPharFilename',
  ),
  'isWritable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isWritable',
  ),
  'loadPhar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'loadPhar',
  ),
  'mapPhar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$dataoffset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'mapPhar',
  ),
  'mount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pharpath',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$externalpath',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'mount',
  ),
  'mungServer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$munglist',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'mungServer',
  ),
  'running' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$retphar',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'running',
  ),
  'setAlias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setAlias',
  ),
  'setDefaultStub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$webindex',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setDefaultStub',
  ),
  'setMetadata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$metadata',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMetadata',
  ),
  'setSignatureAlgorithm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$sigtype',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$privatekey',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSignatureAlgorithm',
  ),
  'setStub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$stub',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStub',
  ),
  'startBuffering' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'startBuffering',
  ),
  'stopBuffering' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'stopBuffering',
  ),
  'uncompressAllFiles' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'uncompressAllFiles',
  ),
  'unlinkArchive' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$archive',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'unlinkArchive',
  ),
  'webPhar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'initializer' => '= "index.php"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$f404',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$mimetypes',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$rewrites',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'webPhar',
  ),
  'chmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'chmod',
  ),
  'getCRC32' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getCRC32',
  ),
  'getCompressedSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getCompressedSize',
  ),
  'getPharFlags' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getPharFlags',
  ),
  'isCRCChecked' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isCRCChecked',
  ),
  'isCompressedBZIP2' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isCompressedBZIP2',
  ),
  'isCompressedGZ' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isCompressedGZ',
  ),
  'setCompressedBZIP2' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setCompressedBZIP2',
  ),
  'setCompressedGZ' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setCompressedGZ',
  ),
  'setUncompressed' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setUncompressed',
  ),
  'rar_wrapper_cache_stats' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'rar_wrapper_cache_stats',
  ),
  'close' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'close',
  ),
  'getEntries' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getEntries',
  ),
  'getEntry' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getEntry',
  ),
  'isBroken' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isBroken',
  ),
  'isSolid' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isSolid',
  ),
  'open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$URI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'open',
  ),
  'setAllowBroken' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$allow_broken',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setAllowBroken',
  ),
  'rar_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'RarArchive',
        'name' => '$rarfile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rar_close',
  ),
  'rar_comment_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'RarArchive',
        'name' => '$rarfile',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'rar_comment_get',
  ),
  'rar_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'RarArchive',
        'name' => '$rarfile',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'rar_list',
  ),
  'rar_entry_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'RarArchive',
        'name' => '$rarfile',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$entryname',
        'required' => true,
      ),
    ),
    'type' => 'RarEntry',
    'name' => 'rar_entry_get',
  ),
  'rar_broken_is' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'RarArchive',
        'name' => '$rarfile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rar_broken_is',
  ),
  'rar_solid_is' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'RarArchive',
        'name' => '$rarfile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rar_solid_is',
  ),
  'rar_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$volume_callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'RarArchive',
    'name' => 'rar_open',
  ),
  'rar_allow_broken_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'RarArchive',
        'name' => '$rarfile',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$allow_broken',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rar_allow_broken_set',
  ),
  'extract' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= EXTR_OVERWRITE',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'extract',
  ),
  'getAttr' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getAttr',
  ),
  'getCrc' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getCrc',
  ),
  'getFileTime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFileTime',
  ),
  'getHostOs' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHostOs',
  ),
  'getMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReflectionMethod',
    'name' => 'getMethod',
  ),
  'getName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getName',
  ),
  'getPackedSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getPackedSize',
  ),
  'getStream' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'resource',
    'name' => 'getStream',
  ),
  'getUnpackedSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getUnpackedSize',
  ),
  'isDirectory' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDirectory',
  ),
  'isEncrypted' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isEncrypted',
  ),
  'isUsingExceptions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isUsingExceptions',
  ),
  'setUsingExceptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$using_exceptions',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setUsingExceptions',
  ),
  'addGlob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'addGlob',
  ),
  'addPattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'initializer' => '= "."',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'addPattern',
  ),
  'deleteIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string|array',
        'name' => '$keys',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'deleteIndex',
  ),
  'deleteName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'deleteName',
  ),
  'getArchiveComment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'getArchiveComment',
  ),
  'getCommentIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'getCommentIndex',
  ),
  'getCommentName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'getCommentName',
  ),
  'GetExternalAttributesIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$opsys',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$attr',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'GetExternalAttributesIndex',
  ),
  'getExternalAttributesName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$opsys',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$attr',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'getExternalAttributesName',
  ),
  'getFromIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'getFromIndex',
  ),
  'getFromName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'getFromName',
  ),
  'getNameIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'getNameIndex',
  ),
  'getStatusString' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getStatusString',
  ),
  'locateName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'locateName',
  ),
  'renameIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$newname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'renameIndex',
  ),
  'renameName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$newname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'renameName',
  ),
  'setArchiveComment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setArchiveComment',
  ),
  'setCommentIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCommentIndex',
  ),
  'setCommentName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCommentName',
  ),
  'setExternalAttributesIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$opsys',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setExternalAttributesIndex',
  ),
  'setExternalAttributesName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$opsys',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setExternalAttributesName',
  ),
  'setPassword' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$owner_password',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user_password',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setPassword',
  ),
  'statIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'statIndex',
  ),
  'statName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'statName',
  ),
  'unchangeAll' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'unchangeAll',
  ),
  'unchangeArchive' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'unchangeArchive',
  ),
  'unchangeIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'unchangeIndex',
  ),
  'unchangeName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'unchangeName',
  ),
  'zip_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'zip_close',
  ),
  'zip_entry_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip_entry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'zip_entry_close',
  ),
  'zip_entry_compressedsize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip_entry',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'zip_entry_compressedsize',
  ),
  'zip_entry_compressionmethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip_entry',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'zip_entry_compressionmethod',
  ),
  'zip_entry_filesize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip_entry',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'zip_entry_filesize',
  ),
  'zip_entry_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip_entry',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'zip_entry_name',
  ),
  'zip_entry_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$zip_entry',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'zip_entry_open',
  ),
  'zip_entry_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip_entry',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 1024',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'zip_entry_read',
  ),
  'zip_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'zip_open',
  ),
  'zip_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zip',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'zip_read',
  ),
  'gzclose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gzclose',
  ),
  'gzcompress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$encoding',
        'initializer' => '= ZLIB_ENCODING_DEFLATE',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzcompress',
  ),
  'gzdecode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzdecode',
  ),
  'gzdeflate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$encoding',
        'initializer' => '= ZLIB_ENCODING_RAW',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzdeflate',
  ),
  'gzencode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$encoding_mode',
        'initializer' => '= FORCE_GZIP',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzencode',
  ),
  'gzeof' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gzeof',
  ),
  'gzfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$use_include_path',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'gzfile',
  ),
  'gzgetc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gzgetc',
  ),
  'gzgets' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzgets',
  ),
  'gzgetss' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$allowable_tags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzgetss',
  ),
  'gzinflate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzinflate',
  ),
  'gzopen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$use_include_path',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'gzopen',
  ),
  'gzpassthru' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gzpassthru',
  ),
  'gzread' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gzread',
  ),
  'gzrewind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gzrewind',
  ),
  'gzseek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$whence',
        'initializer' => '= SEEK_SET',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'gzseek',
  ),
  'gztell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gztell',
  ),
  'gzuncompress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gzuncompress',
  ),
  'gzwrite' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$zp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'gzwrite',
  ),
  'readgzfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$use_include_path',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'readgzfile',
  ),
  'zlib_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$max_decoded_len',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'zlib_decode',
  ),
  'zlib_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$level',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'zlib_encode',
  ),
  'zlib_get_coding_type' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'zlib_get_coding_type',
  ),
  'm_checkstatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_checkstatus',
  ),
  'm_completeauthorizations' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_completeauthorizations',
  ),
  'm_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_connect',
  ),
  'm_connectionerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'm_connectionerror',
  ),
  'm_deletetrans' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'm_deletetrans',
  ),
  'm_destroyconn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'm_destroyconn',
  ),
  'm_destroyengine' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'm_destroyengine',
  ),
  'm_getcell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$column',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'm_getcell',
  ),
  'm_getcellbynum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$column',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'm_getcellbynum',
  ),
  'm_getcommadelimited' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'm_getcommadelimited',
  ),
  'm_getheader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$column_num',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'm_getheader',
  ),
  'm_initconn' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'm_initconn',
  ),
  'm_initengine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$location',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_initengine',
  ),
  'm_iscommadelimited' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_iscommadelimited',
  ),
  'm_maxconntimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$secs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'm_maxconntimeout',
  ),
  'm_monitor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_monitor',
  ),
  'm_numcolumns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_numcolumns',
  ),
  'm_numrows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_numrows',
  ),
  'm_parsecommadelimited' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_parsecommadelimited',
  ),
  'm_responsekeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'm_responsekeys',
  ),
  'm_responseparam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'm_responseparam',
  ),
  'm_returnstatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_returnstatus',
  ),
  'm_setblocking' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$tf',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_setblocking',
  ),
  'm_setdropfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_setdropfile',
  ),
  'm_setip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_setip',
  ),
  'm_setssl_cafile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$cafile',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_setssl_cafile',
  ),
  'm_setssl_files' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sslkeyfile',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sslcertfile',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_setssl_files',
  ),
  'm_setssl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_setssl',
  ),
  'm_settimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_settimeout',
  ),
  'm_sslcert_gen_hash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'm_sslcert_gen_hash',
  ),
  'm_transactionssent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_transactionssent',
  ),
  'm_transinqueue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_transinqueue',
  ),
  'm_transkeyval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_transkeyval',
  ),
  'm_transnew' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_transnew',
  ),
  'm_transsend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_transsend',
  ),
  'm_uwait' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$microsecs',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_uwait',
  ),
  'm_validateidentifier' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$tf',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'm_validateidentifier',
  ),
  'm_verifyconnection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$tf',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'm_verifyconnection',
  ),
  'm_verifysslcert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$tf',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'm_verifysslcert',
  ),
  'calcul_hmac' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$siretcode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$price',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$reference',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$validity',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$taxation',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$devise',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$language',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'calcul_hmac',
  ),
  'calculhmac' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'calculhmac',
  ),
  'nthmac' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'nthmac',
  ),
  'crack_check' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'crack_check',
  ),
  'crack_closedict' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dictionary',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'crack_closedict',
  ),
  'crack_getlastmessage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'crack_getlastmessage',
  ),
  'crack_opendict' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dictionary',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'crack_opendict',
  ),
  'hash_algos' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'hash_algos',
  ),
  'hash_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'hash_copy',
  ),
  'hash_equals' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$known_string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user_string',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'hash_equals',
  ),
  'hash_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'hash_file',
  ),
  'hash_final' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'hash_final',
  ),
  'hash_hmac_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'hash_hmac_file',
  ),
  'hash_hmac' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'hash_hmac',
  ),
  'hash_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'hash_init',
  ),
  'hash_pbkdf2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$salt',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$iterations',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'hash_pbkdf2',
  ),
  'hash_update_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hcontext',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$scontext',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'hash_update_file',
  ),
  'hash_update_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'hash_update_stream',
  ),
  'hash_update' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'hash_update',
  ),
  'hash' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'hash',
  ),
  'mcrypt_cbc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_cbc',
  ),
  'mcrypt_cfb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_cfb',
  ),
  'mcrypt_create_iv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$source',
        'initializer' => '= MCRYPT_DEV_URANDOM',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_create_iv',
  ),
  'mcrypt_decrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_decrypt',
  ),
  'mcrypt_ecb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_ecb',
  ),
  'mcrypt_enc_get_algorithms_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_enc_get_algorithms_name',
  ),
  'mcrypt_enc_get_block_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_enc_get_block_size',
  ),
  'mcrypt_enc_get_iv_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_enc_get_iv_size',
  ),
  'mcrypt_enc_get_key_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_enc_get_key_size',
  ),
  'mcrypt_enc_get_modes_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_enc_get_modes_name',
  ),
  'mcrypt_enc_get_supported_key_sizes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mcrypt_enc_get_supported_key_sizes',
  ),
  'mcrypt_enc_is_block_algorithm_mode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_enc_is_block_algorithm_mode',
  ),
  'mcrypt_enc_is_block_algorithm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_enc_is_block_algorithm',
  ),
  'mcrypt_enc_is_block_mode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_enc_is_block_mode',
  ),
  'mcrypt_enc_self_test' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_enc_self_test',
  ),
  'mcrypt_encrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_encrypt',
  ),
  'mcrypt_generic_deinit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_generic_deinit',
  ),
  'mcrypt_generic_end' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_generic_end',
  ),
  'mcrypt_generic_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_generic_init',
  ),
  'mcrypt_generic' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_generic',
  ),
  'mcrypt_get_block_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_get_block_size',
  ),
  'mcrypt_get_cipher_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_get_cipher_name',
  ),
  'mcrypt_get_iv_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_get_iv_size',
  ),
  'mcrypt_get_key_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_get_key_size',
  ),
  'mcrypt_list_algorithms' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'initializer' => '= ini_get("mcrypt.algorithms_dir")',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mcrypt_list_algorithms',
  ),
  'mcrypt_list_modes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'initializer' => '= ini_get("mcrypt.modes_dir")',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mcrypt_list_modes',
  ),
  'mcrypt_module_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_module_close',
  ),
  'mcrypt_module_get_algo_block_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algorithm',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_module_get_algo_block_size',
  ),
  'mcrypt_module_get_algo_key_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algorithm',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mcrypt_module_get_algo_key_size',
  ),
  'mcrypt_module_get_supported_key_sizes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algorithm',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mcrypt_module_get_supported_key_sizes',
  ),
  'mcrypt_module_is_block_algorithm_mode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_module_is_block_algorithm_mode',
  ),
  'mcrypt_module_is_block_algorithm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algorithm',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_module_is_block_algorithm',
  ),
  'mcrypt_module_is_block_mode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_module_is_block_mode',
  ),
  'mcrypt_module_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algorithm',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$algorithm_directory',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$mode_directory',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'mcrypt_module_open',
  ),
  'mcrypt_module_self_test' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$algorithm',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$lib_dir',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mcrypt_module_self_test',
  ),
  'mcrypt_ofb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mcrypt_ofb',
  ),
  'mdecrypt_generic' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$td',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mdecrypt_generic',
  ),
  'mhash_count' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'mhash_count',
  ),
  'mhash_get_block_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$hash',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mhash_get_block_size',
  ),
  'mhash_get_hash_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$hash',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mhash_get_hash_name',
  ),
  'mhash_keygen_s2k' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$hash',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$salt',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$bytes',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mhash_keygen_s2k',
  ),
  'mhash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$hash',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mhash',
  ),
  'openssl_cipher_iv_length' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'openssl_cipher_iv_length',
  ),
  'openssl_csr_export_to_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$csr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$outfilename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$notext',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_csr_export_to_file',
  ),
  'openssl_csr_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$csr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$out',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$notext',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_csr_export',
  ),
  'openssl_csr_get_public_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$csr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$use_shortnames',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'openssl_csr_get_public_key',
  ),
  'openssl_csr_get_subject' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$csr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$use_shortnames',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'openssl_csr_get_subject',
  ),
  'openssl_csr_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$dn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '&$privkey',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$configargs',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$extraattribs',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'openssl_csr_new',
  ),
  'openssl_csr_sign' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$csr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$cacert',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$priv_key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$days',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$configargs',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$serial',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'openssl_csr_sign',
  ),
  'openssl_decrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_decrypt',
  ),
  'openssl_dh_compute_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pub_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$dh_key',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_dh_compute_key',
  ),
  'openssl_digest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_digest',
  ),
  'openssl_encrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$iv',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_encrypt',
  ),
  'openssl_error_string' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'openssl_error_string',
  ),
  'openssl_free_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$key_identifier',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'openssl_free_key',
  ),
  'openssl_get_cert_locations' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'openssl_get_cert_locations',
  ),
  'openssl_get_cipher_methods' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$aliases',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'openssl_get_cipher_methods',
  ),
  'openssl_get_md_methods' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$aliases',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'openssl_get_md_methods',
  ),
  'openssl_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$sealed_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$open_data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$env_key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$priv_key_id',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_open',
  ),
  'openssl_pbkdf2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$salt',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$key_length',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$iterations',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$digest_algorithm',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_pbkdf2',
  ),
  'openssl_pkcs12_export_to_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$priv_key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$pass',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkcs12_export_to_file',
  ),
  'openssl_pkcs12_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$out',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$priv_key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$pass',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkcs12_export',
  ),
  'openssl_pkcs12_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pkcs12',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$certs',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pass',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkcs12_read',
  ),
  'openssl_pkcs7_decrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$infilename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$outfilename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$recipcert',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$recipkey',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkcs7_decrypt',
  ),
  'openssl_pkcs7_encrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$infile',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$outfile',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$recipcerts',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$cipherid',
        'initializer' => '= OPENSSL_CIPHER_RC2_40',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkcs7_encrypt',
  ),
  'openssl_pkcs7_sign' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$infilename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$outfilename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$signcert',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$privkey',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= PKCS7_DETACHED',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$extracerts',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkcs7_sign',
  ),
  'openssl_pkcs7_verify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$outfilename',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$cainfo',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$extracerts',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'openssl_pkcs7_verify',
  ),
  'openssl_pkey_export_to_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$outfilename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$configargs',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkey_export_to_file',
  ),
  'openssl_pkey_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$out',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$configargs',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_pkey_export',
  ),
  'openssl_pkey_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'openssl_pkey_free',
  ),
  'openssl_pkey_get_details' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'openssl_pkey_get_details',
  ),
  'openssl_pkey_get_private' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'openssl_pkey_get_private',
  ),
  'openssl_pkey_get_public' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$certificate',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'openssl_pkey_get_public',
  ),
  'openssl_pkey_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$configargs',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'openssl_pkey_new',
  ),
  'openssl_private_decrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$decrypted',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$padding',
        'initializer' => '= OPENSSL_PKCS1_PADDING',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_private_decrypt',
  ),
  'openssl_private_encrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$crypted',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$padding',
        'initializer' => '= OPENSSL_PKCS1_PADDING',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_private_encrypt',
  ),
  'openssl_public_decrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$decrypted',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$padding',
        'initializer' => '= OPENSSL_PKCS1_PADDING',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_public_decrypt',
  ),
  'openssl_public_encrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$crypted',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$padding',
        'initializer' => '= OPENSSL_PKCS1_PADDING',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_public_encrypt',
  ),
  'openssl_random_pseudo_bytes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '&$crypto_strong',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_random_pseudo_bytes',
  ),
  'openssl_seal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$sealed_data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$env_keys',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$pub_key_ids',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'openssl_seal',
  ),
  'openssl_sign' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$signature',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$priv_key_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$signature_alg',
        'initializer' => '= OPENSSL_ALGO_SHA1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_sign',
  ),
  'openssl_spki_export_challenge' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$spkac',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_spki_export_challenge',
  ),
  'openssl_spki_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$spkac',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_spki_export',
  ),
  'openssl_spki_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '&$privkey',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$challenge',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$algorithm',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_spki_new',
  ),
  'openssl_spki_verify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$spkac',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'openssl_spki_verify',
  ),
  'openssl_verify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$signature',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$pub_key_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$signature_alg',
        'initializer' => '= OPENSSL_ALGO_SHA1',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'openssl_verify',
  ),
  'openssl_x509_check_private_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$cert',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_x509_check_private_key',
  ),
  'openssl_x509_checkpurpose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509cert',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$purpose',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$cainfo',
        'initializer' => '= array()',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$untrustedfile',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'openssl_x509_checkpurpose',
  ),
  'openssl_x509_export_to_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$outfilename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$notext',
        'initializer' => '= TRUE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_x509_export_to_file',
  ),
  'openssl_x509_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$output',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$notext',
        'initializer' => '= TRUE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_x509_export',
  ),
  'openssl_x509_fingerprint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$hash_algorithm',
        'initializer' => '= "sha1"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'openssl_x509_fingerprint',
  ),
  'openssl_x509_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$x509cert',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'openssl_x509_free',
  ),
  'openssl_x509_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509cert',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$shortnames',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'openssl_x509_parse',
  ),
  'openssl_x509_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$x509certdata',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'openssl_x509_read',
  ),
  'password_get_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hash',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'password_get_info',
  ),
  'password_hash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$algo',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'password_hash',
  ),
  'password_needs_rehash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hash',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$algo',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'boolean',
    'name' => 'password_needs_rehash',
  ),
  'password_verify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$hash',
        'required' => true,
      ),
    ),
    'type' => 'boolean',
    'name' => 'password_verify',
  ),
  'dba_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'dba_close',
  ),
  'dba_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dba_delete',
  ),
  'dba_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dba_exists',
  ),
  'dba_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$skip',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dba_fetch',
  ),
  'dba_firstkey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dba_firstkey',
  ),
  'dba_handlers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$full_info',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'dba_handlers',
  ),
  'dba_insert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dba_insert',
  ),
  'dba_key_split' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dba_key_split',
  ),
  'dba_list' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'dba_list',
  ),
  'dba_nextkey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dba_nextkey',
  ),
  'dba_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$handler',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'dba_open',
  ),
  'dba_optimize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dba_optimize',
  ),
  'dba_popen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$handler',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'dba_popen',
  ),
  'dba_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dba_replace',
  ),
  'dba_sync' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dba_sync',
  ),
  'dbx_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$link_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbx_close',
  ),
  'dbx_compare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$row_a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$row_b',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$column_key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= DBX_CMP_ASC | DBX_CMP_NATIVE',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'dbx_compare',
  ),
  'dbx_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$module',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$persistent',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'dbx_connect',
  ),
  'dbx_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$link_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dbx_error',
  ),
  'dbx_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dbx_escape_string',
  ),
  'dbx_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$result_identifier',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dbx_fetch_row',
  ),
  'dbx_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sql_statement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dbx_query',
  ),
  'dbx_sort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user_compare_function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dbx_sort',
  ),
  'odbc_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$OnOff',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'odbc_autocommit',
  ),
  'odbc_binmode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_binmode',
  ),
  'odbc_close_all' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'odbc_close_all',
  ),
  'odbc_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'odbc_close',
  ),
  'odbc_columnprivileges' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$column_name',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_columnprivileges',
  ),
  'odbc_columns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$column_name',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_columns',
  ),
  'odbc_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_commit',
  ),
  'odbc_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dsn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$cursor_type',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_connect',
  ),
  'odbc_cursor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'odbc_cursor',
  ),
  'odbc_data_source' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fetch_type',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'odbc_data_source',
  ),
  'odbc_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'odbc_error',
  ),
  'odbc_errormsg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'odbc_errormsg',
  ),
  'odbc_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query_string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_exec',
  ),
  'odbc_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$parameters_array',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_execute',
  ),
  'odbc_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rownumber',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'odbc_fetch_array',
  ),
  'odbc_fetch_into' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$result_array',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$rownumber',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'odbc_fetch_into',
  ),
  'odbc_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rownumber',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'odbc_fetch_object',
  ),
  'odbc_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_fetch_row',
  ),
  'odbc_field_len' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'odbc_field_len',
  ),
  'odbc_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'odbc_field_name',
  ),
  'odbc_field_num' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'odbc_field_num',
  ),
  'odbc_field_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'odbc_field_scale',
  ),
  'odbc_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'odbc_field_type',
  ),
  'odbc_foreignkeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pk_qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pk_owner',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$pk_table',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$fk_qualifier',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$fk_owner',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$fk_table',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_foreignkeys',
  ),
  'odbc_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_free_result',
  ),
  'odbc_gettypeinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$data_type',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_gettypeinfo',
  ),
  'odbc_longreadlen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_longreadlen',
  ),
  'odbc_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_next_result',
  ),
  'odbc_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'odbc_num_fields',
  ),
  'odbc_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'odbc_num_rows',
  ),
  'odbc_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dsn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$cursor_type',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_pconnect',
  ),
  'odbc_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query_string',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_prepare',
  ),
  'odbc_primarykeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_primarykeys',
  ),
  'odbc_procedurecolumns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$proc',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_procedurecolumns',
  ),
  'odbc_procedures' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_procedures',
  ),
  'odbc_result_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'odbc_result_all',
  ),
  'odbc_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'odbc_result',
  ),
  'odbc_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_rollback',
  ),
  'odbc_setoption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$function',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$param',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'odbc_setoption',
  ),
  'odbc_specialcolumns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$table',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$scope',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$nullable',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_specialcolumns',
  ),
  'odbc_statistics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$unique',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$accuracy',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_statistics',
  ),
  'odbc_tableprivileges' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_tableprivileges',
  ),
  'odbc_tables' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$owner',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'odbc_tables',
  ),
  'beginTransaction' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'beginTransaction',
  ),
  'commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$softCommit',
        'initializer' => '= false',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$waitSearcher',
        'initializer' => '= true',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$expungeDeletes',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'commit',
  ),
  'errorCode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'errorCode',
  ),
  'errorInfo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'errorInfo',
  ),
  'exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$output',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$return_var',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'exec',
  ),
  'getAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getAttribute',
  ),
  'getAvailableDrivers' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getAvailableDrivers',
  ),
  'inTransaction' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'inTransaction',
  ),
  'lastInsertId' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'lastInsertId',
  ),
  'prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvPrepare',
    'name' => 'prepare',
  ),
  'query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$expression',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DOMNode',
        'name' => '$contextnode',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$registerNodeNS',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNodeList',
    'name' => 'query',
  ),
  'quote' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$parameter_type',
        'initializer' => '= PDO::PARAM_STR',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'quote',
  ),
  'rollBack' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'rollBack',
  ),
  'setAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMAttr',
    'name' => 'setAttribute',
  ),
  'pdo_drivers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'pdo_drivers',
  ),
  'bindColumn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$param',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$maxlen',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$driverdata',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'bindColumn',
  ),
  'bindParam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$sql_param',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$param',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'bindParam',
  ),
  'bindValue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$sql_param',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'bindValue',
  ),
  'closeCursor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'closeCursor',
  ),
  'columnCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'columnCount',
  ),
  'debugDumpParams' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'debugDumpParams',
  ),
  'execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'modifier' => 'abstract',
    'type' => 'mixed',
    'name' => 'execute',
  ),
  'fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$protected_resource_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$extra_parameters',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$http_method',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$http_headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'fetch',
  ),
  'fetchAll' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'fetchAll',
  ),
  'fetchColumn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$column_number',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'fetchColumn',
  ),
  'fetchObject' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "stdClass"',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$ctor_args',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'fetchObject',
  ),
  'getColumnMeta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getColumnMeta',
  ),
  'nextRowset' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'nextRowset',
  ),
  'rowCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'rowCount',
  ),
  'setFetchMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFetchMode',
  ),
  'step' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rownumber',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$value2',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$..',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'step',
  ),
  'fini' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rownumber',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'fini',
  ),
  'cubrid_bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$bind_index',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$bind_value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$bind_value_type',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_bind',
  ),
  'cubrid_close_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_close_prepare',
  ),
  'cubrid_close_request' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_close_request',
  ),
  'cubrid_col_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_col_get',
  ),
  'cubrid_col_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_col_size',
  ),
  'cubrid_column_names' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_column_names',
  ),
  'cubrid_column_types' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_column_types',
  ),
  'cubrid_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_commit',
  ),
  'cubrid_connect_with_url' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$conn_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$userid',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$new_link',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_connect_with_url',
  ),
  'cubrid_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$userid',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$new_link',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_connect',
  ),
  'cubrid_current_oid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_current_oid',
  ),
  'cubrid_disconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_disconnect',
  ),
  'cubrid_drop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_drop',
  ),
  'cubrid_error_code_facility' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'cubrid_error_code_facility',
  ),
  'cubrid_error_code' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'cubrid_error_code',
  ),
  'cubrid_error_msg' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'cubrid_error_msg',
  ),
  'cubrid_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$request_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_execute',
  ),
  'cubrid_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= CUBRID_BOTH',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'cubrid_fetch',
  ),
  'cubrid_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_free_result',
  ),
  'cubrid_get_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_get_autocommit',
  ),
  'cubrid_get_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_get_charset',
  ),
  'cubrid_get_class_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_get_class_name',
  ),
  'cubrid_get_client_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'cubrid_get_client_info',
  ),
  'cubrid_get_db_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_get_db_parameter',
  ),
  'cubrid_get_query_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_get_query_timeout',
  ),
  'cubrid_get_server_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_get_server_info',
  ),
  'cubrid_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$attr',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'cubrid_get',
  ),
  'cubrid_insert_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_insert_id',
  ),
  'cubrid_is_instance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_is_instance',
  ),
  'cubrid_lob_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$lob_identifier_array',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob_close',
  ),
  'cubrid_lob_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$path_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob_export',
  ),
  'cubrid_lob_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sql',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_lob_get',
  ),
  'cubrid_lob_send' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob_send',
  ),
  'cubrid_lob_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_lob_size',
  ),
  'cubrid_lob2_bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$bind_index',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$bind_value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$bind_value_type',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob2_bind',
  ),
  'cubrid_lob2_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob2_close',
  ),
  'cubrid_lob2_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob2_export',
  ),
  'cubrid_lob2_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob2_import',
  ),
  'cubrid_lob2_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'initializer' => '= "BLOB"',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_lob2_new',
  ),
  'cubrid_lob2_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_lob2_read',
  ),
  'cubrid_lob2_seek64' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$origin',
        'initializer' => '= CUBRID_CURSOR_CURRENT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob2_seek64',
  ),
  'cubrid_lob2_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$origin',
        'initializer' => '= CUBRID_CURSOR_CURRENT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob2_seek',
  ),
  'cubrid_lob2_size64' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_lob2_size64',
  ),
  'cubrid_lob2_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_lob2_size',
  ),
  'cubrid_lob2_tell64' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_lob2_tell64',
  ),
  'cubrid_lob2_tell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_lob2_tell',
  ),
  'cubrid_lob2_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$lob_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$buf',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lob2_write',
  ),
  'cubrid_lock_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lock_read',
  ),
  'cubrid_lock_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_lock_write',
  ),
  'cubrid_move_cursor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$origin',
        'initializer' => '= CUBRID_CURSOR_CURRENT',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_move_cursor',
  ),
  'cubrid_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_next_result',
  ),
  'cubrid_num_cols' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_num_cols',
  ),
  'cubrid_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_num_rows',
  ),
  'cubrid_pconnect_with_url' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$conn_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$userid',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_pconnect_with_url',
  ),
  'cubrid_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$userid',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_pconnect',
  ),
  'cubrid_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prepare_stmt',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_prepare',
  ),
  'cubrid_put' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_put',
  ),
  'cubrid_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_rollback',
  ),
  'cubrid_schema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$schema_type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_schema',
  ),
  'cubrid_seq_drop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_seq_drop',
  ),
  'cubrid_seq_insert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$seq_element',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_seq_insert',
  ),
  'cubrid_seq_put' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$seq_element',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_seq_put',
  ),
  'cubrid_set_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$set_element',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_set_add',
  ),
  'cubrid_set_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_set_autocommit',
  ),
  'cubrid_set_db_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$param_type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$param_value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_set_db_parameter',
  ),
  'cubrid_set_drop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attr_name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$set_element',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_set_drop',
  ),
  'cubrid_set_query_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_set_query_timeout',
  ),
  'cubrid_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'cubrid_version',
  ),
  'cubrid_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_affected_rows',
  ),
  'cubrid_client_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_client_encoding',
  ),
  'cubrid_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_close',
  ),
  'cubrid_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_data_seek',
  ),
  'cubrid_db_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_db_name',
  ),
  'cubrid_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_errno',
  ),
  'cubrid_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_error',
  ),
  'cubrid_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= CUBRID_BOTH',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_fetch_array',
  ),
  'cubrid_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_fetch_assoc',
  ),
  'cubrid_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'cubrid_fetch_field',
  ),
  'cubrid_fetch_lengths' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_fetch_lengths',
  ),
  'cubrid_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'cubrid_fetch_object',
  ),
  'cubrid_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_fetch_row',
  ),
  'cubrid_field_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_field_flags',
  ),
  'cubrid_field_len' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_field_len',
  ),
  'cubrid_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_field_name',
  ),
  'cubrid_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_field_seek',
  ),
  'cubrid_field_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_field_table',
  ),
  'cubrid_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_field_type',
  ),
  'cubrid_list_dbs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'cubrid_list_dbs',
  ),
  'cubrid_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_num_fields',
  ),
  'cubrid_ping' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'cubrid_ping',
  ),
  'cubrid_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_query',
  ),
  'cubrid_real_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$unescaped_string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_real_escape_string',
  ),
  'cubrid_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_result',
  ),
  'cubrid_unbuffered_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cubrid_unbuffered_query',
  ),
  'cubrid_load_from_glo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_load_from_glo',
  ),
  'cubrid_new_glo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cubrid_new_glo',
  ),
  'cubrid_save_to_glo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_save_to_glo',
  ),
  'cubrid_send_glo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cubrid_send_glo',
  ),
  'dbplus_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_add',
  ),
  'dbplus_aql' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$server',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dbpath',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'dbplus_aql',
  ),
  'dbplus_chdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$newdir',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'dbplus_chdir',
  ),
  'dbplus_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dbplus_close',
  ),
  'dbplus_curr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_curr',
  ),
  'dbplus_errcode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errno',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'dbplus_errcode',
  ),
  'dbplus_errno' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'dbplus_errno',
  ),
  'dbplus_find' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$constraints',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_find',
  ),
  'dbplus_first' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_first',
  ),
  'dbplus_flush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_flush',
  ),
  'dbplus_freealllocks' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'dbplus_freealllocks',
  ),
  'dbplus_freelock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_freelock',
  ),
  'dbplus_freerlocks' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_freerlocks',
  ),
  'dbplus_getlock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_getlock',
  ),
  'dbplus_getunique' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$uniqueid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_getunique',
  ),
  'dbplus_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_info',
  ),
  'dbplus_last' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_last',
  ),
  'dbplus_lockrel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_lockrel',
  ),
  'dbplus_next' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_next',
  ),
  'dbplus_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'dbplus_open',
  ),
  'dbplus_prev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_prev',
  ),
  'dbplus_rchperm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mask',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$group',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_rchperm',
  ),
  'dbplus_rcreate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$domlist',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$overwrite',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'dbplus_rcreate',
  ),
  'dbplus_rcrtexact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$overwrite',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dbplus_rcrtexact',
  ),
  'dbplus_rcrtlike' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$overwrite',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dbplus_rcrtlike',
  ),
  'dbplus_resolve' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$relation_name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'dbplus_resolve',
  ),
  'dbplus_restorepos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tuple',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_restorepos',
  ),
  'dbplus_rkeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$domlist',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dbplus_rkeys',
  ),
  'dbplus_ropen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'dbplus_ropen',
  ),
  'dbplus_rquery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dbpath',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'dbplus_rquery',
  ),
  'dbplus_rrename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_rrename',
  ),
  'dbplus_rsecindex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$domlist',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dbplus_rsecindex',
  ),
  'dbplus_runlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_runlink',
  ),
  'dbplus_rzap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_rzap',
  ),
  'dbplus_savepos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_savepos',
  ),
  'dbplus_setindex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$idx_name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_setindex',
  ),
  'dbplus_setindexbynumber' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$idx_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_setindexbynumber',
  ),
  'dbplus_sql' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$server',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dbpath',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'dbplus_sql',
  ),
  'dbplus_tcl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$sid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$script',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dbplus_tcl',
  ),
  'dbplus_tremove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tuple',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$current',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_tremove',
  ),
  'dbplus_undo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_undo',
  ),
  'dbplus_undoprepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_undoprepare',
  ),
  'dbplus_unlockrel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_unlockrel',
  ),
  'dbplus_unselect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_unselect',
  ),
  'dbplus_update' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$old',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$new',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_update',
  ),
  'dbplus_xlockrel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_xlockrel',
  ),
  'dbplus_xunlockrel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$relation',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbplus_xunlockrel',
  ),
  'dbase_add_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$record',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dbase_add_record',
  ),
  'dbase_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dbase_close',
  ),
  'dbase_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$fields',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbase_create',
  ),
  'dbase_delete_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$record_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dbase_delete_record',
  ),
  'dbase_get_header_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'dbase_get_header_info',
  ),
  'dbase_get_record_with_names' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$record_number',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'dbase_get_record_with_names',
  ),
  'dbase_get_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$record_number',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'dbase_get_record',
  ),
  'dbase_numfields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbase_numfields',
  ),
  'dbase_numrecords' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbase_numrecords',
  ),
  'dbase_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'dbase_open',
  ),
  'dbase_pack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dbase_pack',
  ),
  'dbase_replace_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dbase_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$record',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$record_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dbase_replace_record',
  ),
  'filepro_fieldcount' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'filepro_fieldcount',
  ),
  'filepro_fieldname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'filepro_fieldname',
  ),
  'filepro_fieldtype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'filepro_fieldtype',
  ),
  'filepro_fieldwidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'filepro_fieldwidth',
  ),
  'filepro_retrieve' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'filepro_retrieve',
  ),
  'filepro_rowcount' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'filepro_rowcount',
  ),
  'filepro' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'filepro',
  ),
  'ibase_add_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$first_name',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$middle_name',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$last_name',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_add_user',
  ),
  'ibase_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ibase_affected_rows',
  ),
  'ibase_backup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$source_db',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$verbose',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ibase_backup',
  ),
  'ibase_blob_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$blob_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ibase_blob_add',
  ),
  'ibase_blob_cancel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$blob_handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_blob_cancel',
  ),
  'ibase_blob_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$blob_handle',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ibase_blob_close',
  ),
  'ibase_blob_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_blob_create',
  ),
  'ibase_blob_echo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$blob_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_blob_echo',
  ),
  'ibase_blob_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$blob_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ibase_blob_get',
  ),
  'ibase_blob_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$file_handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ibase_blob_import',
  ),
  'ibase_blob_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$blob_id',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ibase_blob_info',
  ),
  'ibase_blob_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$blob_id',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_blob_open',
  ),
  'ibase_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection_id',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_close',
  ),
  'ibase_commit_ret' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_or_trans_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_commit_ret',
  ),
  'ibase_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_or_trans_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_commit',
  ),
  'ibase_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$buffers',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$dialect',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$role',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$sync',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_connect',
  ),
  'ibase_db_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$db',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$action',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$argument',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ibase_db_info',
  ),
  'ibase_delete_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_delete_user',
  ),
  'ibase_drop_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_drop_db',
  ),
  'ibase_errcode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'ibase_errcode',
  ),
  'ibase_errmsg' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'ibase_errmsg',
  ),
  'ibase_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$bind_arg',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_execute',
  ),
  'ibase_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fetch_flag',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'ibase_fetch_assoc',
  ),
  'ibase_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fetch_flag',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'ibase_fetch_object',
  ),
  'ibase_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fetch_flag',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'ibase_fetch_row',
  ),
  'ibase_field_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ibase_field_info',
  ),
  'ibase_free_event_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_free_event_handler',
  ),
  'ibase_free_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_free_query',
  ),
  'ibase_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_free_result',
  ),
  'ibase_gen_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$generator',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$increment',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ibase_gen_id',
  ),
  'ibase_maintain_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$db',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$action',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$argument',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_maintain_db',
  ),
  'ibase_modify_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$first_name',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$middle_name',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$last_name',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_modify_user',
  ),
  'ibase_name_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_name_result',
  ),
  'ibase_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ibase_num_fields',
  ),
  'ibase_num_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ibase_num_params',
  ),
  'ibase_param_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$param_number',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ibase_param_info',
  ),
  'ibase_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$buffers',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$dialect',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$role',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$sync',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_pconnect',
  ),
  'ibase_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$trans',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_prepare',
  ),
  'ibase_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$bind_args',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_query',
  ),
  'ibase_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$source_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest_db',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$verbose',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ibase_restore',
  ),
  'ibase_rollback_ret' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_or_trans_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_rollback_ret',
  ),
  'ibase_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_or_trans_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_rollback',
  ),
  'ibase_server_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$action',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ibase_server_info',
  ),
  'ibase_service_attach' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dba_username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dba_password',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_service_attach',
  ),
  'ibase_service_detach' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service_handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ibase_service_detach',
  ),
  'ibase_set_event_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$event_handler',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$event_name1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$event_name2',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_set_event_handler',
  ),
  'ibase_trans' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$trans_args',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ibase_trans',
  ),
  'ibase_wait_event' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$event_name1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$event_name2',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ibase_wait_event',
  ),
  'fbsql_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_affected_rows',
  ),
  'fbsql_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$OnOff',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_autocommit',
  ),
  'fbsql_blob_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$blob_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_blob_size',
  ),
  'fbsql_change_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_change_user',
  ),
  'fbsql_clob_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clob_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_clob_size',
  ),
  'fbsql_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_close',
  ),
  'fbsql_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_commit',
  ),
  'fbsql_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'initializer' => '= ini_get("fbsql.default_host")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'initializer' => '= ini_get("fbsql.default_user")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'initializer' => '= ini_get("fbsql.default_password")',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fbsql_connect',
  ),
  'fbsql_create_blob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$blob_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_create_blob',
  ),
  'fbsql_create_clob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clob_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_create_clob',
  ),
  'fbsql_create_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$database_options',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_create_db',
  ),
  'fbsql_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_data_seek',
  ),
  'fbsql_database_password' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$database_password',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_database_password',
  ),
  'fbsql_database' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_database',
  ),
  'fbsql_db_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fbsql_db_query',
  ),
  'fbsql_db_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_db_status',
  ),
  'fbsql_drop_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_drop_db',
  ),
  'fbsql_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_errno',
  ),
  'fbsql_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_error',
  ),
  'fbsql_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'fbsql_fetch_array',
  ),
  'fbsql_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fbsql_fetch_assoc',
  ),
  'fbsql_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'fbsql_fetch_field',
  ),
  'fbsql_fetch_lengths' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fbsql_fetch_lengths',
  ),
  'fbsql_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'fbsql_fetch_object',
  ),
  'fbsql_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fbsql_fetch_row',
  ),
  'fbsql_field_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_field_flags',
  ),
  'fbsql_field_len' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_field_len',
  ),
  'fbsql_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_index',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_field_name',
  ),
  'fbsql_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_field_seek',
  ),
  'fbsql_field_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_field_table',
  ),
  'fbsql_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_field_type',
  ),
  'fbsql_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_free_result',
  ),
  'fbsql_get_autostart_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'fbsql_get_autostart_info',
  ),
  'fbsql_hostname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$host_name',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_hostname',
  ),
  'fbsql_insert_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_insert_id',
  ),
  'fbsql_list_dbs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fbsql_list_dbs',
  ),
  'fbsql_list_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fbsql_list_fields',
  ),
  'fbsql_list_tables' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fbsql_list_tables',
  ),
  'fbsql_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_next_result',
  ),
  'fbsql_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_num_fields',
  ),
  'fbsql_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_num_rows',
  ),
  'fbsql_password' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_password',
  ),
  'fbsql_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'initializer' => '= ini_get("fbsql.default_host")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'initializer' => '= ini_get("fbsql.default_user")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'initializer' => '= ini_get("fbsql.default_password")',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fbsql_pconnect',
  ),
  'fbsql_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$batch_size',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fbsql_query',
  ),
  'fbsql_read_blob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$blob_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_read_blob',
  ),
  'fbsql_read_clob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clob_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_read_clob',
  ),
  'fbsql_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'fbsql_result',
  ),
  'fbsql_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_rollback',
  ),
  'fbsql_rows_fetched' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fbsql_rows_fetched',
  ),
  'fbsql_select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_select_db',
  ),
  'fbsql_set_characterset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$characterset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$in_out_both',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'fbsql_set_characterset',
  ),
  'fbsql_set_lob_mode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$lob_mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_set_lob_mode',
  ),
  'fbsql_set_password' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$old_password',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_set_password',
  ),
  'fbsql_set_transaction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$locking',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$isolation',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'fbsql_set_transaction',
  ),
  'fbsql_start_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$database_options',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_start_db',
  ),
  'fbsql_stop_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_stop_db',
  ),
  'fbsql_table_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_table_name',
  ),
  'fbsql_username' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fbsql_username',
  ),
  'fbsql_warnings' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$OnOff',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fbsql_warnings',
  ),
  'db2_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'db2_autocommit',
  ),
  'db2_bind_param' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$parameter-number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$variable-name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$parameter-type',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$data-type',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$precision',
        'initializer' => '= -1',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_bind_param',
  ),
  'db2_client_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'db2_client_info',
  ),
  'db2_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_close',
  ),
  'db2_column_privileges' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table-name',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$column-name',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_column_privileges',
  ),
  'db2_columns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table-name',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$column-name',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_columns',
  ),
  'db2_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_commit',
  ),
  'db2_conn_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_conn_error',
  ),
  'db2_conn_errormsg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_conn_errormsg',
  ),
  'db2_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_connect',
  ),
  'db2_cursor_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_cursor_type',
  ),
  'db2_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string_literal',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_escape_string',
  ),
  'db2_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$statement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_exec',
  ),
  'db2_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$parameters',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_execute',
  ),
  'db2_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'db2_fetch_array',
  ),
  'db2_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'db2_fetch_assoc',
  ),
  'db2_fetch_both' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'db2_fetch_both',
  ),
  'db2_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'db2_fetch_object',
  ),
  'db2_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_fetch_row',
  ),
  'db2_field_display_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_field_display_size',
  ),
  'db2_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_field_name',
  ),
  'db2_field_num' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_field_num',
  ),
  'db2_field_precision' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_field_precision',
  ),
  'db2_field_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_field_scale',
  ),
  'db2_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_field_type',
  ),
  'db2_field_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_field_width',
  ),
  'db2_foreign_keys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table-name',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_foreign_keys',
  ),
  'db2_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_free_result',
  ),
  'db2_free_stmt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_free_stmt',
  ),
  'db2_get_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$resource',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_get_option',
  ),
  'db2_last_insert_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$resource',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_last_insert_id',
  ),
  'db2_lob_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$colnum',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_lob_read',
  ),
  'db2_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_next_result',
  ),
  'db2_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_num_fields',
  ),
  'db2_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'db2_num_rows',
  ),
  'db2_pclose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$resource',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_pclose',
  ),
  'db2_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_pconnect',
  ),
  'db2_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$statement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_prepare',
  ),
  'db2_primary_keys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table-name',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_primary_keys',
  ),
  'db2_procedure_columns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$procedure',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$parameter',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_procedure_columns',
  ),
  'db2_procedures' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$procedure',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_procedures',
  ),
  'db2_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'db2_result',
  ),
  'db2_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_rollback',
  ),
  'db2_server_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'db2_server_info',
  ),
  'db2_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$resource',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'db2_set_option',
  ),
  'db2_special_columns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$scope',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_special_columns',
  ),
  'db2_statistics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table-name',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$unique',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_statistics',
  ),
  'db2_stmt_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_stmt_error',
  ),
  'db2_stmt_errormsg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'db2_stmt_errormsg',
  ),
  'db2_table_privileges' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_table_privileges',
  ),
  'db2_tables' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$table-name',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$table-type',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'db2_tables',
  ),
  'ifx_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifx_affected_rows',
  ),
  'ifx_blobinfile_mode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_blobinfile_mode',
  ),
  'ifx_byteasvarchar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_byteasvarchar',
  ),
  'ifx_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_close',
  ),
  'ifx_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$userid',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ifx_connect',
  ),
  'ifx_copy_blob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifx_copy_blob',
  ),
  'ifx_create_blob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$param',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifx_create_blob',
  ),
  'ifx_create_char' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$param',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifx_create_char',
  ),
  'ifx_do' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_do',
  ),
  'ifx_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ifx_error',
  ),
  'ifx_errormsg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errorcode',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ifx_errormsg',
  ),
  'ifx_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$position',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'ifx_fetch_row',
  ),
  'ifx_fieldproperties' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ifx_fieldproperties',
  ),
  'ifx_fieldtypes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ifx_fieldtypes',
  ),
  'ifx_free_blob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_free_blob',
  ),
  'ifx_free_char' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_free_char',
  ),
  'ifx_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_free_result',
  ),
  'ifx_get_blob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ifx_get_blob',
  ),
  'ifx_get_char' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ifx_get_char',
  ),
  'ifx_getsqlca' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ifx_getsqlca',
  ),
  'ifx_htmltbl_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$html_table_options',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ifx_htmltbl_result',
  ),
  'ifx_nullformat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_nullformat',
  ),
  'ifx_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifx_num_fields',
  ),
  'ifx_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifx_num_rows',
  ),
  'ifx_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$userid',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ifx_pconnect',
  ),
  'ifx_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$cursor_def',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$blobidarray',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ifx_prepare',
  ),
  'ifx_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$cursor_type',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$blobidarray',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ifx_query',
  ),
  'ifx_textasvarchar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_textasvarchar',
  ),
  'ifx_update_blob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_update_blob',
  ),
  'ifx_update_char' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifx_update_char',
  ),
  'ifxus_close_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifxus_close_slob',
  ),
  'ifxus_create_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifxus_create_slob',
  ),
  'ifxus_free_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ifxus_free_slob',
  ),
  'ifxus_open_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifxus_open_slob',
  ),
  'ifxus_read_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$nbytes',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ifxus_read_slob',
  ),
  'ifxus_seek_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifxus_seek_slob',
  ),
  'ifxus_tell_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifxus_tell_slob',
  ),
  'ifxus_write_slob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ifxus_write_slob',
  ),
  'ingres_autocommit_state' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_autocommit_state',
  ),
  'ingres_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_autocommit',
  ),
  'ingres_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ingres_charset',
  ),
  'ingres_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_close',
  ),
  'ingres_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_commit',
  ),
  'ingres_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ingres_connect',
  ),
  'ingres_cursor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ingres_cursor',
  ),
  'ingres_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ingres_errno',
  ),
  'ingres_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ingres_error',
  ),
  'ingres_errsqlstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ingres_errsqlstate',
  ),
  'ingres_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$source_string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ingres_escape_string',
  ),
  'ingres_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_execute',
  ),
  'ingres_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'ingres_fetch_array',
  ),
  'ingres_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ingres_fetch_assoc',
  ),
  'ingres_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'ingres_fetch_object',
  ),
  'ingres_fetch_proc_return' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ingres_fetch_proc_return',
  ),
  'ingres_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ingres_fetch_row',
  ),
  'ingres_field_length' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ingres_field_length',
  ),
  'ingres_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ingres_field_name',
  ),
  'ingres_field_nullable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_field_nullable',
  ),
  'ingres_field_precision' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ingres_field_precision',
  ),
  'ingres_field_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ingres_field_scale',
  ),
  'ingres_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ingres_field_type',
  ),
  'ingres_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_free_result',
  ),
  'ingres_next_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_next_error',
  ),
  'ingres_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ingres_num_fields',
  ),
  'ingres_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ingres_num_rows',
  ),
  'ingres_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ingres_pconnect',
  ),
  'ingres_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ingres_prepare',
  ),
  'ingres_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ingres_query',
  ),
  'ingres_result_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$position',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_result_seek',
  ),
  'ingres_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_rollback',
  ),
  'ingres_set_environment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ingres_set_environment',
  ),
  'ingres_unbuffered_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ingres_unbuffered_query',
  ),
  'maxdb_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_affected_rows',
  ),
  'maxdb_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_autocommit',
  ),
  'maxdb_change_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_change_user',
  ),
  'maxdb_character_set_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_character_set_name',
  ),
  'maxdb_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_close',
  ),
  'maxdb_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_commit',
  ),
  'maxdb_connect_errno' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'maxdb_connect_errno',
  ),
  'maxdb_connect_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'maxdb_connect_error',
  ),
  'maxdb_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$socket',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'maxdb_connect',
  ),
  'maxdb_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_data_seek',
  ),
  'maxdb_debug' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$debug',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'maxdb_debug',
  ),
  'maxdb_disable_reads_from_master' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_disable_reads_from_master',
  ),
  'maxdb_disable_rpl_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_disable_rpl_parse',
  ),
  'maxdb_dump_debug_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_dump_debug_info',
  ),
  'maxdb_embedded_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'maxdb_embedded_connect',
  ),
  'maxdb_enable_reads_from_master' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_enable_reads_from_master',
  ),
  'maxdb_enable_rpl_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_enable_rpl_parse',
  ),
  'maxdb_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_errno',
  ),
  'maxdb_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_error',
  ),
  'maxdb_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$resulttype',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'maxdb_fetch_array',
  ),
  'maxdb_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'maxdb_fetch_assoc',
  ),
  'maxdb_fetch_field_direct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fieldnr',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'maxdb_fetch_field_direct',
  ),
  'maxdb_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'maxdb_fetch_field',
  ),
  'maxdb_fetch_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'maxdb_fetch_fields',
  ),
  'maxdb_fetch_lengths' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'maxdb_fetch_lengths',
  ),
  'maxdb_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'maxdb_fetch_object',
  ),
  'maxdb_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'maxdb_fetch_row',
  ),
  'maxdb_field_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_field_count',
  ),
  'maxdb_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fieldnr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_field_seek',
  ),
  'maxdb_field_tell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_field_tell',
  ),
  'maxdb_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'maxdb_free_result',
  ),
  'maxdb_get_client_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'maxdb_get_client_info',
  ),
  'maxdb_get_client_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'maxdb_get_client_version',
  ),
  'maxdb_get_host_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_get_host_info',
  ),
  'maxdb_get_proto_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_get_proto_info',
  ),
  'maxdb_get_server_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_get_server_info',
  ),
  'maxdb_get_server_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_get_server_version',
  ),
  'maxdb_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_info',
  ),
  'maxdb_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'maxdb_init',
  ),
  'maxdb_insert_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'maxdb_insert_id',
  ),
  'maxdb_kill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$processid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_kill',
  ),
  'maxdb_master_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_master_query',
  ),
  'maxdb_more_results' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_more_results',
  ),
  'maxdb_multi_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_multi_query',
  ),
  'maxdb_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_next_result',
  ),
  'maxdb_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_num_fields',
  ),
  'maxdb_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_num_rows',
  ),
  'maxdb_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_options',
  ),
  'maxdb_ping' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_ping',
  ),
  'maxdb_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'maxdb_prepare',
  ),
  'maxdb_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$resultmode',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'maxdb_query',
  ),
  'maxdb_real_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 0',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$socket',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_real_connect',
  ),
  'maxdb_real_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$escapestr',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_real_escape_string',
  ),
  'maxdb_real_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_real_query',
  ),
  'maxdb_report' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_report',
  ),
  'maxdb_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_rollback',
  ),
  'maxdb_rpl_parse_enabled' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_rpl_parse_enabled',
  ),
  'maxdb_rpl_probe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_rpl_probe',
  ),
  'maxdb_rpl_query_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_rpl_query_type',
  ),
  'maxdb_select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_select_db',
  ),
  'maxdb_send_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_send_query',
  ),
  'maxdb_server_end' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'maxdb_server_end',
  ),
  'maxdb_server_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$groups',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_server_init',
  ),
  'maxdb_sqlstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_sqlstate',
  ),
  'maxdb_ssl_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$cert',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$ca',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$capath',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_ssl_set',
  ),
  'maxdb_stat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_stat',
  ),
  'maxdb_stmt_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_stmt_affected_rows',
  ),
  'maxdb_stmt_bind_param' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_bind_param',
  ),
  'maxdb_stmt_bind_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$var1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_bind_result',
  ),
  'maxdb_stmt_close_long_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$param_nr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_close_long_data',
  ),
  'maxdb_stmt_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_close',
  ),
  'maxdb_stmt_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_data_seek',
  ),
  'maxdb_stmt_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_stmt_errno',
  ),
  'maxdb_stmt_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_stmt_error',
  ),
  'maxdb_stmt_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_execute',
  ),
  'maxdb_stmt_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_fetch',
  ),
  'maxdb_stmt_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'maxdb_stmt_free_result',
  ),
  'maxdb_stmt_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'maxdb_stmt_init',
  ),
  'maxdb_stmt_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_stmt_num_rows',
  ),
  'maxdb_stmt_param_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_stmt_param_count',
  ),
  'maxdb_stmt_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_prepare',
  ),
  'maxdb_stmt_reset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_reset',
  ),
  'maxdb_stmt_result_metadata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'maxdb_stmt_result_metadata',
  ),
  'maxdb_stmt_send_long_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$param_nr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_send_long_data',
  ),
  'maxdb_stmt_sqlstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'maxdb_stmt_sqlstate',
  ),
  'maxdb_stmt_store_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'maxdb_stmt_store_result',
  ),
  'maxdb_store_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'maxdb_store_result',
  ),
  'maxdb_thread_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_thread_id',
  ),
  'maxdb_thread_safe' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'maxdb_thread_safe',
  ),
  'maxdb_use_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'maxdb_use_result',
  ),
  'maxdb_warning_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'maxdb_warning_count',
  ),
  'log_cmd_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$writeOptions',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$deleteOptions',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$protocolOptions',
        'required' => true,
      ),
    ),
    'name' => 'log_cmd_delete',
    'type' => 'array',
  ),
  'log_cmd_insert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$document',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$writeOptions',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$protocolOptions',
        'required' => true,
      ),
    ),
    'name' => 'log_cmd_insert',
    'type' => 'array',
  ),
  'log_cmd_update' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$writeOptions',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$updateOptions',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$protocolOptions',
        'required' => true,
      ),
    ),
    'name' => 'log_cmd_update',
    'type' => 'array',
  ),
  'log_getmore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$info',
        'required' => true,
      ),
    ),
    'name' => 'log_getmore',
    'type' => 'array',
  ),
  'log_killcursor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$info',
        'required' => true,
      ),
    ),
    'name' => 'log_killcursor',
    'type' => 'array',
  ),
  'log_reply' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$messageHeaders',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$operationHeaders',
        'required' => true,
      ),
    ),
    'name' => 'log_reply',
    'type' => 'array',
  ),
  'log_write_batch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$writeOptions',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$batch',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$protocolOptions',
        'required' => true,
      ),
    ),
    'name' => 'log_write_batch',
    'type' => 'array',
  ),
  'connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dsn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'boolean',
        'name' => '$force',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQSocket',
    'name' => 'connect',
  ),
  'dropDB' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$db',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'dropDB',
  ),
  'getConnections' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getConnections',
  ),
  'getHosts' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getHosts',
  ),
  'getReadPreference' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getReadPreference',
  ),
  'getWriteConcern' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getWriteConcern',
  ),
  'killCursor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_hash',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int|MongoInt64',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'killCursor',
  ),
  'listDBs' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'listDBs',
  ),
  'selectCollection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCollection',
    'name' => 'selectCollection',
  ),
  'selectDB' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoDB',
    'name' => 'selectDB',
  ),
  'setReadPreference' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$read_preference',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tags',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCommandCursor',
    'name' => 'setReadPreference',
  ),
  'setWriteConcern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$w',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$wtimeout',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setWriteConcern',
  ),
  'authenticate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'authenticate',
  ),
  'command' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$command',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$hash',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'command',
  ),
  'createCollection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCollection',
    'name' => 'createCollection',
  ),
  'createDBRef' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$document_or_id',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'createDBRef',
  ),
  'drop' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'drop',
  ),
  'dropCollection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$coll',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'dropCollection',
  ),
  'forceError' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'forceError',
  ),
  'getCollectionInfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getCollectionInfo',
  ),
  'getCollectionNames' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getCollectionNames',
  ),
  'getDBRef' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$ref',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getDBRef',
  ),
  'getGridFS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'initializer' => '= "fs"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoGridFS',
    'name' => 'getGridFS',
  ),
  'getProfilingLevel' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getProfilingLevel',
  ),
  'getSlaveOkay' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getSlaveOkay',
  ),
  'lastError' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'lastError',
  ),
  'listCollections' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'listCollections',
  ),
  'prevError' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'prevError',
  ),
  'repair' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$preserve_cloned_files',
        'initializer' => '= FALSE',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$backup_original_files',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'repair',
  ),
  'resetError' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'resetError',
  ),
  'setProfilingLevel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'setProfilingLevel',
  ),
  'setSlaveOkay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$ok',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSlaveOkay',
  ),
  'aggregate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$pipeline',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'aggregate',
  ),
  'aggregateCursor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$command',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCommandCursor',
    'name' => 'aggregateCursor',
  ),
  'batchInsert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'batchInsert',
  ),
  'createIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'createIndex',
  ),
  'deleteIndexes' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'deleteIndexes',
  ),
  'distinct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$query',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'distinct',
  ),
  'ensureIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string|array',
        'name' => '$key|keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'ensureIndex',
  ),
  'find' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$query',
        'initializer' => '= array()',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$fields',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoGridFSCursor',
    'name' => 'find',
  ),
  'findAndModify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$update',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$fields',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'findAndModify',
  ),
  'findOne' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$query',
        'initializer' => '= array()',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$fields',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoGridFSFile',
    'name' => 'findOne',
  ),
  'getIndexInfo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getIndexInfo',
  ),
  'group' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$initial',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'MongoCode',
        'name' => '$reduce',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'group',
  ),
  'insert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$priority',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'insert',
  ),
  'parallelCollectionScan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num_cursors',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array[MongoCommandCursor]',
    'name' => 'parallelCollectionScan',
  ),
  'remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$item',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'remove',
  ),
  'save' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'save',
  ),
  'toIndexString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$keys',
        'required' => true,
      ),
    ),
    'modifier' => 'static protected',
    'type' => 'string',
    'name' => 'toIndexString',
  ),
  'update' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'update',
  ),
  'validate' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'validate',
  ),
  'addOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'addOption',
  ),
  'awaitData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$wait',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'awaitData',
  ),
  'batchSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$batchSize',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCommandCursor',
    'name' => 'batchSize',
  ),
  'dead' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'dead',
  ),
  'doQuery' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'protected',
    'type' => 'void',
    'name' => 'doQuery',
  ),
  'explain' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'explain',
  ),
  'fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$f',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'fields',
  ),
  'getNext' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'MongoGridFSFile',
    'name' => 'getNext',
  ),
  'hasNext' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'hasNext',
  ),
  'hint' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'hint',
  ),
  'immortal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$liveForever',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'immortal',
  ),
  'info' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'info',
  ),
  'limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'limit',
  ),
  'maxTimeMS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$ms',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'maxTimeMS',
  ),
  'partial' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$okay',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'partial',
  ),
  'reset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'reset',
  ),
  'setFlag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$set',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'setFlag',
  ),
  'skip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'skip',
  ),
  'slaveOkay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$okay',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'slaveOkay',
  ),
  'snapshot' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'snapshot',
  ),
  'sort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sort_flags',
        'initializer' => '= SORT_REGULAR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'sort',
  ),
  'tailable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$tail',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCursor',
    'name' => 'tailable',
  ),
  'timeout' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'timeout',
  ),
  'createFromDocument' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MongoClient',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$hash',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$document',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'MongoCommandCursor',
    'name' => 'createFromDocument',
  ),
  'getHostname' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHostname',
  ),
  'getInc' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getInc',
  ),
  'getPID' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getPID',
  ),
  'getTimestamp' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTimestamp',
  ),
  'isValid' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isValid',
  ),
  'toDateTime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'DateTime',
    'name' => 'toDateTime',
  ),
  'create' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'create',
  ),
  'get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'get',
  ),
  'isRef' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$ref',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isRef',
  ),
  'put' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$columns',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'put',
  ),
  'storeBytes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$bytes',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$metadata',
        'initializer' => '= array()',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'storeBytes',
  ),
  'storeFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$metadata',
        'initializer' => '= array()',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'storeFile',
  ),
  'storeUpload' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$metadata',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'storeUpload',
  ),
  'getBytes' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getBytes',
  ),
  'getFilename' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFilename',
  ),
  'getResource' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getResource',
  ),
  'write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$session_data',
        'required' => true,
      ),
    ),
    'modifier' => 'abstract',
    'type' => 'bool',
    'name' => 'write',
  ),
  'add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'add',
  ),
  'getCallback' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'callable',
    'name' => 'getCallback',
  ),
  'getLevel' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getLevel',
  ),
  'getModule' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getModule',
  ),
  'setCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$cb',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setCallback',
  ),
  'setLevel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setLevel',
  ),
  'setModule' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$module',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setModule',
  ),
  'log_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$module',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
    ),
    'name' => 'log_function',
    'type' => 'int',
  ),
  'setSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'setSize',
  ),
  'connectUtil' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'protected',
    'type' => 'bool',
    'name' => 'connectUtil',
  ),
  'getPoolSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getPoolSize',
  ),
  'getSlave' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSlave',
  ),
  'poolDebug' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'poolDebug',
  ),
  'setPoolSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setPoolSize',
  ),
  'switchSlave' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'switchSlave',
  ),
  'bson_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$bson',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'bson_decode',
  ),
  'bson_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$anything',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'bson_encode',
  ),
  'getDocument' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getDocument',
  ),
  'msql_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msql_affected_rows',
  ),
  'msql_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'msql_close',
  ),
  'msql_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msql_connect',
  ),
  'msql_create_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'msql_create_db',
  ),
  'msql_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msql_data_seek',
  ),
  'msql_db_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msql_db_query',
  ),
  'msql_drop_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'msql_drop_db',
  ),
  'msql_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'msql_error',
  ),
  'msql_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'msql_fetch_array',
  ),
  'msql_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'msql_fetch_field',
  ),
  'msql_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'msql_fetch_object',
  ),
  'msql_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'msql_fetch_row',
  ),
  'msql_field_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msql_field_flags',
  ),
  'msql_field_len' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msql_field_len',
  ),
  'msql_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msql_field_name',
  ),
  'msql_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msql_field_seek',
  ),
  'msql_field_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msql_field_table',
  ),
  'msql_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msql_field_type',
  ),
  'msql_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msql_free_result',
  ),
  'msql_list_dbs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msql_list_dbs',
  ),
  'msql_list_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tablename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msql_list_fields',
  ),
  'msql_list_tables' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msql_list_tables',
  ),
  'msql_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msql_num_fields',
  ),
  'msql_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$query_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msql_num_rows',
  ),
  'msql_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msql_pconnect',
  ),
  'msql_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msql_query',
  ),
  'msql_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'msql_result',
  ),
  'msql_select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'msql_select_db',
  ),
  'mssql_bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$param_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$var',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$is_output',
        'initializer' => '= false',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$is_null',
        'initializer' => '= false',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$maxlen',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_bind',
  ),
  'mssql_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_close',
  ),
  'mssql_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servername',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$new_link',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mssql_connect',
  ),
  'mssql_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_data_seek',
  ),
  'mssql_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$skip_results',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mssql_execute',
  ),
  'mssql_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= MSSQL_BOTH',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mssql_fetch_array',
  ),
  'mssql_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mssql_fetch_assoc',
  ),
  'mssql_fetch_batch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mssql_fetch_batch',
  ),
  'mssql_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'mssql_fetch_field',
  ),
  'mssql_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'mssql_fetch_object',
  ),
  'mssql_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mssql_fetch_row',
  ),
  'mssql_field_length' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mssql_field_length',
  ),
  'mssql_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mssql_field_name',
  ),
  'mssql_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_field_seek',
  ),
  'mssql_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mssql_field_type',
  ),
  'mssql_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_free_result',
  ),
  'mssql_free_statement' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_free_statement',
  ),
  'mssql_get_last_message' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'mssql_get_last_message',
  ),
  'mssql_guid_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$binary',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$short_format',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mssql_guid_string',
  ),
  'mssql_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$sp_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mssql_init',
  ),
  'mssql_min_error_severity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$severity',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mssql_min_error_severity',
  ),
  'mssql_min_message_severity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$severity',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mssql_min_message_severity',
  ),
  'mssql_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_next_result',
  ),
  'mssql_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mssql_num_fields',
  ),
  'mssql_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mssql_num_rows',
  ),
  'mssql_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servername',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$new_link',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mssql_pconnect',
  ),
  'mssql_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$batch_size',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mssql_query',
  ),
  'mssql_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mssql_result',
  ),
  'mssql_rows_affected' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mssql_rows_affected',
  ),
  'mssql_select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mssql_select_db',
  ),
  'mysql_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_affected_rows',
  ),
  'mysql_client_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_client_encoding',
  ),
  'mysql_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_close',
  ),
  'mysql_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server',
        'initializer' => '= ini_get("mysql.default_host")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'initializer' => '= ini_get("mysql.default_user")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'initializer' => '= ini_get("mysql.default_password")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$new_link',
        'initializer' => '= false',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$client_flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_connect',
  ),
  'mysql_create_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_create_db',
  ),
  'mysql_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_data_seek',
  ),
  'mysql_db_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_db_name',
  ),
  'mysql_db_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_db_query',
  ),
  'mysql_drop_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_drop_db',
  ),
  'mysql_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_errno',
  ),
  'mysql_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_error',
  ),
  'mysql_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$unescaped_string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_escape_string',
  ),
  'mysql_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= MYSQL_BOTH',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mysql_fetch_array',
  ),
  'mysql_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysql_fetch_assoc',
  ),
  'mysql_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'mysql_fetch_field',
  ),
  'mysql_fetch_lengths' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysql_fetch_lengths',
  ),
  'mysql_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'mysql_fetch_object',
  ),
  'mysql_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysql_fetch_row',
  ),
  'mysql_field_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_field_flags',
  ),
  'mysql_field_len' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_field_len',
  ),
  'mysql_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_field_name',
  ),
  'mysql_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_field_seek',
  ),
  'mysql_field_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_field_table',
  ),
  'mysql_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_field_type',
  ),
  'mysql_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_free_result',
  ),
  'mysql_get_client_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'mysql_get_client_info',
  ),
  'mysql_get_host_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_get_host_info',
  ),
  'mysql_get_proto_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_get_proto_info',
  ),
  'mysql_get_server_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_get_server_info',
  ),
  'mysql_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_info',
  ),
  'mysql_insert_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_insert_id',
  ),
  'mysql_list_dbs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_list_dbs',
  ),
  'mysql_list_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_list_fields',
  ),
  'mysql_list_processes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_list_processes',
  ),
  'mysql_list_tables' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_list_tables',
  ),
  'mysql_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_num_fields',
  ),
  'mysql_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_num_rows',
  ),
  'mysql_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server',
        'initializer' => '= ini_get("mysql.default_host")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'initializer' => '= ini_get("mysql.default_user")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'initializer' => '= ini_get("mysql.default_password")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$client_flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_pconnect',
  ),
  'mysql_ping' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_ping',
  ),
  'mysql_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysql_query',
  ),
  'mysql_real_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$unescaped_string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_real_escape_string',
  ),
  'mysql_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_result',
  ),
  'mysql_select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_select_db',
  ),
  'mysql_set_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysql_set_charset',
  ),
  'mysql_stat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_stat',
  ),
  'mysql_tablename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$i',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysql_tablename',
  ),
  'mysql_thread_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysql_thread_id',
  ),
  'mysql_unbuffered_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysql_unbuffered_query',
  ),
  'autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'autocommit',
  ),
  'change_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'change_user',
  ),
  'character_set_name' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'character_set_name',
  ),
  'debug' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'debug',
  ),
  'dump_debug_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'dump_debug_info',
  ),
  'get_charset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'get_charset',
  ),
  'get_client_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'get_client_info',
  ),
  'get_connection_stats' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'get_connection_stats',
  ),
  'get_warnings' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'get_warnings',
  ),
  'init' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'init',
  ),
  'kill' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'kill',
  ),
  'more_results' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'more_results',
  ),
  'multi_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'multi_query',
  ),
  'next_result' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'next_result',
  ),
  'options' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'options',
  ),
  'ping' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'SolrPingResponse',
    'name' => 'ping',
  ),
  'poll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$readable',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$writable',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timeout',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'poll',
  ),
  'real_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$socket',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'real_connect',
  ),
  'escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$escapestr',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'escape_string',
  ),
  'real_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'real_query',
  ),
  'reap_async_query' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mysqli_result',
    'name' => 'reap_async_query',
  ),
  'refresh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'refresh',
  ),
  'rollback' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'rollback',
  ),
  'rpl_query_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'rpl_query_type',
  ),
  'select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'select_db',
  ),
  'send_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'send_query',
  ),
  'set_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'set_charset',
  ),
  'set_local_infile_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$read_func',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'set_local_infile_handler',
  ),
  'ssl_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$cert',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$ca',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$capath',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssl_set',
  ),
  'stat' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stat',
  ),
  'stmt_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mysqli_stmt',
    'name' => 'stmt_init',
  ),
  'store_result' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'store_result',
  ),
  'use_result' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mysqli_result',
    'name' => 'use_result',
  ),
  'mysqli_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_affected_rows',
  ),
  'mysqli_autocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_autocommit',
  ),
  'mysqli_begin_transaction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_begin_transaction',
  ),
  'mysqli_change_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_change_user',
  ),
  'mysqli_character_set_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_character_set_name',
  ),
  'mysqli_get_client_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_get_client_info',
  ),
  'mysqli_get_client_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_get_client_version',
  ),
  'mysqli_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_close',
  ),
  'mysqli_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_commit',
  ),
  'mysqli_connect_errno' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'mysqli_connect_errno',
  ),
  'mysqli_connect_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'mysqli_connect_error',
  ),
  'mysqli_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'initializer' => '= ini_get("mysqli.default_host")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'initializer' => '= ini_get("mysqli.default_user")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'initializer' => '= ini_get("mysqli.default_pw")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'initializer' => '= ""',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= ini_get("mysqli.default_port")',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$socket',
        'initializer' => '= ini_get("mysqli.default_socket")',
        'required' => false,
      ),
    ),
    'type' => 'mysqli',
    'name' => 'mysqli_connect',
  ),
  'mysqli_debug' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_debug',
  ),
  'mysqli_dump_debug_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_dump_debug_info',
  ),
  'mysqli_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_errno',
  ),
  'mysqli_error_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqli_error_list',
  ),
  'mysqli_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_error',
  ),
  'mysqli_field_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_field_count',
  ),
  'mysqli_get_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'mysqli_get_charset',
  ),
  'mysqli_get_client_stats' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqli_get_client_stats',
  ),
  'mysqli_get_connection_stats' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqli_get_connection_stats',
  ),
  'mysqli_get_host_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_get_host_info',
  ),
  'mysqli_get_proto_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_get_proto_info',
  ),
  'mysqli_get_server_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_get_server_info',
  ),
  'mysqli_get_server_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_get_server_version',
  ),
  'mysqli_get_warnings' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'mysqli_warning',
    'name' => 'mysqli_get_warnings',
  ),
  'mysqli_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_info',
  ),
  'mysqli_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mysqli',
    'name' => 'mysqli_init',
  ),
  'mysqli_insert_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysqli_insert_id',
  ),
  'mysqli_kill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$processid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_kill',
  ),
  'mysqli_more_results' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_more_results',
  ),
  'mysqli_multi_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_multi_query',
  ),
  'mysqli_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_next_result',
  ),
  'mysqli_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_options',
  ),
  'mysqli_ping' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_ping',
  ),
  'mysqli_poll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$read',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$error',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$reject',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$sec',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$usec',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_poll',
  ),
  'mysqli_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'mysqli_stmt',
    'name' => 'mysqli_prepare',
  ),
  'mysqli_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$resultmode',
        'initializer' => '= MYSQLI_STORE_RESULT',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysqli_query',
  ),
  'mysqli_real_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$socket',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_real_connect',
  ),
  'mysqli_real_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$escapestr',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_real_escape_string',
  ),
  'mysqli_real_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_real_query',
  ),
  'mysqli_reap_async_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysql',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'mysqli_result',
    'name' => 'mysqli_reap_async_query',
  ),
  'mysqli_refresh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_refresh',
  ),
  'mysqli_release_savepoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_release_savepoint',
  ),
  'mysqli_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_rollback',
  ),
  'mysqli_rpl_query_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_rpl_query_type',
  ),
  'mysqli_savepoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_savepoint',
  ),
  'mysqli_select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_select_db',
  ),
  'mysqli_send_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_send_query',
  ),
  'mysqli_set_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_set_charset',
  ),
  'mysqli_set_local_infile_default' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mysqli_set_local_infile_default',
  ),
  'mysqli_set_local_infile_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$read_func',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_set_local_infile_handler',
  ),
  'mysqli_sqlstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_sqlstate',
  ),
  'mysqli_ssl_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$cert',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$ca',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$capath',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_ssl_set',
  ),
  'mysqli_stat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_stat',
  ),
  'mysqli_stmt_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'mysqli_stmt',
    'name' => 'mysqli_stmt_init',
  ),
  'mysqli_store_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => false,
      ),
    ),
    'type' => 'mysqli_result',
    'name' => 'mysqli_store_result',
  ),
  'mysqli_thread_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_thread_id',
  ),
  'mysqli_thread_safe' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'mysqli_thread_safe',
  ),
  'mysqli_use_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'mysqli_result',
    'name' => 'mysqli_use_result',
  ),
  'mysqli_warning_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_warning_count',
  ),
  'attr_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'attr_get',
  ),
  'attr_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'attr_set',
  ),
  'bind_param' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$var1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'bind_param',
  ),
  'bind_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '&$var1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'bind_result',
  ),
  'data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'data_seek',
  ),
  'free_result' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'free_result',
  ),
  'get_result' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mysqli_result',
    'name' => 'get_result',
  ),
  'result_metadata' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mysqli_result',
    'name' => 'result_metadata',
  ),
  'send_long_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$param_nr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'send_long_data',
  ),
  'mysqli_stmt_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_stmt_affected_rows',
  ),
  'mysqli_stmt_attr_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_stmt_attr_get',
  ),
  'mysqli_stmt_attr_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_attr_set',
  ),
  'mysqli_stmt_bind_param' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$var1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_bind_param',
  ),
  'mysqli_stmt_bind_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$var1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_bind_result',
  ),
  'mysqli_stmt_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_close',
  ),
  'mysqli_stmt_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mysqli_stmt_data_seek',
  ),
  'mysqli_stmt_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_stmt_errno',
  ),
  'mysqli_stmt_error_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqli_stmt_error_list',
  ),
  'mysqli_stmt_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_stmt_error',
  ),
  'mysqli_stmt_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_execute',
  ),
  'mysqli_stmt_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_fetch',
  ),
  'mysqli_stmt_field_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_stmt_field_count',
  ),
  'mysqli_stmt_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mysqli_stmt_free_result',
  ),
  'mysqli_stmt_get_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'mysqli_result',
    'name' => 'mysqli_stmt_get_result',
  ),
  'mysqli_stmt_get_warnings' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'mysqli_stmt_get_warnings',
  ),
  'mysqli_stmt_insert_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysqli_stmt_insert_id',
  ),
  'mysqli_stmt_more_results' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysql_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_more_results',
  ),
  'mysqli_stmt_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysql_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_next_result',
  ),
  'mysqli_stmt_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_stmt_num_rows',
  ),
  'mysqli_stmt_param_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_stmt_param_count',
  ),
  'mysqli_stmt_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_prepare',
  ),
  'mysqli_stmt_reset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_reset',
  ),
  'mysqli_stmt_result_metadata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'mysqli_result',
    'name' => 'mysqli_stmt_result_metadata',
  ),
  'mysqli_stmt_send_long_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$param_nr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_send_long_data',
  ),
  'mysqli_stmt_sqlstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqli_stmt_sqlstate',
  ),
  'mysqli_stmt_store_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_stmt',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_stmt_store_result',
  ),
  'fetch_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$resulttype',
        'initializer' => '= MYSQLI_NUM',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'fetch_all',
  ),
  'fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$resulttype',
        'initializer' => '= MYSQLI_BOTH',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'fetch_array',
  ),
  'fetch_assoc' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'fetch_assoc',
  ),
  'fetch_field_direct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fieldnr',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'fetch_field_direct',
  ),
  'fetch_field' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'fetch_field',
  ),
  'fetch_fields' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'fetch_fields',
  ),
  'fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "stdClass"',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'fetch_object',
  ),
  'fetch_row' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mixed',
    'name' => 'fetch_row',
  ),
  'field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fieldnr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'field_seek',
  ),
  'free' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'free',
  ),
  'mysqli_field_tell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_field_tell',
  ),
  'mysqli_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_data_seek',
  ),
  'mysqli_fetch_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$resulttype',
        'initializer' => '= MYSQLI_NUM',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysqli_fetch_all',
  ),
  'mysqli_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$resulttype',
        'initializer' => '= MYSQLI_BOTH',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysqli_fetch_array',
  ),
  'mysqli_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqli_fetch_assoc',
  ),
  'mysqli_fetch_field_direct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fieldnr',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'mysqli_fetch_field_direct',
  ),
  'mysqli_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'mysqli_fetch_field',
  ),
  'mysqli_fetch_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqli_fetch_fields',
  ),
  'mysqli_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "stdClass"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'mysqli_fetch_object',
  ),
  'mysqli_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysqli_fetch_row',
  ),
  'mysqli_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_num_fields',
  ),
  'mysqli_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fieldnr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_field_seek',
  ),
  'mysqli_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mysqli_free_result',
  ),
  'mysqli_fetch_lengths' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqli_fetch_lengths',
  ),
  'mysqli_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli_result',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_num_rows',
  ),
  'embedded_server_end' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'embedded_server_end',
  ),
  'embedded_server_start' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$start',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arguments',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$groups',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'embedded_server_start',
  ),
  'mysqli_embedded_server_end' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'mysqli_embedded_server_end',
  ),
  'mysqli_embedded_server_start' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$start',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arguments',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$groups',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_embedded_server_start',
  ),
  'mysqli_report' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_report',
  ),
  'mysqli_disable_reads_from_master' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_disable_reads_from_master',
  ),
  'mysqli_disable_rpl_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_disable_rpl_parse',
  ),
  'mysqli_enable_reads_from_master' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_enable_reads_from_master',
  ),
  'mysqli_enable_rpl_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_enable_rpl_parse',
  ),
  'mysqli_get_cache_stats' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqli_get_cache_stats',
  ),
  'mysqli_get_links_stats' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqli_get_links_stats',
  ),
  'mysqli_master_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_master_query',
  ),
  'mysqli_rpl_parse_enabled' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqli_rpl_parse_enabled',
  ),
  'mysqli_rpl_probe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_rpl_probe',
  ),
  'mysqli_slave_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqli_slave_query',
  ),
  'mysqlnd_ms_dump_servers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqlnd_ms_dump_servers',
  ),
  'mysqlnd_ms_fabric_select_global' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$table_name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqlnd_ms_fabric_select_global',
  ),
  'mysqlnd_ms_fabric_select_shard' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$shard_key',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqlnd_ms_fabric_select_shard',
  ),
  'mysqlnd_ms_get_last_gtid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mysqlnd_ms_get_last_gtid',
  ),
  'mysqlnd_ms_get_last_used_connection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqlnd_ms_get_last_used_connection',
  ),
  'mysqlnd_ms_get_stats' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqlnd_ms_get_stats',
  ),
  'mysqlnd_ms_match_wild' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$wildcard',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_ms_match_wild',
  ),
  'mysqlnd_ms_query_is_select' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqlnd_ms_query_is_select',
  ),
  'mysqlnd_ms_set_qos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$service_level',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$service_level_option',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$option_value',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_ms_set_qos',
  ),
  'mysqlnd_ms_set_user_pick_server' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_ms_set_user_pick_server',
  ),
  'mysqlnd_ms_xa_begin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$gtrid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqlnd_ms_xa_begin',
  ),
  'mysqlnd_ms_xa_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$gtrid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqlnd_ms_xa_commit',
  ),
  'mysqlnd_ms_xa_gc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$gtrid',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'boolean',
        'name' => '$ignore_max_retries',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqlnd_ms_xa_gc',
  ),
  'mysqlnd_ms_xa_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$gtrid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mysqlnd_ms_xa_rollback',
  ),
  'mysqlnd_qc_clear_cache' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_qc_clear_cache',
  ),
  'mysqlnd_qc_get_available_handlers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqlnd_qc_get_available_handlers',
  ),
  'mysqlnd_qc_get_cache_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqlnd_qc_get_cache_info',
  ),
  'mysqlnd_qc_get_core_stats' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqlnd_qc_get_core_stats',
  ),
  'mysqlnd_qc_get_normalized_query_trace_log' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqlnd_qc_get_normalized_query_trace_log',
  ),
  'mysqlnd_qc_get_query_trace_log' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mysqlnd_qc_get_query_trace_log',
  ),
  'mysqlnd_qc_set_cache_condition' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$condition_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$condition',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$condition_option',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_qc_set_cache_condition',
  ),
  'mysqlnd_qc_set_is_select' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mysqlnd_qc_set_is_select',
  ),
  'mysqlnd_qc_set_storage_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_qc_set_storage_handler',
  ),
  'mysqlnd_qc_set_user_handlers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$get_hash',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$find_query_in_cache',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$return_to_cache',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$add_query_to_cache_if_not_exists',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$query_is_select',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$update_query_run_time_stats',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$get_stats',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$clear_cache',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_qc_set_user_handlers',
  ),
  'changeUser' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$silent',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$passwd_len',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'changeUser',
  ),
  'charsetName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'charsetName',
  ),
  'endPSession' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'endPSession',
  ),
  'escapeString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'escapeString',
  ),
  'getAffectedRows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getAffectedRows',
  ),
  'getErrorNumber' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getErrorNumber',
  ),
  'getErrorString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getErrorString',
  ),
  'getFieldCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFieldCount',
  ),
  'getHostInformation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHostInformation',
  ),
  'getLastInsertId' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getLastInsertId',
  ),
  'getLastMessage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getLastMessage',
  ),
  'getProtocolInformation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getProtocolInformation',
  ),
  'getServerInformation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getServerInformation',
  ),
  'getServerStatistics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getServerStatistics',
  ),
  'getServerVersion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getServerVersion',
  ),
  'getSqlstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSqlstate',
  ),
  'getStatistics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getStatistics',
  ),
  'getThreadId' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getThreadId',
  ),
  'getWarningCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getWarningCount',
  ),
  'killConnection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'killConnection',
  ),
  'listFields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$achtung_wild',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'listFields',
  ),
  'listMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$achtung_wild',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$par1',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'listMethod',
  ),
  'moreResults' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'moreResults',
  ),
  'nextResult' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'nextResult',
  ),
  'queryReadResultsetHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mysqlnd_statement',
        'name' => '$mysqlnd_stmt',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'queryReadResultsetHeader',
  ),
  'reapQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'reapQuery',
  ),
  'refreshServer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'refreshServer',
  ),
  'restartPSession' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'restartPSession',
  ),
  'selectDb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$database',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'selectDb',
  ),
  'sendClose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sendClose',
  ),
  'sendQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sendQuery',
  ),
  'serverDumpDebugInformation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'serverDumpDebugInformation',
  ),
  'setAutocommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setAutocommit',
  ),
  'setCharset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setCharset',
  ),
  'setClientOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setClientOption',
  ),
  'setServerOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setServerOption',
  ),
  'shutdownServer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$MYSQLND_UH_RES_MYSQLND_NAME',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$"level"',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'shutdownServer',
  ),
  'simpleCommand' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$command',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$arg',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$ok_packet',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$silent',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$ignore_upsert_status',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'simpleCommand',
  ),
  'simpleCommandHandleResponse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$ok_packet',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$silent',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$command',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$ignore_upsert_status',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'simpleCommandHandleResponse',
  ),
  'sslSet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$cert',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$ca',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$capath',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$cipher',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sslSet',
  ),
  'stmtInit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'resource',
    'name' => 'stmtInit',
  ),
  'storeResult' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'resource',
    'name' => 'storeResult',
  ),
  'txCommit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'txCommit',
  ),
  'txRollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'txRollback',
  ),
  'useResult' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqlnd_connection',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'resource',
    'name' => 'useResult',
  ),
  'mysqlnd_uh_convert_to_mysqlnd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mysqli',
        'name' => '&$mysql_connection',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'mysqlnd_uh_convert_to_mysqlnd',
  ),
  'mysqlnd_uh_set_connection_proxy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MysqlndUhConnection',
        'name' => '&$connection_proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mysqli',
        'name' => '&$mysqli_connection',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_uh_set_connection_proxy',
  ),
  'mysqlnd_uh_set_statement_proxy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MysqlndUhStatement',
        'name' => '&$statement_proxy',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_uh_set_statement_proxy',
  ),
  'mysqlnd_memcache_get_config' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mysqlnd_memcache_get_config',
  ),
  'mysqlnd_memcache_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$mysql_connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Memcached',
        'name' => '$memcache_connection',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callback',
        'name' => '$callback',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mysqlnd_memcache_set',
  ),
  'oci_bind_array_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$var_array',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$max_table_length',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$max_item_length',
        'initializer' => '= -1',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= SQLT_AFC',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_bind_array_by_name',
  ),
  'oci_bind_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$bv_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$variable',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$maxlength',
        'initializer' => '= -1',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= SQLT_CHR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_bind_by_name',
  ),
  'oci_cancel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_cancel',
  ),
  'oci_client_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'oci_client_version',
  ),
  'oci_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_close',
  ),
  'oci_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_commit',
  ),
  'oci_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$connection_string',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$character_set',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$session_mode',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'oci_connect',
  ),
  'oci_define_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$column_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$variable',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= SQLT_CHR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_define_by_name',
  ),
  'oci_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$resource',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'oci_error',
  ),
  'oci_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= OCI_COMMIT_ON_SUCCESS',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_execute',
  ),
  'oci_fetch_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$output',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$skip',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$maxrows',
        'initializer' => '= -1',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'oci_fetch_all',
  ),
  'oci_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'oci_fetch_array',
  ),
  'oci_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'oci_fetch_assoc',
  ),
  'oci_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'oci_fetch_object',
  ),
  'oci_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'oci_fetch_row',
  ),
  'oci_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_fetch',
  ),
  'oci_field_is_null' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_field_is_null',
  ),
  'oci_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'oci_field_name',
  ),
  'oci_field_precision' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'oci_field_precision',
  ),
  'oci_field_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'oci_field_scale',
  ),
  'oci_field_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'oci_field_size',
  ),
  'oci_field_type_raw' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'oci_field_type_raw',
  ),
  'oci_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'oci_field_type',
  ),
  'oci_free_descriptor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$descriptor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_free_descriptor',
  ),
  'oci_free_statement' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_free_statement',
  ),
  'oci_get_implicit_resultset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'oci_get_implicit_resultset',
  ),
  'oci_internal_debug' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$onoff',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'oci_internal_debug',
  ),
  'oci_lob_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'OCI-Lob',
        'name' => '$lob_to',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'OCI-Lob',
        'name' => '$lob_from',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_lob_copy',
  ),
  'oci_lob_is_equal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'OCI-Lob',
        'name' => '$lob1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'OCI-Lob',
        'name' => '$lob2',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_lob_is_equal',
  ),
  'oci_new_collection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tdo',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'OCI-Collection',
    'name' => 'oci_new_collection',
  ),
  'oci_new_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$connection_string',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$character_set',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$session_mode',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'oci_new_connect',
  ),
  'oci_new_cursor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'oci_new_cursor',
  ),
  'oci_new_descriptor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= OCI_DTYPE_LOB',
        'required' => false,
      ),
    ),
    'type' => 'OCI-Lob',
    'name' => 'oci_new_descriptor',
  ),
  'oci_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'oci_num_fields',
  ),
  'oci_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'oci_num_rows',
  ),
  'oci_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sql_text',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'oci_parse',
  ),
  'oci_password_change' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dbname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$old_password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$new_password',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'oci_password_change',
  ),
  'oci_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$connection_string',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$character_set',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$session_mode',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'oci_pconnect',
  ),
  'oci_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'oci_result',
  ),
  'oci_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_rollback',
  ),
  'oci_server_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'oci_server_version',
  ),
  'oci_set_action' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$action_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_set_action',
  ),
  'oci_set_client_identifier' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$client_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_set_client_identifier',
  ),
  'oci_set_client_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$client_info',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_set_client_info',
  ),
  'oci_set_edition' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$edition',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_set_edition',
  ),
  'oci_set_module_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$module_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_set_module_name',
  ),
  'oci_set_prefetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oci_set_prefetch',
  ),
  'oci_statement_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$statement',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'oci_statement_type',
  ),
  'append' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'append',
  ),
  'assign' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'assign',
  ),
  'assignElem' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'assignElem',
  ),
  'getElem' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'getElem',
  ),
  'max' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'max',
  ),
  'size' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'size',
  ),
  'trim' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$character_mask',
        'initializer' => '= " \\t\\n\\r\\0\\x0B"',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'trim',
  ),
  'eof' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'eof',
  ),
  'erase' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'erase',
  ),
  'export' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'export',
  ),
  'getBuffering' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'getBuffering',
  ),
  'import' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'import',
  ),
  'load' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'load',
  ),
  'read' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'read',
  ),
  'seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$line_pos',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'seek',
  ),
  'setBuffering' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$on_off',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setBuffering',
  ),
  'tell' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'tell',
  ),
  'truncate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'truncate',
  ),
  'writeTemporary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$lob_type',
        'initializer' => '= OCI_TEMP_CLOB',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'writeTemporary',
  ),
  'px_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_close',
  ),
  'px_create_fp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$fielddesc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_create_fp',
  ),
  'px_date2string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'px_date2string',
  ),
  'px_delete_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_delete_record',
  ),
  'px_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_delete',
  ),
  'px_get_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fieldno',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'px_get_field',
  ),
  'px_get_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'px_get_info',
  ),
  'px_get_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'px_get_parameter',
  ),
  'px_get_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'px_get_record',
  ),
  'px_get_schema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'px_get_schema',
  ),
  'px_get_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'px_get_value',
  ),
  'px_insert_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'px_insert_record',
  ),
  'px_new' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'px_new',
  ),
  'px_numfields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'px_numfields',
  ),
  'px_numrecords' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'px_numrecords',
  ),
  'px_open_fp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_open_fp',
  ),
  'px_put_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$record',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$recpos',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_put_record',
  ),
  'px_retrieve_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'px_retrieve_record',
  ),
  'px_set_blob_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_set_blob_file',
  ),
  'px_set_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_set_parameter',
  ),
  'px_set_tablename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'px_set_tablename',
  ),
  'px_set_targetencoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_set_targetencoding',
  ),
  'px_set_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_set_value',
  ),
  'px_timestamp2string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'px_timestamp2string',
  ),
  'px_update_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pxdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'px_update_record',
  ),
  'pg_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_affected_rows',
  ),
  'pg_cancel_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_cancel_query',
  ),
  'pg_client_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_client_encoding',
  ),
  'pg_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_close',
  ),
  'pg_connect_poll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_connect_poll',
  ),
  'pg_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$connection_string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$connect_type',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_connect',
  ),
  'pg_connection_busy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_connection_busy',
  ),
  'pg_connection_reset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_connection_reset',
  ),
  'pg_connection_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_connection_status',
  ),
  'pg_consume_input' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_consume_input',
  ),
  'pg_convert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$assoc_array',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_convert',
  ),
  'pg_copy_from' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$rows',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$null_as',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_copy_from',
  ),
  'pg_copy_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$null_as',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_copy_to',
  ),
  'pg_dbname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_dbname',
  ),
  'pg_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$assoc_array',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= PGSQL_DML_EXEC',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pg_delete',
  ),
  'pg_end_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_end_copy',
  ),
  'pg_escape_bytea' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_escape_bytea',
  ),
  'pg_escape_identifier' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_escape_identifier',
  ),
  'pg_escape_literal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_escape_literal',
  ),
  'pg_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_escape_string',
  ),
  'pg_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$stmtname',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_execute',
  ),
  'pg_fetch_all_columns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$column',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_fetch_all_columns',
  ),
  'pg_fetch_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_fetch_all',
  ),
  'pg_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= PGSQL_BOTH',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_fetch_array',
  ),
  'pg_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_fetch_assoc',
  ),
  'pg_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'pg_fetch_object',
  ),
  'pg_fetch_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_fetch_result',
  ),
  'pg_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_fetch_row',
  ),
  'pg_field_is_null' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_field_is_null',
  ),
  'pg_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_field_name',
  ),
  'pg_field_num' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_field_num',
  ),
  'pg_field_prtlen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$field_name_or_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_field_prtlen',
  ),
  'pg_field_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_field_size',
  ),
  'pg_field_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$oid_only',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pg_field_table',
  ),
  'pg_field_type_oid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_field_type_oid',
  ),
  'pg_field_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_field_type',
  ),
  'pg_flush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pg_flush',
  ),
  'pg_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_free_result',
  ),
  'pg_get_notify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_get_notify',
  ),
  'pg_get_pid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_get_pid',
  ),
  'pg_get_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_get_result',
  ),
  'pg_host' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_host',
  ),
  'pg_insert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$assoc_array',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= PGSQL_DML_EXEC',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pg_insert',
  ),
  'pg_last_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_last_error',
  ),
  'pg_last_notice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_last_notice',
  ),
  'pg_last_oid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_last_oid',
  ),
  'pg_lo_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$large_object',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_lo_close',
  ),
  'pg_lo_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$object_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_lo_create',
  ),
  'pg_lo_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$oid',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_lo_export',
  ),
  'pg_lo_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$object_id',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_lo_import',
  ),
  'pg_lo_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$oid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_lo_open',
  ),
  'pg_lo_read_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$large_object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_lo_read_all',
  ),
  'pg_lo_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$large_object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'initializer' => '= 8192',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_lo_read',
  ),
  'pg_lo_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$large_object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$whence',
        'initializer' => '= PGSQL_SEEK_CUR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_lo_seek',
  ),
  'pg_lo_tell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$large_object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_lo_tell',
  ),
  'pg_lo_truncate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$large_object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_lo_truncate',
  ),
  'pg_lo_unlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$oid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_lo_unlink',
  ),
  'pg_lo_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$large_object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_lo_write',
  ),
  'pg_meta_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$extended',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_meta_data',
  ),
  'pg_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_num_fields',
  ),
  'pg_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_num_rows',
  ),
  'pg_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_options',
  ),
  'pg_parameter_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$param_name',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_parameter_status',
  ),
  'pg_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$connection_string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$connect_type',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_pconnect',
  ),
  'pg_ping' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_ping',
  ),
  'pg_port' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_port',
  ),
  'pg_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$stmtname',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_prepare',
  ),
  'pg_put_line' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_put_line',
  ),
  'pg_query_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_query_params',
  ),
  'pg_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_query',
  ),
  'pg_result_error_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fieldcode',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_result_error_field',
  ),
  'pg_result_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_result_error',
  ),
  'pg_result_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_result_seek',
  ),
  'pg_result_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= PGSQL_STATUS_LONG',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pg_result_status',
  ),
  'pg_select' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$assoc_array',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= PGSQL_DML_EXEC',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pg_select',
  ),
  'pg_send_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$stmtname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_send_execute',
  ),
  'pg_send_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$stmtname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_send_prepare',
  ),
  'pg_send_query_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_send_query_params',
  ),
  'pg_send_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_send_query',
  ),
  'pg_set_client_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_set_client_encoding',
  ),
  'pg_set_error_verbosity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$verbosity',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_set_error_verbosity',
  ),
  'pg_socket' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'pg_socket',
  ),
  'pg_trace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'initializer' => '= "w"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_trace',
  ),
  'pg_transaction_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pg_transaction_status',
  ),
  'pg_tty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_tty',
  ),
  'pg_unescape_bytea' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pg_unescape_bytea',
  ),
  'pg_untrace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pg_untrace',
  ),
  'pg_update' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$condition',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= PGSQL_DML_EXEC',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pg_update',
  ),
  'pg_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'pg_version',
  ),
  'sqlite_array_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= SQLITE_BOTH',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlite_array_query',
  ),
  'sqlite_busy_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$milliseconds',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'sqlite_busy_timeout',
  ),
  'sqlite_changes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sqlite_changes',
  ),
  'sqlite_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'sqlite_close',
  ),
  'sqlite_column' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$index_or_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlite_column',
  ),
  'sqlite_create_aggregate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$step_func',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$finalize_func',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$num_args',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'sqlite_create_aggregate',
  ),
  'sqlite_create_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$num_args',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'sqlite_create_function',
  ),
  'sqlite_current' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= SQLITE_BOTH',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlite_current',
  ),
  'sqlite_error_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$error_code',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'sqlite_error_string',
  ),
  'sqlite_escape_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$item',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'sqlite_escape_string',
  ),
  'sqlite_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_exec',
  ),
  'sqlite_factory' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0666',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$error_message',
        'required' => false,
      ),
    ),
    'type' => 'SQLiteDatabase',
    'name' => 'sqlite_factory',
  ),
  'sqlite_fetch_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= SQLITE_BOTH',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlite_fetch_all',
  ),
  'sqlite_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= SQLITE_BOTH',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlite_fetch_array',
  ),
  'sqlite_fetch_column_types' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$table_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= SQLITE_ASSOC',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlite_fetch_column_types',
  ),
  'sqlite_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$ctor_params',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'sqlite_fetch_object',
  ),
  'sqlite_fetch_single' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'sqlite_fetch_single',
  ),
  'sqlite_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_index',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'sqlite_field_name',
  ),
  'sqlite_has_more' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_has_more',
  ),
  'sqlite_has_prev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_has_prev',
  ),
  'sqlite_last_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sqlite_last_error',
  ),
  'sqlite_last_insert_rowid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sqlite_last_insert_rowid',
  ),
  'sqlite_libencoding' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'sqlite_libencoding',
  ),
  'sqlite_libversion' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'sqlite_libversion',
  ),
  'sqlite_next' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_next',
  ),
  'sqlite_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sqlite_num_fields',
  ),
  'sqlite_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sqlite_num_rows',
  ),
  'sqlite_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0666',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$error_message',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sqlite_open',
  ),
  'sqlite_popen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0666',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$error_message',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sqlite_popen',
  ),
  'sqlite_prev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_prev',
  ),
  'sqlite_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= SQLITE_BOTH',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$error_msg',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sqlite_query',
  ),
  'sqlite_rewind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_rewind',
  ),
  'sqlite_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rownum',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_seek',
  ),
  'sqlite_single_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$db',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$first_row_only',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$decode_binary',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlite_single_query',
  ),
  'sqlite_udf_decode_binary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'sqlite_udf_decode_binary',
  ),
  'sqlite_udf_encode_binary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'sqlite_udf_encode_binary',
  ),
  'sqlite_unbuffered_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$dbhandle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$result_type',
        'initializer' => '= SQLITE_BOTH',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$error_msg',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sqlite_unbuffered_query',
  ),
  'sqlite_valid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlite_valid',
  ),
  'busyTimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$msecs',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'busyTimeout',
  ),
  'changes' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'changes',
  ),
  'createAggregate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$step_callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$final_callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$argument_count',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'createAggregate',
  ),
  'createCollation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'createCollation',
  ),
  'createFunction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$argument_count',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'createFunction',
  ),
  'lastErrorCode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'lastErrorCode',
  ),
  'lastErrorMsg' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'lastErrorMsg',
  ),
  'lastInsertRowID' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'lastInsertRowID',
  ),
  'loadExtension' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$shared_library',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'loadExtension',
  ),
  'querySingle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$entire_row',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'querySingle',
  ),
  'version' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'version',
  ),
  'clear' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'clear',
  ),
  'paramCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'paramCount',
  ),
  'columnName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$column_number',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'columnName',
  ),
  'columnType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$column_number',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'columnType',
  ),
  'fetchArray' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= SQLITE3_BOTH',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'fetchArray',
  ),
  'finalize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'finalize',
  ),
  'numColumns' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'numColumns',
  ),
  'sqlsrv_begin_transaction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_begin_transaction',
  ),
  'sqlsrv_cancel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_cancel',
  ),
  'sqlsrv_client_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlsrv_client_info',
  ),
  'sqlsrv_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_close',
  ),
  'sqlsrv_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_commit',
  ),
  'sqlsrv_configure' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_configure',
  ),
  'sqlsrv_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$serverName',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$connectionInfo',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sqlsrv_connect',
  ),
  'sqlsrv_errors' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errorsOrWarnings',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_errors',
  ),
  'sqlsrv_execute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_execute',
  ),
  'sqlsrv_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fetchType',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlsrv_fetch_array',
  ),
  'sqlsrv_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$className',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$ctorParams',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_fetch_object',
  ),
  'sqlsrv_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_fetch',
  ),
  'sqlsrv_field_metadata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_field_metadata',
  ),
  'sqlsrv_free_stmt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_free_stmt',
  ),
  'sqlsrv_get_config' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_get_config',
  ),
  'sqlsrv_get_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fieldIndex',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$getAsType',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_get_field',
  ),
  'sqlsrv_has_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_has_rows',
  ),
  'sqlsrv_next_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_next_result',
  ),
  'sqlsrv_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_num_fields',
  ),
  'sqlsrv_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_num_rows',
  ),
  'sqlsrv_prepare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sql',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_prepare',
  ),
  'sqlsrv_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sql',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sqlsrv_query',
  ),
  'sqlsrv_rollback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_rollback',
  ),
  'sqlsrv_rows_affected' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sqlsrv_rows_affected',
  ),
  'sqlsrv_send_stream_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sqlsrv_send_stream_data',
  ),
  'sqlsrv_server_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$conn',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'sqlsrv_server_info',
  ),
  'sybase_affected_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'sybase_affected_rows',
  ),
  'sybase_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'sybase_close',
  ),
  'sybase_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servername',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$appname',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$new',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sybase_connect',
  ),
  'sybase_data_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sybase_data_seek',
  ),
  'sybase_deadlock_retry_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$retry_count',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'sybase_deadlock_retry_count',
  ),
  'sybase_fetch_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'sybase_fetch_array',
  ),
  'sybase_fetch_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'sybase_fetch_assoc',
  ),
  'sybase_fetch_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'sybase_fetch_field',
  ),
  'sybase_fetch_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$object',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'sybase_fetch_object',
  ),
  'sybase_fetch_row' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'sybase_fetch_row',
  ),
  'sybase_field_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field_offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sybase_field_seek',
  ),
  'sybase_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sybase_free_result',
  ),
  'sybase_get_last_message' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'sybase_get_last_message',
  ),
  'sybase_min_client_severity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$severity',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'sybase_min_client_severity',
  ),
  'sybase_min_error_severity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$severity',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'sybase_min_error_severity',
  ),
  'sybase_min_message_severity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$severity',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'sybase_min_message_severity',
  ),
  'sybase_min_server_severity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$severity',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'sybase_min_server_severity',
  ),
  'sybase_num_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sybase_num_fields',
  ),
  'sybase_num_rows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sybase_num_rows',
  ),
  'sybase_pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servername',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$appname',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sybase_pconnect',
  ),
  'sybase_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sybase_query',
  ),
  'sybase_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'sybase_result',
  ),
  'sybase_select_db' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$database_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'sybase_select_db',
  ),
  'sybase_set_message_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'sybase_set_message_handler',
  ),
  'sybase_unbuffered_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$store_result',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sybase_unbuffered_query',
  ),
  'connectUri' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'TokyoTyrant',
    'name' => 'connectUri',
  ),
  'ext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'ext',
  ),
  'fwmKeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max_recs',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'fwmKeys',
  ),
  'num' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'num',
  ),
  'out' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'TokyoTyrantQuery',
    'name' => 'out',
  ),
  'putCat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$columns',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'putCat',
  ),
  'putKeep' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$columns',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'putKeep',
  ),
  'putNr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'putNr',
  ),
  'putShl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'putShl',
  ),
  'restore' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'restore',
  ),
  'setMaster' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$check_consistency',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setMaster',
  ),
  'sync' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'sync',
  ),
  'tune' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= TokyoTyrant::RDBT_RECON',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'TokyoTyrant',
    'name' => 'tune',
  ),
  'vanish' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'vanish',
  ),
  'genUid' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'genUid',
  ),
  'getQuery' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getQuery',
  ),
  'setIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$column',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setIndex',
  ),
  'addCond' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$op',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$expr',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'addCond',
  ),
  'metaSearch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$queries',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'metaSearch',
  ),
  'search' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$what',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$end',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'search',
  ),
  'setLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$max',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$skip',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setLimit',
  ),
  'setOrder' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setOrder',
  ),
  'cal_days_in_month' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$calendar',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cal_days_in_month',
  ),
  'cal_from_jd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$jd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$calendar',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cal_from_jd',
  ),
  'cal_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$calendar',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'cal_info',
  ),
  'cal_to_jd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$calendar',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cal_to_jd',
  ),
  'easter_date' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'initializer' => '= date("Y")',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'easter_date',
  ),
  'easter_days' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'initializer' => '= date("Y")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'initializer' => '= CAL_EASTER_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'easter_days',
  ),
  'frenchtojd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'frenchtojd',
  ),
  'gregoriantojd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gregoriantojd',
  ),
  'jddayofweek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$julianday',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= CAL_DOW_DAYNO',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'jddayofweek',
  ),
  'jdmonthname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$julianday',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'jdmonthname',
  ),
  'jdtofrench' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$juliandaycount',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'jdtofrench',
  ),
  'jdtogregorian' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$julianday',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'jdtogregorian',
  ),
  'jdtojewish' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$juliandaycount',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$hebrew',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$fl',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'jdtojewish',
  ),
  'jdtojulian' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$julianday',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'jdtojulian',
  ),
  'jdtounix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$jday',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'jdtounix',
  ),
  'jewishtojd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'jewishtojd',
  ),
  'juliantojd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'juliantojd',
  ),
  'unixtojd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'unixtojd',
  ),
  'createFromFormat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$time',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$timezone',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => 'createFromFormat',
  ),
  'getLastErrors' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getLastErrors',
  ),
  'modify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$modify',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => 'modify',
  ),
  'setDate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => 'setDate',
  ),
  'setISODate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$week',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'initializer' => '= 1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => 'setISODate',
  ),
  'setTime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$date',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setTime',
  ),
  'setTimestamp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$timestamp',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setTimestamp',
  ),
  'setTimezone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$timezone',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => 'setTimezone',
  ),
  'sub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateInterval',
        'name' => '$interval',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => 'sub',
  ),
  'diff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$from',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$to',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'diff',
  ),
  'format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'format',
  ),
  'getOffset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$date',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$local',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '&$rawOffset',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '&$dstOffset',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getOffset',
  ),
  'getTimezone' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'DateTimeZone',
    'name' => 'getTimezone',
  ),
  'date_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DateInterval',
        'name' => '$interval',
        'required' => true,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_add',
  ),
  'date_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$time',
        'initializer' => '= "now"',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$timezone',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_create',
  ),
  'date_create_from_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$time',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$timezone',
        'required' => false,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_create_from_format',
  ),
  'date_get_last_errors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'date_get_last_errors',
  ),
  'date_modify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$modify',
        'required' => true,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_modify',
  ),
  'date_date_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_date_set',
  ),
  'date_isodate_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$week',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'initializer' => '= 1',
        'required' => false,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_isodate_set',
  ),
  'date_time_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$hour',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$minute',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$second',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_time_set',
  ),
  'date_timestamp_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$unixtimestamp',
        'required' => true,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_timestamp_set',
  ),
  'date_timezone_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$timezone',
        'required' => true,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_timezone_set',
  ),
  'date_sub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DateInterval',
        'name' => '$interval',
        'required' => true,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'date_sub',
  ),
  'createFromMutable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTime',
        'name' => '$datetime',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateTimeImmutable',
    'name' => 'createFromMutable',
  ),
  'date_create_immutable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$time',
        'initializer' => '= "now"',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$timezone',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'DateTimeImmutable',
    'name' => 'date_create_immutable',
  ),
  'date_create_immutable_from_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$time',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$timezone',
        'required' => false,
      ),
    ),
    'type' => 'DateTimeImmutable',
    'name' => 'date_create_immutable_from_format',
  ),
  'date_diff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeInterface',
        'name' => '$datetime1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DateTimeInterface',
        'name' => '$datetime2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$absolute',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'DateInterval',
    'name' => 'date_diff',
  ),
  'date_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeInterface',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'date_format',
  ),
  'date_offset_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeInterface',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'date_offset_get',
  ),
  'date_timestamp_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeInterface',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'date_timestamp_get',
  ),
  'date_timezone_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeInterface',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'DateTimeZone',
    'name' => 'date_timezone_get',
  ),
  'getLocation' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getLocation',
  ),
  'getTransitions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp_begin',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timestamp_end',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getTransitions',
  ),
  'listAbbreviations' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'listAbbreviations',
  ),
  'listIdentifiers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$what',
        'initializer' => '= DateTimeZone::ALL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$country',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'listIdentifiers',
  ),
  'timezone_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$timezone',
        'required' => true,
      ),
    ),
    'type' => 'DateTimeZone',
    'name' => 'timezone_open',
  ),
  'timezone_location_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'timezone_location_get',
  ),
  'timezone_name_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'timezone_name_get',
  ),
  'timezone_offset_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DateTime',
        'name' => '$datetime',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'timezone_offset_get',
  ),
  'timezone_transitions_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timestamp_begin',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timestamp_end',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'timezone_transitions_get',
  ),
  'timezone_abbreviations_list' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'timezone_abbreviations_list',
  ),
  'timezone_identifiers_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$what',
        'initializer' => '= DateTimeZone::ALL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$country',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'timezone_identifiers_list',
  ),
  'createFromDateString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$time',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DateInterval',
    'name' => 'createFromDateString',
  ),
  'checkdate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'checkdate',
  ),
  'date_default_timezone_get' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'date_default_timezone_get',
  ),
  'date_default_timezone_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$timezone_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'date_default_timezone_set',
  ),
  'date_parse_from_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$date',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'date_parse_from_format',
  ),
  'date_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$date',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'date_parse',
  ),
  'date_sun_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$time',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$latitude',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$longitude',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'date_sun_info',
  ),
  'date_sunrise' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'initializer' => '= SUNFUNCS_RET_STRING',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$latitude',
        'initializer' => '= ini_get("date.default_latitude")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$longitude',
        'initializer' => '= ini_get("date.default_longitude")',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$zenith',
        'initializer' => '= ini_get("date.sunrise_zenith")',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$gmt_offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'date_sunrise',
  ),
  'date_sunset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'initializer' => '= SUNFUNCS_RET_STRING',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$latitude',
        'initializer' => '= ini_get("date.default_latitude")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$longitude',
        'initializer' => '= ini_get("date.default_longitude")',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$zenith',
        'initializer' => '= ini_get("date.sunset_zenith")',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$gmt_offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'date_sunset',
  ),
  'date' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'date',
  ),
  'getdate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getdate',
  ),
  'gettimeofday' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$return_float',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'gettimeofday',
  ),
  'gmdate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gmdate',
  ),
  'gmmktime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$hour',
        'initializer' => '= gmdate("H")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$minute',
        'initializer' => '= gmdate("i")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$second',
        'initializer' => '= gmdate("s")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'initializer' => '= gmdate("n")',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'initializer' => '= gmdate("j")',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'initializer' => '= gmdate("Y")',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$is_dst',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'gmmktime',
  ),
  'gmstrftime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gmstrftime',
  ),
  'idate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'idate',
  ),
  'localtime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$position',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'localtime',
  ),
  'microtime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$get_as_float',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'microtime',
  ),
  'mktime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$hour',
        'initializer' => '= date("H")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$minute',
        'initializer' => '= date("i")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$second',
        'initializer' => '= date("s")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'initializer' => '= date("n")',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'initializer' => '= date("j")',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'initializer' => '= date("Y")',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$is_dst',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mktime',
  ),
  'strftime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'strftime',
  ),
  'strptime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$date',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'strptime',
  ),
  'strtotime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$time',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$now',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'strtotime',
  ),
  'time' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'double',
    'name' => 'time',
  ),
  'timezone_name_from_abbr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$abbr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$gmtOffset',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$isdst',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'timezone_name_from_abbr',
  ),
  'timezone_version_get' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'timezone_version_get',
  ),
  'getElapsedTicks' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getElapsedTicks',
  ),
  'getFrequency' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFrequency',
  ),
  'getLastElapsedTicks' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getLastElapsedTicks',
  ),
  'isRunning' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isRunning',
  ),
  'start' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'start',
  ),
  'stop' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'stop',
  ),
  'getElapsedTime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$unit',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getElapsedTime',
  ),
  'getLastElapsedTime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$unit',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getLastElapsedTime',
  ),
  'dio_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'dio_close',
  ),
  'dio_fcntl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cmd',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'dio_fcntl',
  ),
  'dio_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'dio_open',
  ),
  'dio_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'initializer' => '= 1024',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'dio_read',
  ),
  'dio_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pos',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$whence',
        'initializer' => '= SEEK_SET',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'dio_seek',
  ),
  'dio_stat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'dio_stat',
  ),
  'dio_tcsetattr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dio_tcsetattr',
  ),
  'dio_truncate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'dio_truncate',
  ),
  'dio_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'dio_write',
  ),
  'chdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'chdir',
  ),
  'chroot' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'chroot',
  ),
  'closedir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dir_handle',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'closedir',
  ),
  'dir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'Directory',
    'name' => 'dir',
  ),
  'getcwd' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getcwd',
  ),
  'opendir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'opendir',
  ),
  'readdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dir_handle',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'readdir',
  ),
  'rewinddir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dir_handle',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'rewinddir',
  ),
  'scandir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sorting_order',
        'initializer' => '= SCANDIR_SORT_ASCENDING',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'scandir',
  ),
  'finfo_buffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$finfo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'initializer' => '= NULL',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= FILEINFO_NONE',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'finfo_buffer',
  ),
  'finfo_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$finfo',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'finfo_close',
  ),
  'finfo_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$finfo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'initializer' => '= NULL',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= FILEINFO_NONE',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'finfo_file',
  ),
  'finfo_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= FILEINFO_NONE',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$magic_file',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'finfo_open',
  ),
  'finfo_set_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$finfo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'finfo_set_flags',
  ),
  'mime_content_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mime_content_type',
  ),
  'buffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'initializer' => '= NULL',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= FILEINFO_NONE',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'buffer',
  ),
  'file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'file',
  ),
  'set_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'set_flags',
  ),
  'basename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$suffix',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'basename',
  ),
  'chgrp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$group',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'chgrp',
  ),
  'chown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$user',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'chown',
  ),
  'clearstatcache' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$clear_realpath_cache',
        'initializer' => '= false',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'clearstatcache',
  ),
  'dirname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dirname',
  ),
  'disk_free_space' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'disk_free_space',
  ),
  'disk_total_space' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'disk_total_space',
  ),
  'fclose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fclose',
  ),
  'feof' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'feof',
  ),
  'fflush' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'fflush',
  ),
  'fgetc' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'fgetc',
  ),
  'fgetcsv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'initializer' => '= ","',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$enclosure',
        'initializer' => '= "\\""',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$escape',
        'initializer' => '= "\\\\"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'fgetcsv',
  ),
  'fgets' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'fgets',
  ),
  'fgetss' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$allowable_tags',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'fgetss',
  ),
  'file_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'file_exists',
  ),
  'file_get_contents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= -1',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$maxlen',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'file_get_contents',
  ),
  'file_put_contents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'file_put_contents',
  ),
  'fileatime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fileatime',
  ),
  'filectime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'filectime',
  ),
  'filegroup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'filegroup',
  ),
  'fileinode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fileinode',
  ),
  'filemtime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'filemtime',
  ),
  'fileowner' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fileowner',
  ),
  'fileperms' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fileperms',
  ),
  'filesize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'filesize',
  ),
  'filetype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'filetype',
  ),
  'flock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$operation',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$wouldblock',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'flock',
  ),
  'fnmatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fnmatch',
  ),
  'fopen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fopen',
  ),
  'fpassthru' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'fpassthru',
  ),
  'fputcsv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$fields',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'initializer' => '= ","',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$enclosure',
        'initializer' => '= \'"\'',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'fputcsv',
  ),
  'fread' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'fread',
  ),
  'fscanf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'fscanf',
  ),
  'fseek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$whence',
        'initializer' => '= SEEK_SET',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'fseek',
  ),
  'fstat' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'fstat',
  ),
  'ftell' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'ftell',
  ),
  'ftruncate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'ftruncate',
  ),
  'fwrite' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'fwrite',
  ),
  'glob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'glob',
  ),
  'is_dir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_dir',
  ),
  'is_executable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_executable',
  ),
  'is_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_file',
  ),
  'is_link' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_link',
  ),
  'is_readable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_readable',
  ),
  'is_uploaded_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_uploaded_file',
  ),
  'is_writable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_writable',
  ),
  'lchgrp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$group',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'lchgrp',
  ),
  'lchown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$user',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'lchown',
  ),
  'link' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$target',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'link',
  ),
  'linkinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'linkinfo',
  ),
  'lstat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'lstat',
  ),
  'mkdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'mkdir',
  ),
  'move_uploaded_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'move_uploaded_file',
  ),
  'parse_ini_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$process_sections',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scanner_mode',
        'initializer' => '= INI_SCANNER_NORMAL',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'parse_ini_file',
  ),
  'parse_ini_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ini',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$process_sections',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scanner_mode',
        'initializer' => '= INI_SCANNER_NORMAL',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'parse_ini_string',
  ),
  'pathinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pathinfo',
  ),
  'pclose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pclose',
  ),
  'popen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'popen',
  ),
  'readfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'readfile',
  ),
  'readlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'readlink',
  ),
  'realpath_cache_get' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'realpath_cache_get',
  ),
  'realpath_cache_size' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'realpath_cache_size',
  ),
  'realpath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'realpath',
  ),
  'rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path_from',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path_to',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'rename',
  ),
  'rmdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'rmdir',
  ),
  'symlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$target',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'symlink',
  ),
  'tempnam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dir',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'tempnam',
  ),
  'tmpfile' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'tmpfile',
  ),
  'touch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'touch',
  ),
  'umask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mask',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'umask',
  ),
  'unlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'unlink',
  ),
  'inotify_add_watch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$inotify_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mask',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'inotify_add_watch',
  ),
  'inotify_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'inotify_init',
  ),
  'inotify_queue_len' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$inotify_instance',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'inotify_queue_len',
  ),
  'inotify_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$inotify_instance',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'inotify_read',
  ),
  'inotify_rm_watch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$inotify_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$watch_descriptor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'inotify_rm_watch',
  ),
  'setproctitle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setproctitle',
  ),
  'setthreadtitle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setthreadtitle',
  ),
  'xattr_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'xattr_get',
  ),
  'xattr_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'xattr_list',
  ),
  'xattr_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xattr_remove',
  ),
  'xattr_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xattr_set',
  ),
  'xattr_supported' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xattr_supported',
  ),
  'xdiff_file_bdiff_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xdiff_file_bdiff_size',
  ),
  'xdiff_file_bdiff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xdiff_file_bdiff',
  ),
  'xdiff_file_bpatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$patch',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xdiff_file_bpatch',
  ),
  'xdiff_file_diff_binary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xdiff_file_diff_binary',
  ),
  'xdiff_file_diff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$context',
        'initializer' => '= 3',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$minimal',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xdiff_file_diff',
  ),
  'xdiff_file_merge3' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_file1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$new_file2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'xdiff_file_merge3',
  ),
  'xdiff_file_patch_binary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$patch',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xdiff_file_patch_binary',
  ),
  'xdiff_file_patch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$patch',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= DIFF_PATCH_NORMAL',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'xdiff_file_patch',
  ),
  'xdiff_file_rabdiff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xdiff_file_rabdiff',
  ),
  'xdiff_string_bdiff_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$patch',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xdiff_string_bdiff_size',
  ),
  'xdiff_string_bdiff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'xdiff_string_bdiff',
  ),
  'xdiff_string_bpatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$patch',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'xdiff_string_bpatch',
  ),
  'xdiff_string_diff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$context',
        'initializer' => '= 3',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$minimal',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'xdiff_string_diff',
  ),
  'xdiff_string_merge3' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$old_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_data1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$new_data2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$error',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'xdiff_string_merge3',
  ),
  'xdiff_string_patch_binary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$patch',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'xdiff_string_patch_binary',
  ),
  'xdiff_string_patch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$patch',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$error',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'xdiff_string_patch',
  ),
  'enchant_broker_describe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'enchant_broker_describe',
  ),
  'enchant_broker_dict_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tag',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'enchant_broker_dict_exists',
  ),
  'enchant_broker_free_dict' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'enchant_broker_free_dict',
  ),
  'enchant_broker_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'enchant_broker_free',
  ),
  'enchant_broker_get_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'enchant_broker_get_error',
  ),
  'enchant_broker_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'enchant_broker_init',
  ),
  'enchant_broker_list_dicts' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'enchant_broker_list_dicts',
  ),
  'enchant_broker_request_dict' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tag',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'enchant_broker_request_dict',
  ),
  'enchant_broker_request_pwl_dict' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'enchant_broker_request_pwl_dict',
  ),
  'enchant_broker_set_ordering' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$broker',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tag',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$ordering',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'enchant_broker_set_ordering',
  ),
  'enchant_dict_add_to_personal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'enchant_dict_add_to_personal',
  ),
  'enchant_dict_add_to_session' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'enchant_dict_add_to_session',
  ),
  'enchant_dict_check' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'enchant_dict_check',
  ),
  'enchant_dict_describe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'enchant_dict_describe',
  ),
  'enchant_dict_get_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'enchant_dict_get_error',
  ),
  'enchant_dict_is_in_session' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'enchant_dict_is_in_session',
  ),
  'enchant_dict_quick_check' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$suggestions',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'enchant_dict_quick_check',
  ),
  'enchant_dict_store_replacement' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mis',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$cor',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'enchant_dict_store_replacement',
  ),
  'enchant_dict_suggest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dict',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'enchant_dict_suggest',
  ),
  'fribidi_log2vis' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$direction',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$charset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'fribidi_log2vis',
  ),
  'country' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$country',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'country',
  ),
  'isNick' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$country',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'isNick',
  ),
  'similarNames' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$country',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'similarNames',
  ),
  'bind_textdomain_codeset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$codeset',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'bind_textdomain_codeset',
  ),
  'bindtextdomain' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'bindtextdomain',
  ),
  'dcgettext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$category',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dcgettext',
  ),
  'dcngettext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$msgid1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$msgid2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$category',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dcngettext',
  ),
  'dgettext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dgettext',
  ),
  'dngettext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$msgid1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$msgid2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dngettext',
  ),
  'gettext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gettext',
  ),
  'ngettext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$msgid1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$msgid2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ngettext',
  ),
  'textdomain' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text_domain',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'textdomain',
  ),
  'iconv_get_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'initializer' => '= "all"',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'iconv_get_encoding',
  ),
  'iconv_mime_decode_headers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoded_headers',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= ini_get("iconv.internal_encoding")',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'iconv_mime_decode_headers',
  ),
  'iconv_mime_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoded_header',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= ini_get("iconv.internal_encoding")',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'iconv_mime_decode',
  ),
  'iconv_mime_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$preferences',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'iconv_mime_encode',
  ),
  'iconv_set_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'iconv_set_encoding',
  ),
  'iconv_strlen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= ini_get("iconv.internal_encoding")',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'iconv_strlen',
  ),
  'iconv_strpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= ini_get("iconv.internal_encoding")',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'iconv_strpos',
  ),
  'iconv_strrpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= ini_get("iconv.internal_encoding")',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'iconv_strrpos',
  ),
  'iconv_substr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= iconv_strlen($str, $charset)',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= ini_get("iconv.internal_encoding")',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'iconv_substr',
  ),
  'iconv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$in_charset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$out_charset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'iconv',
  ),
  'ob_iconv_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$contents',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ob_iconv_handler',
  ),
  'asort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sort_flags',
        'initializer' => '= SORT_REGULAR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'asort',
  ),
  'compare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$priority1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$priority2',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'compare',
  ),
  'getErrorCode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getErrorCode',
  ),
  'getErrorMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getErrorMessage',
  ),
  'getLocale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"locale_type"',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getLocale',
  ),
  'getSortKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSortKey',
  ),
  'getStrength' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getStrength',
  ),
  'setStrength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$strength',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setStrength',
  ),
  'sortWithSortKeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$arr',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sortWithSortKeys',
  ),
  'collator_asort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$arr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$sort_flag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'collator_asort',
  ),
  'collator_compare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'collator_compare',
  ),
  'collator_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'Collator',
    'name' => 'collator_create',
  ),
  'collator_get_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'collator_get_attribute',
  ),
  'collator_get_error_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'collator_get_error_code',
  ),
  'collator_get_error_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'collator_get_error_message',
  ),
  'collator_get_locale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'collator_get_locale',
  ),
  'collator_get_sort_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'collator_get_sort_key',
  ),
  'collator_get_strength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'collator_get_strength',
  ),
  'collator_set_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'collator_set_attribute',
  ),
  'collator_set_strength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$strength',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'collator_set_strength',
  ),
  'collator_sort_with_sort_keys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$arr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'collator_sort_with_sort_keys',
  ),
  'collator_sort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Collator',
        'name' => '$coll',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$arr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$sort_flag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'collator_sort',
  ),
  'formatCurrency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$currency',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'formatCurrency',
  ),
  'getPattern' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPattern',
  ),
  'getSymbol' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSymbol',
  ),
  'getTextAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTextAttribute',
  ),
  'parseCurrency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$currency',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$position',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'parseCurrency',
  ),
  'parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$position',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'parse',
  ),
  'setPattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setPattern',
  ),
  'setSymbol' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSymbol',
  ),
  'setTextAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setTextAttribute',
  ),
  'numfmt_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$style',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => false,
      ),
    ),
    'type' => 'NumberFormatter',
    'name' => 'numfmt_create',
  ),
  'numfmt_format_currency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$currency',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'numfmt_format_currency',
  ),
  'numfmt_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'number',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'numfmt_format',
  ),
  'numfmt_get_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'numfmt_get_attribute',
  ),
  'numfmt_get_error_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'numfmt_get_error_code',
  ),
  'numfmt_get_error_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'numfmt_get_error_message',
  ),
  'numfmt_get_locale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'numfmt_get_locale',
  ),
  'numfmt_get_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'numfmt_get_pattern',
  ),
  'numfmt_get_symbol' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'numfmt_get_symbol',
  ),
  'numfmt_get_text_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'numfmt_get_text_attribute',
  ),
  'numfmt_parse_currency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$currency',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '&$position',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'numfmt_parse_currency',
  ),
  'numfmt_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '&$position',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'numfmt_parse',
  ),
  'numfmt_set_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'numfmt_set_attribute',
  ),
  'numfmt_set_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'numfmt_set_pattern',
  ),
  'numfmt_set_symbol' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'numfmt_set_symbol',
  ),
  'numfmt_set_text_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$attr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'numfmt_set_text_attribute',
  ),
  'acceptFromHttp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$header',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'acceptFromHttp',
  ),
  'canonicalize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'canonicalize',
  ),
  'composeLocale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$subtags',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'composeLocale',
  ),
  'filterMatches' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$langtag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$canonicalize',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'filterMatches',
  ),
  'getAllVariants' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getAllVariants',
  ),
  'getDefault' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDefault',
  ),
  'getDisplayLanguage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDisplayLanguage',
  ),
  'getDisplayName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$isDaylight',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$style',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDisplayName',
  ),
  'getDisplayRegion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDisplayRegion',
  ),
  'getDisplayScript' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDisplayScript',
  ),
  'getDisplayVariant' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDisplayVariant',
  ),
  'getKeywords' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getKeywords',
  ),
  'getPrimaryLanguage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPrimaryLanguage',
  ),
  'getRegion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRegion',
  ),
  'getScript' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getScript',
  ),
  'lookup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$langtag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$canonicalize',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$default',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'lookup',
  ),
  'parseLocale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'parseLocale',
  ),
  'setDefault' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setDefault',
  ),
  'locale_accept_from_http' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$header',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_accept_from_http',
  ),
  'locale_compose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$subtags',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_compose',
  ),
  'locale_filter_matches' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$langtag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$canonicalize',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'locale_filter_matches',
  ),
  'locale_get_all_variants' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'locale_get_all_variants',
  ),
  'locale_get_default' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'locale_get_default',
  ),
  'locale_get_display_language' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_display_language',
  ),
  'locale_get_display_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_display_name',
  ),
  'locale_get_display_region' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_display_region',
  ),
  'locale_get_display_script' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_display_script',
  ),
  'locale_get_display_variant' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$in_locale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_display_variant',
  ),
  'locale_get_keywords' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'locale_get_keywords',
  ),
  'locale_get_primary_language' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_primary_language',
  ),
  'locale_get_region' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_region',
  ),
  'locale_get_script' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_get_script',
  ),
  'locale_lookup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$langtag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$canonicalize',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$default',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'locale_lookup',
  ),
  'locale_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'locale_parse',
  ),
  'locale_set_default' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'locale_set_default',
  ),
  'isNormalized' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$form',
        'initializer' => '= Normalizer::FORM_C',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isNormalized',
  ),
  'normalize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'normalize',
  ),
  'normalizer_is_normalized' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$form',
        'initializer' => '= Normalizer::FORM_C',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'normalizer_is_normalized',
  ),
  'normalizer_normalize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$form',
        'initializer' => '= Normalizer::FORM_C',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'normalizer_normalize',
  ),
  'formatMessage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'formatMessage',
  ),
  'parseMessage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'parseMessage',
  ),
  'msgfmt_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'MessageFormatter',
    'name' => 'msgfmt_create',
  ),
  'msgfmt_format_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msgfmt_format_message',
  ),
  'msgfmt_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MessageFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msgfmt_format',
  ),
  'msgfmt_get_error_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MessageFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msgfmt_get_error_code',
  ),
  'msgfmt_get_error_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MessageFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msgfmt_get_error_message',
  ),
  'msgfmt_get_locale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'NumberFormatter',
        'name' => '$formatter',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msgfmt_get_locale',
  ),
  'msgfmt_get_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MessageFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msgfmt_get_pattern',
  ),
  'msgfmt_parse_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'msgfmt_parse_message',
  ),
  'msgfmt_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MessageFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'msgfmt_parse',
  ),
  'msgfmt_set_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MessageFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msgfmt_set_pattern',
  ),
  'intlcal_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$amount',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_add',
  ),
  'after' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'after',
  ),
  'intlcal_after' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_after',
  ),
  'before' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'before',
  ),
  'intlcal_before' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_before',
  ),
  'intlcal_clear' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_clear',
  ),
  'createInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$timeZone',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'IntlCalendar',
    'name' => 'createInstance',
  ),
  'intlcal_create_instance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$timeZone',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'IntlCalendar',
    'name' => 'intlcal_create_instance',
  ),
  'equals' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'equals',
  ),
  'intlcal_equals' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_equals',
  ),
  'fieldDifference' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$when',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'fieldDifference',
  ),
  'intlcal_field_difference' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$when',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_field_difference',
  ),
  'fromDateTime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$dateTime',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'IntlCalendar',
    'name' => 'fromDateTime',
  ),
  'intlcal_from_date_time' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$dateTime',
        'required' => true,
      ),
    ),
    'type' => 'IntlCalendar',
    'name' => 'intlcal_from_date_time',
  ),
  'intlcal_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar>',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get',
  ),
  'getActualMaximum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getActualMaximum',
  ),
  'intlcal_get_actual_maximum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_actual_maximum',
  ),
  'getActualMinimum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getActualMinimum',
  ),
  'intlcal_get_actual_minimum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_actual_minimum',
  ),
  'getAvailableLocales' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getAvailableLocales',
  ),
  'intlcal_get_available_locales' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'intlcal_get_available_locales',
  ),
  'getDayOfWeekType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dayOfWeek',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getDayOfWeekType',
  ),
  'intlcal_get_day_of_week_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$dayOfWeek',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_day_of_week_type',
  ),
  'getFirstDayOfWeek' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFirstDayOfWeek',
  ),
  'intlcal_get_first_day_of_week' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_first_day_of_week',
  ),
  'getGreatestMinimum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getGreatestMinimum',
  ),
  'intlcal_get_greatest_minimum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_greatest_minimum',
  ),
  'getKeywordValuesForLocale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'boolean',
        'name' => '$commonlyUsed',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Iterator',
    'name' => 'getKeywordValuesForLocale',
  ),
  'intlcal_get_keyword_values_for_locale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'boolean',
        'name' => '$commonlyUsed',
        'required' => true,
      ),
    ),
    'type' => 'Iterator',
    'name' => 'intlcal_get_keyword_values_for_locale',
  ),
  'getLeastMaximum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getLeastMaximum',
  ),
  'intlcal_get_least_maximum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_least_maximum',
  ),
  'intlcal_get_locale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$localeType',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'intlcal_get_locale',
  ),
  'getMaximum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMaximum',
  ),
  'intlcal_get_maximum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_maximum',
  ),
  'getMinimalDaysInFirstWeek' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMinimalDaysInFirstWeek',
  ),
  'intlcal_get_minimal_days_in_first_week' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$minimalDays',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_get_minimal_days_in_first_week',
  ),
  'getMinimum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMinimum',
  ),
  'intlcal_get_minimum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_minimum',
  ),
  'getNow' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getNow',
  ),
  'intlcal_get_now' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'intlcal_get_now',
  ),
  'getRepeatedWallTimeOption' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getRepeatedWallTimeOption',
  ),
  'intlcal_get_repeated_wall_time_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_repeated_wall_time_option',
  ),
  'getSkippedWallTimeOption' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getSkippedWallTimeOption',
  ),
  'intlcal_get_skipped_wall_time_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_skipped_wall_time_option',
  ),
  'getTime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getTime',
  ),
  'intlcal_get_time' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'intlcal_get_time',
  ),
  'getTimeZone' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'IntlTimeZone',
    'name' => 'getTimeZone',
  ),
  'intlcal_get_time_zone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'IntlTimeZone',
    'name' => 'intlcal_get_time_zone',
  ),
  'intlcal_get_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'intlcal_get_type',
  ),
  'getWeekendTransition' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dayOfWeek',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getWeekendTransition',
  ),
  'intlcal_get_weekend_transition' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dayOfWeek',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_weekend_transition',
  ),
  'inDaylightTime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'inDaylightTime',
  ),
  'intlcal_in_daylight_time' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_in_daylight_time',
  ),
  'isEquivalentTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isEquivalentTo',
  ),
  'intlcal_is_equivalent_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_is_equivalent_to',
  ),
  'isLenient' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isLenient',
  ),
  'intlcal_is_lenient' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_is_lenient',
  ),
  'isSet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isSet',
  ),
  'intlcal_is_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_is_set',
  ),
  'isWeekend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$date',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isWeekend',
  ),
  'intlcal_is_weekend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$date',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_is_weekend',
  ),
  'roll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$amountOrUpOrDown',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'roll',
  ),
  'intlcal_roll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$amountOrUpOrDown',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_roll',
  ),
  'set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'set',
  ),
  'intlcal_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dayOfMonth',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$hour',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$minute',
        'initializer' => '= NULL',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$second',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_set',
  ),
  'setFirstDayOfWeek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dayOfWeek',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFirstDayOfWeek',
  ),
  'intlcal_set_first_day_of_week' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$dayOfWeek',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_set_first_day_of_week',
  ),
  'setLenient' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$lenient',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setLenient',
  ),
  'intlcal_set_lenient' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$isLenient',
        'required' => true,
      ),
    ),
    'type' => 'ReturnType',
    'name' => 'intlcal_set_lenient',
  ),
  'setMinimalDaysInFirstWeek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$minimalDays',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setMinimalDaysInFirstWeek',
  ),
  'setRepeatedWallTimeOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$wallTimeOption',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRepeatedWallTimeOption',
  ),
  'intlcal_set_repeated_wall_time_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$wallTimeOption',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_set_repeated_wall_time_option',
  ),
  'setSkippedWallTimeOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$wallTimeOption',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSkippedWallTimeOption',
  ),
  'intlcal_set_skipped_wall_time_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$wallTimeOption',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_set_skipped_wall_time_option',
  ),
  'intlcal_set_time' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$date',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_set_time',
  ),
  'setTimeZone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$zone',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'setTimeZone',
  ),
  'intlcal_set_time_zone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$timeZone',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intlcal_set_time_zone',
  ),
  'intlcal_to_date_time' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$cal',
        'required' => true,
      ),
    ),
    'type' => 'DateTime',
    'name' => 'intlcal_to_date_time',
  ),
  'intlcal_get_error_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$calendar',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'intlcal_get_error_code',
  ),
  'intlcal_get_error_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlCalendar',
        'name' => '$calendar',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'intlcal_get_error_message',
  ),
  'countEquivalentIDs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$zoneId',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'countEquivalentIDs',
  ),
  'createDefault' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'IntlTimeZone',
    'name' => 'createDefault',
  ),
  'createEnumeration' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$countryOrRawOffset',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'IntlIterator',
    'name' => 'createEnumeration',
  ),
  'createTimeZone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$zoneId',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'IntlTimeZone',
    'name' => 'createTimeZone',
  ),
  'fromDateTimeZone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DateTimeZone',
        'name' => '$zoneId',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'IntlTimeZone',
    'name' => 'fromDateTimeZone',
  ),
  'getCanonicalID' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$zoneId',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '&$isSystemID',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getCanonicalID',
  ),
  'getDSTSavings' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getDSTSavings',
  ),
  'getEquivalentID' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$zoneId',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getEquivalentID',
  ),
  'getGMT' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'IntlTimeZone',
    'name' => 'getGMT',
  ),
  'getID' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getID',
  ),
  'getRawOffset' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getRawOffset',
  ),
  'getTZDataVersion' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTZDataVersion',
  ),
  'hasSameRules' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlTimeZone',
        'name' => '$otherTimeZone',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasSameRules',
  ),
  'toDateTimeZone' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'DateTimeZone',
    'name' => 'toDateTimeZone',
  ),
  'useDaylightTime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'useDaylightTime',
  ),
  'intltz_get_error_code' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'integer',
    'name' => 'intltz_get_error_code',
  ),
  'intltz_get_error_message' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'intltz_get_error_message',
  ),
  'formatObject' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$format',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'formatObject',
  ),
  'getCalendar' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getCalendar',
  ),
  'getDateType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getDateType',
  ),
  'getTimeType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTimeType',
  ),
  'getTimeZoneId' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTimeZoneId',
  ),
  'getCalendarObject' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'IntlCalendar',
    'name' => 'getCalendarObject',
  ),
  'setCalendar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCalendar',
  ),
  'setTimeZoneId' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$zone',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setTimeZoneId',
  ),
  'datefmt_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$datetype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timetype',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$timezone',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$calendar',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'IntlDateFormatter',
    'name' => 'datefmt_create',
  ),
  'datefmt_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'datefmt_format',
  ),
  'datefmt_format_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$format',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'datefmt_format_object',
  ),
  'datefmt_get_calendar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'datefmt_get_calendar',
  ),
  'datefmt_get_datetype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'datefmt_get_datetype',
  ),
  'datefmt_get_error_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'datefmt_get_error_code',
  ),
  'datefmt_get_error_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'datefmt_get_error_message',
  ),
  'datefmt_get_locale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'datefmt_get_locale',
  ),
  'datefmt_get_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'datefmt_get_pattern',
  ),
  'datefmt_get_timetype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'datefmt_get_timetype',
  ),
  'datefmt_get_timezone_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'datefmt_get_timezone_id',
  ),
  'datefmt_get_calendar_object' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'IntlCalendar',
    'name' => 'datefmt_get_calendar_object',
  ),
  'datefmt_get_timezone' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'IntlTimeZone',
    'name' => 'datefmt_get_timezone',
  ),
  'datefmt_is_lenient' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'datefmt_is_lenient',
  ),
  'datefmt_localtime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$position',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'datefmt_localtime',
  ),
  'datefmt_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$position',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'datefmt_parse',
  ),
  'datefmt_set_calendar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'datefmt_set_calendar',
  ),
  'datefmt_set_lenient' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$lenient',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'datefmt_set_lenient',
  ),
  'datefmt_set_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'datefmt_set_pattern',
  ),
  'datefmt_set_timezone_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'IntlDateFormatter',
        'name' => '$fmt',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$zone',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'datefmt_set_timezone_id',
  ),
  'datefmt_set_timezone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$zone',
        'required' => true,
      ),
    ),
    'type' => 'boolean',
    'name' => 'datefmt_set_timezone',
  ),
  'getLocales' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$bundlename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getLocales',
  ),
  'resourcebundle_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ResourceBundle',
        'name' => '$r',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'resourcebundle_count',
  ),
  'resourcebundle_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$bundlename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$fallback',
        'required' => false,
      ),
    ),
    'type' => 'ResourceBundle',
    'name' => 'resourcebundle_create',
  ),
  'resourcebundle_get_error_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ResourceBundle',
        'name' => '$r',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'resourcebundle_get_error_code',
  ),
  'resourcebundle_get_error_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ResourceBundle',
        'name' => '$r',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'resourcebundle_get_error_message',
  ),
  'resourcebundle_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ResourceBundle',
        'name' => '$r',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string|int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'resourcebundle_get',
  ),
  'resourcebundle_locales' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$bundlename',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'resourcebundle_locales',
  ),
  'areConfusable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$s1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$s2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$error',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'areConfusable',
  ),
  'isSuspicious' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$error',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isSuspicious',
  ),
  'setAllowedLocales' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$locale_list',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setAllowedLocales',
  ),
  'setChecks' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'long',
        'name' => '$checks',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setChecks',
  ),
  'createFromRules' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$rules',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$direction',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Transliterator',
    'name' => 'createFromRules',
  ),
  'createInverse' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Transliterator',
    'name' => 'createInverse',
  ),
  'listIDs' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'listIDs',
  ),
  'transliterate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$end',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'transliterate',
  ),
  'transliterator_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$direction',
        'required' => false,
      ),
    ),
    'type' => 'Transliterator',
    'name' => 'transliterator_create',
  ),
  'transliterator_create_from_rules' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$direction',
        'required' => false,
      ),
    ),
    'type' => 'Transliterator',
    'name' => 'transliterator_create_from_rules',
  ),
  'transliterator_create_inverse' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Transliterator',
    'name' => 'transliterator_create_inverse',
  ),
  'transliterator_get_error_code' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'transliterator_get_error_code',
  ),
  'transliterator_get_error_message' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'transliterator_get_error_message',
  ),
  'transliterator_list_ids' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'transliterator_list_ids',
  ),
  'transliterator_transliterate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$transliterator',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$end',
        'required' => false,
      ),
    ),
    'name' => 'transliterator_transliterate',
    'type' => 'mixed',
  ),
  'createCharacterInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"locale"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'createCharacterInstance',
  ),
  'createCodePointInstance' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'createCodePointInstance',
  ),
  'createLineInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"locale"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'createLineInstance',
  ),
  'createSentenceInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"locale"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'createSentenceInstance',
  ),
  'createTitleInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"locale"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'createTitleInstance',
  ),
  'createWordInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"locale"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'createWordInstance',
  ),
  'first' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$index',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'first',
  ),
  'following' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"offset"',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'following',
  ),
  'intl_get_error_code' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'intl_get_error_code',
  ),
  'intl_get_error_message' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'intl_get_error_message',
  ),
  'getPartsIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"key_type"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getPartsIterator',
  ),
  'getText' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getText',
  ),
  'isBoundary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"offset"',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'isBoundary',
  ),
  'last' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'last',
  ),
  'preceding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"offset"',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'preceding',
  ),
  'previous' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'previous',
  ),
  'setText' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$"text"',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'setText',
  ),
  'getBinaryRules' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getBinaryRules',
  ),
  'getRules' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getRules',
  ),
  'getRuleStatus' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getRuleStatus',
  ),
  'getRuleStatusVec' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getRuleStatusVec',
  ),
  'getLastCodePoint' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getLastCodePoint',
  ),
  'getBreakIterator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReturnType',
    'name' => 'getBreakIterator',
  ),
  'convert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$reverse',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'convert',
  ),
  'fromUCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$reason',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$codePoint',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '&$error',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'fromUCallback',
  ),
  'getAliases' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getAliases',
  ),
  'getAvailable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getAvailable',
  ),
  'getDestinationEncoding' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDestinationEncoding',
  ),
  'getDestinationType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getDestinationType',
  ),
  'getSourceEncoding' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSourceEncoding',
  ),
  'getSourceType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getSourceType',
  ),
  'getStandards' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getStandards',
  ),
  'getSubstChars' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSubstChars',
  ),
  'reasonText' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$reason',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'reasonText',
  ),
  'setDestinationEncoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setDestinationEncoding',
  ),
  'setSourceEncoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSourceEncoding',
  ),
  'setSubstChars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$chars',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSubstChars',
  ),
  'toUCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$reason',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$codeUnits',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '&$error',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'toUCallback',
  ),
  'transcode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$toEncoding',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$fromEncoding',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'transcode',
  ),
  'grapheme_extract' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$extract_type',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '&$next',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'grapheme_extract',
  ),
  'grapheme_stripos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'grapheme_stripos',
  ),
  'grapheme_stristr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$before_needle',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'grapheme_stristr',
  ),
  'grapheme_strlen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'grapheme_strlen',
  ),
  'grapheme_strpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'grapheme_strpos',
  ),
  'grapheme_strripos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'grapheme_strripos',
  ),
  'grapheme_strrpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'grapheme_strrpos',
  ),
  'grapheme_strstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$before_needle',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'grapheme_strstr',
  ),
  'grapheme_substr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'grapheme_substr',
  ),
  'idn_to_ascii' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$variant',
        'initializer' => '= INTL_IDNA_VARIANT_2003',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$idna_info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'idn_to_ascii',
  ),
  'idn_to_utf8' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$variant',
        'initializer' => '= INTL_IDNA_VARIANT_2003',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$idna_info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'idn_to_utf8',
  ),
  'intl_error_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$error_code',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'intl_error_name',
  ),
  'intl_is_failure' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$error_code',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'intl_is_failure',
  ),
  'mb_check_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$var',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mb_check_encoding',
  ),
  'mb_convert_case' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_convert_case',
  ),
  'mb_convert_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$to_encoding',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$from_encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_convert_encoding',
  ),
  'mb_convert_kana' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "KV"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_convert_kana',
  ),
  'mb_convert_variables' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$to_encoding',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$from_encoding',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$vars',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_convert_variables',
  ),
  'mb_decode_mimeheader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_decode_mimeheader',
  ),
  'mb_decode_numericentity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$convmap',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_decode_numericentity',
  ),
  'mb_detect_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$encoding_list',
        'initializer' => '= mb_detect_order()',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$strict',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_detect_encoding',
  ),
  'mb_detect_order' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$encoding_list',
        'initializer' => '= mb_detect_order()',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_detect_order',
  ),
  'mb_encode_mimeheader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$transfer_encoding',
        'initializer' => '= "B"',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$linefeed',
        'initializer' => '= "\\r\\n"',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$indent',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_encode_mimeheader',
  ),
  'mb_encode_numericentity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$convmap',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$is_hex',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_encode_numericentity',
  ),
  'mb_encoding_aliases' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mb_encoding_aliases',
  ),
  'mb_ereg_match' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "msr"',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mb_ereg_match',
  ),
  'mb_ereg_replace_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "msr"',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_ereg_replace_callback',
  ),
  'mb_ereg_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$replacement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "msr"',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_ereg_replace',
  ),
  'mb_ereg_search_getpos' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'mb_ereg_search_getpos',
  ),
  'mb_ereg_search_getregs' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mb_ereg_search_getregs',
  ),
  'mb_ereg_search_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "msr"',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mb_ereg_search_init',
  ),
  'mb_ereg_search_pos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "ms"',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mb_ereg_search_pos',
  ),
  'mb_ereg_search_regs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "ms"',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mb_ereg_search_regs',
  ),
  'mb_ereg_search_setpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$position',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mb_ereg_search_setpos',
  ),
  'mb_ereg_search' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "ms"',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mb_ereg_search',
  ),
  'mb_ereg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$regs',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_ereg',
  ),
  'mb_eregi_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$replace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'initializer' => '= "msri"',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_eregi_replace',
  ),
  'mb_eregi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$regs',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_eregi',
  ),
  'mb_get_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'initializer' => '= "all"',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_get_info',
  ),
  'mb_http_input' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_http_input',
  ),
  'mb_http_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_http_output()',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_http_output',
  ),
  'mb_internal_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_internal_encoding',
  ),
  'mb_language' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$language',
        'initializer' => '= mb_language()',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_language',
  ),
  'mb_list_encodings' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'mb_list_encodings',
  ),
  'mb_output_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$contents',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_output_handler',
  ),
  'mb_parse_str' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoded_string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$result',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mb_parse_str',
  ),
  'mb_preferred_mime_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_preferred_mime_name',
  ),
  'mb_regex_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_regex_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_regex_encoding',
  ),
  'mb_regex_set_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$options',
        'initializer' => '= mb_regex_set_options()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_regex_set_options',
  ),
  'mb_send_mail' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$to',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$additional_headers',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$additional_parameter',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mb_send_mail',
  ),
  'mb_split' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'mb_split',
  ),
  'mb_strcut' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_strcut',
  ),
  'mb_strimwidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$trimmarker',
        'initializer' => '= ""',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_strimwidth',
  ),
  'mb_stripos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_stripos',
  ),
  'mb_stristr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$before_needle',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_stristr',
  ),
  'mb_strlen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_strlen',
  ),
  'mb_strpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_strpos',
  ),
  'mb_strrchr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$part',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_strrchr',
  ),
  'mb_strrichr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$part',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_strrichr',
  ),
  'mb_strripos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_strripos',
  ),
  'mb_strrpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_strrpos',
  ),
  'mb_strstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$before_needle',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_strstr',
  ),
  'mb_strtolower' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_strtolower',
  ),
  'mb_strtoupper' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_strtoupper',
  ),
  'mb_strwidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_strwidth',
  ),
  'mb_substitute_character' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$substrchar',
        'initializer' => '= mb_substitute_character()',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'mb_substitute_character',
  ),
  'mb_substr_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'mb_substr_count',
  ),
  'mb_substr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= mb_internal_encoding()',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mb_substr',
  ),
  'pspell_add_to_personal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_add_to_personal',
  ),
  'pspell_add_to_session' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_add_to_session',
  ),
  'pspell_check' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_check',
  ),
  'pspell_clear_session' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_clear_session',
  ),
  'pspell_config_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$language',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$spelling',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$jargon',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pspell_config_create',
  ),
  'pspell_config_data_dir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$conf',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_data_dir',
  ),
  'pspell_config_dict_dir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$conf',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_dict_dir',
  ),
  'pspell_config_ignore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_ignore',
  ),
  'pspell_config_mode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_mode',
  ),
  'pspell_config_personal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_personal',
  ),
  'pspell_config_repl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_repl',
  ),
  'pspell_config_runtogether' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_runtogether',
  ),
  'pspell_config_save_repl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_config_save_repl',
  ),
  'pspell_new_config' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$config',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pspell_new_config',
  ),
  'pspell_new_personal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$personal',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$language',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$spelling',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$jargon',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pspell_new_personal',
  ),
  'pspell_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$language',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$spelling',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$jargon',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pspell_new',
  ),
  'pspell_save_wordlist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_save_wordlist',
  ),
  'pspell_store_replacement' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$misspelled',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$correct',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pspell_store_replacement',
  ),
  'pspell_suggest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dictionary_link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$word',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'pspell_suggest',
  ),
  'recode_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$input',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$output',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'recode_file',
  ),
  'recode_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'recode_string',
  ),
  'cairo_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'CairoContext',
    'name' => 'cairo_create',
  ),
  'cairo_font_face_get_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontFace',
        'name' => '$fontface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_face_get_type',
  ),
  'cairo_font_face_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontFace',
        'name' => '$fontface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_face_status',
  ),
  'cairo_font_options_create' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'CairoFontOptions',
    'name' => 'cairo_font_options_create',
  ),
  'cairo_font_options_equal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cairo_font_options_equal',
  ),
  'cairo_font_options_get_antialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_options_get_antialias',
  ),
  'cairo_font_options_get_hint_metrics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_options_get_hint_metrics',
  ),
  'cairo_font_options_get_hint_style' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_options_get_hint_style',
  ),
  'cairo_font_options_get_subpixel_order' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_options_get_subpixel_order',
  ),
  'cairo_font_options_hash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_options_hash',
  ),
  'cairo_font_options_merge' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_font_options_merge',
  ),
  'cairo_font_options_set_antialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$antialias',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_font_options_set_antialias',
  ),
  'cairo_font_options_set_hint_metrics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$hint_metrics',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_font_options_set_hint_metrics',
  ),
  'cairo_font_options_set_hint_style' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$hint_style',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_font_options_set_hint_style',
  ),
  'cairo_font_options_set_subpixel_order' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$subpixel_order',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_font_options_set_subpixel_order',
  ),
  'cairo_font_options_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_font_options_status',
  ),
  'cairo_format_stride_for_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_format_stride_for_width',
  ),
  'cairo_image_surface_create_for_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$stride',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'CairoImageSurface',
    'name' => 'cairo_image_surface_create_for_data',
  ),
  'cairo_image_surface_create_from_png' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'CairoImageSurface',
    'name' => 'cairo_image_surface_create_from_png',
  ),
  'cairo_image_surface_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'CairoImageSurface',
    'name' => 'cairo_image_surface_create',
  ),
  'cairo_image_surface_get_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoImageSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cairo_image_surface_get_data',
  ),
  'cairo_image_surface_get_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoImageSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_image_surface_get_format',
  ),
  'cairo_image_surface_get_height' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoImageSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_image_surface_get_height',
  ),
  'cairo_image_surface_get_stride' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoImageSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_image_surface_get_stride',
  ),
  'cairo_image_surface_get_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoImageSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_image_surface_get_width',
  ),
  'cairo_matrix_invert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_matrix_invert',
  ),
  'cairo_matrix_multiply' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix2',
        'required' => true,
      ),
    ),
    'type' => 'CairoMatrix',
    'name' => 'cairo_matrix_multiply',
  ),
  'cairo_matrix_rotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$radians',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_matrix_rotate',
  ),
  'cairo_matrix_transform_distance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_matrix_transform_distance',
  ),
  'cairo_matrix_transform_point' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_matrix_transform_point',
  ),
  'cairo_matrix_translate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$tx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$ty',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_matrix_translate',
  ),
  'cairo_pattern_add_color_stop_rgb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoGradientPattern',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pattern_add_color_stop_rgb',
  ),
  'cairo_pattern_add_color_stop_rgba' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoGradientPattern',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pattern_add_color_stop_rgba',
  ),
  'cairo_pattern_create_for_surface' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'CairoPattern',
    'name' => 'cairo_pattern_create_for_surface',
  ),
  'cairo_pattern_create_linear' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y0',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
    ),
    'type' => 'CairoPattern',
    'name' => 'cairo_pattern_create_linear',
  ),
  'cairo_pattern_create_radial' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y0',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$r0',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$r1',
        'required' => true,
      ),
    ),
    'type' => 'CairoPattern',
    'name' => 'cairo_pattern_create_radial',
  ),
  'cairo_pattern_create_rgb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'CairoPattern',
    'name' => 'cairo_pattern_create_rgb',
  ),
  'cairo_pattern_create_rgba' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'type' => 'CairoPattern',
    'name' => 'cairo_pattern_create_rgba',
  ),
  'cairo_pattern_get_color_stop_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoGradientPattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_pattern_get_color_stop_count',
  ),
  'cairo_pattern_get_color_stop_rgba' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoGradientPattern',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_pattern_get_color_stop_rgba',
  ),
  'cairo_pattern_get_extend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_pattern_get_extend',
  ),
  'cairo_pattern_get_filter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurfacePattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_pattern_get_filter',
  ),
  'cairo_pattern_get_linear_points' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoLinearGradient',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_pattern_get_linear_points',
  ),
  'cairo_pattern_get_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'CairoMatrix',
    'name' => 'cairo_pattern_get_matrix',
  ),
  'cairo_pattern_get_radial_circles' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoRadialGradient',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_pattern_get_radial_circles',
  ),
  'cairo_pattern_get_rgba' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSolidPattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_pattern_get_rgba',
  ),
  'cairo_pattern_get_surface' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurfacePattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'CairoSurface',
    'name' => 'cairo_pattern_get_surface',
  ),
  'cairo_pattern_get_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_pattern_get_type',
  ),
  'cairo_pattern_set_extend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$extend',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pattern_set_extend',
  ),
  'cairo_pattern_set_filter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurfacePattern',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pattern_set_filter',
  ),
  'cairo_pattern_set_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPattern',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pattern_set_matrix',
  ),
  'cairo_pattern_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_pattern_status',
  ),
  'cairo_pdf_surface_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'CairoPdfSurface',
    'name' => 'cairo_pdf_surface_create',
  ),
  'cairo_pdf_surface_set_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPdfSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pdf_surface_set_size',
  ),
  'cairo_ps_get_levels' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'cairo_ps_get_levels',
  ),
  'cairo_ps_level_to_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cairo_ps_level_to_string',
  ),
  'cairo_ps_surface_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'CairoPsSurface',
    'name' => 'cairo_ps_surface_create',
  ),
  'cairo_ps_surface_dsc_begin_page_setup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPsSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_ps_surface_dsc_begin_page_setup',
  ),
  'cairo_ps_surface_dsc_begin_setup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPsSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_ps_surface_dsc_begin_setup',
  ),
  'cairo_ps_surface_dsc_comment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPsSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_ps_surface_dsc_comment',
  ),
  'cairo_ps_surface_get_eps' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPsSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cairo_ps_surface_get_eps',
  ),
  'cairo_ps_surface_restrict_to_level' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPsSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_ps_surface_restrict_to_level',
  ),
  'cairo_ps_surface_set_eps' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPsSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_ps_surface_set_eps',
  ),
  'cairo_ps_surface_set_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPsSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_ps_surface_set_size',
  ),
  'cairo_scaled_font_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontFace',
        'name' => '$fontface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$ctm',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$fontoptions',
        'required' => true,
      ),
    ),
    'type' => 'CairoScaledFont',
    'name' => 'cairo_scaled_font_create',
  ),
  'cairo_scaled_font_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_scaled_font_extents',
  ),
  'cairo_scaled_font_get_ctm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'CairoMatrix',
    'name' => 'cairo_scaled_font_get_ctm',
  ),
  'cairo_scaled_font_get_font_face' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'CairoFontFace',
    'name' => 'cairo_scaled_font_get_font_face',
  ),
  'cairo_scaled_font_get_font_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'CairoFontOptions',
    'name' => 'cairo_scaled_font_get_font_matrix',
  ),
  'cairo_scaled_font_get_font_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'CairoFontOptions',
    'name' => 'cairo_scaled_font_get_font_options',
  ),
  'cairo_scaled_font_get_scale_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'CairoMatrix',
    'name' => 'cairo_scaled_font_get_scale_matrix',
  ),
  'cairo_scaled_font_get_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_scaled_font_get_type',
  ),
  'cairo_scaled_font_glyph_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$glyphs',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_scaled_font_glyph_extents',
  ),
  'cairo_scaled_font_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_scaled_font_status',
  ),
  'cairo_scaled_font_text_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_scaled_font_text_extents',
  ),
  'cairo_surface_copy_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_copy_page',
  ),
  'cairo_surface_create_similar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$content',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'CairoSurface',
    'name' => 'cairo_surface_create_similar',
  ),
  'cairo_surface_finish' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_finish',
  ),
  'cairo_surface_flush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_flush',
  ),
  'cairo_surface_get_content' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_surface_get_content',
  ),
  'cairo_surface_get_device_offset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_surface_get_device_offset',
  ),
  'cairo_surface_get_font_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'CairoFontOptions',
    'name' => 'cairo_surface_get_font_options',
  ),
  'cairo_surface_get_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_surface_get_type',
  ),
  'cairo_surface_mark_dirty_rectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_mark_dirty_rectangle',
  ),
  'cairo_surface_mark_dirty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_mark_dirty',
  ),
  'cairo_surface_set_device_offset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_set_device_offset',
  ),
  'cairo_surface_set_fallback_resolution' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_set_fallback_resolution',
  ),
  'cairo_surface_show_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_show_page',
  ),
  'cairo_surface_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_surface_status',
  ),
  'cairo_surface_write_to_png' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_surface_write_to_png',
  ),
  'cairo_svg_surface_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'CairoSvgSurface',
    'name' => 'cairo_svg_surface_create',
  ),
  'cairo_svg_surface_restrict_to_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSvgSurface',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_svg_surface_restrict_to_version',
  ),
  'cairo_svg_version_to_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cairo_svg_version_to_string',
  ),
  'availableFonts' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'availableFonts',
  ),
  'availableSurfaces' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'availableSurfaces',
  ),
  'statusToString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'statusToString',
  ),
  'versionString' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'versionString',
  ),
  'cairo_available_fonts' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'cairo_available_fonts',
  ),
  'cairo_available_surfaces' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'cairo_available_surfaces',
  ),
  'cairo_status_to_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'cairo_status_to_string',
  ),
  'cairo_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'cairo_version',
  ),
  'cairo_version_string' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'cairo_version_string',
  ),
  'appendPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoPath',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'appendPath',
  ),
  'arc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$ray',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$ang1',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ang2',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'arc',
  ),
  'arcNegative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$angle1',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$angle2',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'arcNegative',
  ),
  'clip' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'clip',
  ),
  'clipExtents' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'clipExtents',
  ),
  'clipPreserve' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'clipPreserve',
  ),
  'clipRectangleList' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'clipRectangleList',
  ),
  'closePath' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'closePath',
  ),
  'copyPage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'copyPage',
  ),
  'copyPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'CairoPath',
    'name' => 'copyPath',
  ),
  'copyPathFlat' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'CairoPath',
    'name' => 'copyPathFlat',
  ),
  'curveTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x3',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'curveTo',
  ),
  'deviceToUser' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'deviceToUser',
  ),
  'deviceToUserDistance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'deviceToUserDistance',
  ),
  'fill' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'fill',
  ),
  'fillExtents' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'fillExtents',
  ),
  'fillPreserve' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'fillPreserve',
  ),
  'fontExtents' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'fontExtents',
  ),
  'getAntialias' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getAntialias',
  ),
  'getCurrentPoint' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getCurrentPoint',
  ),
  'getDash' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getDash',
  ),
  'getDashCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getDashCount',
  ),
  'getFillRule' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getFillRule',
  ),
  'getFontFace' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getFontFace',
  ),
  'getFontMatrix' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getFontMatrix',
  ),
  'getFontOptions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getFontOptions',
  ),
  'getGroupTarget' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getGroupTarget',
  ),
  'getLineCap' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getLineCap',
  ),
  'getLineJoin' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getLineJoin',
  ),
  'getLineWidth' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getLineWidth',
  ),
  'getMatrix' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getMatrix',
  ),
  'getMiterLimit' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getMiterLimit',
  ),
  'getOperator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getOperator',
  ),
  'getScaledFont' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getScaledFont',
  ),
  'getSource' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getSource',
  ),
  'getTarget' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getTarget',
  ),
  'getTolerance' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getTolerance',
  ),
  'glyphPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$glyphs',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'glyphPath',
  ),
  'hasCurrentPoint' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasCurrentPoint',
  ),
  'identityMatrix' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'identityMatrix',
  ),
  'inFill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'inFill',
  ),
  'inStroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'inStroke',
  ),
  'lineTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'lineTo',
  ),
  'mask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'mask',
  ),
  'maskSurface' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'maskSurface',
  ),
  'moveTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'moveTo',
  ),
  'newPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'newPath',
  ),
  'newSubPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'newSubPath',
  ),
  'paint' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'paint',
  ),
  'paintWithAlpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'paintWithAlpha',
  ),
  'pathExtents' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'pathExtents',
  ),
  'popGroup' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'popGroup',
  ),
  'popGroupToSource' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'popGroupToSource',
  ),
  'pushGroup' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'pushGroup',
  ),
  'pushGroupWithContent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'pushGroupWithContent',
  ),
  'rectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rectangle',
  ),
  'relCurveTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$x2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$y2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$x3',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'relCurveTo',
  ),
  'relLineTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'relLineTo',
  ),
  'relMoveTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'relMoveTo',
  ),
  'resetClip' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'resetClip',
  ),
  'rotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'rotate',
  ),
  'scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'scale',
  ),
  'selectFontFace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$family',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$slant',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$weight',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'selectFontFace',
  ),
  'setAntialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$antialias',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setAntialias',
  ),
  'setDash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$phase',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setDash',
  ),
  'setFillRule' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fill_rule',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFillRule',
  ),
  'setFontFace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoFontFace',
        'name' => '$fontface',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setFontFace',
  ),
  'setFontMatrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setFontMatrix',
  ),
  'setFontOptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fontoptions',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setFontOptions',
  ),
  'setFontSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$pointsize',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFontSize',
  ),
  'setLineCap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$cap',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setLineCap',
  ),
  'setLineJoin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$join',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setLineJoin',
  ),
  'setLineWidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setLineWidth',
  ),
  'setMatrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$d',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setMatrix',
  ),
  'setMiterLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$limit',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setMiterLimit',
  ),
  'setOperator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setOperator',
  ),
  'setScaledFont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setScaledFont',
  ),
  'setSource' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSource',
  ),
  'setSourceRGB' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSourceRGB',
  ),
  'setSourceRGBA' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$blue',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSourceRGBA',
  ),
  'setSourceSurface' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$surface',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSourceSurface',
  ),
  'setTolerance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$tolerance',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setTolerance',
  ),
  'showPage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'showPage',
  ),
  'showText' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'showText',
  ),
  'status' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'status',
  ),
  'stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$close_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stroke',
  ),
  'strokeExtents' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'strokeExtents',
  ),
  'strokePreserve' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'strokePreserve',
  ),
  'textExtents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'textExtents',
  ),
  'textPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'textPath',
  ),
  'transform' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'transform',
  ),
  'translate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'translate',
  ),
  'userToDevice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'userToDevice',
  ),
  'userToDeviceDistance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'userToDeviceDistance',
  ),
  'cairo_append_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoPath',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_append_path',
  ),
  'cairo_arc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$angle1',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$angle2',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_arc',
  ),
  'cairo_arc_negative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$angle1',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$angle2',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_arc_negative',
  ),
  'cairo_clip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_clip',
  ),
  'cairo_clip_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_clip_extents',
  ),
  'cairo_clip_preserve' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_clip_preserve',
  ),
  'cairo_clip_rectangle_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_clip_rectangle_list',
  ),
  'cairo_close_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_close_path',
  ),
  'cairo_copy_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_copy_page',
  ),
  'cairo_copy_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'CairoPath',
    'name' => 'cairo_copy_path',
  ),
  'cairo_copy_path_flat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'CairoPath',
    'name' => 'cairo_copy_path_flat',
  ),
  'cairo_curve_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$x3',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_curve_to',
  ),
  'cairo_device_to_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_device_to_user',
  ),
  'cairo_device_to_user_distance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_device_to_user_distance',
  ),
  'cairo_fill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_fill',
  ),
  'cairo_fill_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_fill_extents',
  ),
  'cairo_fill_preserve' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_fill_preserve',
  ),
  'cairo_font_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_font_extents',
  ),
  'cairo_get_antialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_get_antialias',
  ),
  'cairo_get_current_point' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_get_current_point',
  ),
  'cairo_get_dash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_get_dash',
  ),
  'cairo_get_dash_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_get_dash_count',
  ),
  'cairo_get_fill_rule' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_get_fill_rule',
  ),
  'cairo_get_font_face' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_font_face',
  ),
  'cairo_get_font_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_font_matrix',
  ),
  'cairo_get_font_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_font_options',
  ),
  'cairo_get_group_target' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_group_target',
  ),
  'cairo_get_line_cap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_get_line_cap',
  ),
  'cairo_get_line_join' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_get_line_join',
  ),
  'cairo_get_line_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'cairo_get_line_width',
  ),
  'cairo_get_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_matrix',
  ),
  'cairo_get_miter_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'cairo_get_miter_limit',
  ),
  'cairo_get_operator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_get_operator',
  ),
  'cairo_get_scaled_font' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_scaled_font',
  ),
  'cairo_get_source' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_source',
  ),
  'cairo_get_target' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_get_target',
  ),
  'cairo_get_tolerance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'cairo_get_tolerance',
  ),
  'cairo_glyph_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$glyphs',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_glyph_path',
  ),
  'cairo_has_current_point' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cairo_has_current_point',
  ),
  'cairo_identity_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_identity_matrix',
  ),
  'cairo_in_fill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cairo_in_fill',
  ),
  'cairo_in_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cairo_in_stroke',
  ),
  'cairo_line_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_line_to',
  ),
  'cairo_mask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoPattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_mask',
  ),
  'cairo_mask_surface' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_mask_surface',
  ),
  'cairo_move_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_move_to',
  ),
  'cairo_new_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_new_path',
  ),
  'cairo_new_sub_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_new_sub_path',
  ),
  'cairo_paint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_paint',
  ),
  'cairo_paint_with_alpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_paint_with_alpha',
  ),
  'cairo_path_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_path_extents',
  ),
  'cairo_pop_group' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pop_group',
  ),
  'cairo_pop_group_to_source' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_pop_group_to_source',
  ),
  'cairo_push_group' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_push_group',
  ),
  'cairo_push_group_with_content' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_push_group_with_content',
  ),
  'cairo_rectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_rectangle',
  ),
  'cairo_rel_curve_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$x3',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_rel_curve_to',
  ),
  'cairo_rel_line_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_rel_line_to',
  ),
  'cairo_rel_move_to' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_rel_move_to',
  ),
  'cairo_reset_clip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_reset_clip',
  ),
  'cairo_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_restore',
  ),
  'cairo_rotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_rotate',
  ),
  'cairo_save' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_save',
  ),
  'cairo_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_scale',
  ),
  'cairo_select_font_face' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$family',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$slant',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$weight',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_select_font_face',
  ),
  'cairo_set_antialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$antialias',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_antialias',
  ),
  'cairo_set_dash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$dashes',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$offset',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_dash',
  ),
  'cairo_set_fill_rule' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_fill_rule',
  ),
  'cairo_set_font_face' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoFontFace',
        'name' => '$fontface',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_font_face',
  ),
  'cairo_set_font_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_font_matrix',
  ),
  'cairo_set_font_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoFontOptions',
        'name' => '$fontoptions',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_font_options',
  ),
  'cairo_set_font_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_font_size',
  ),
  'cairo_set_line_cap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_line_cap',
  ),
  'cairo_set_line_join' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_line_join',
  ),
  'cairo_set_line_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_line_width',
  ),
  'cairo_set_matrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_matrix',
  ),
  'cairo_set_miter_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$limit',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_miter_limit',
  ),
  'cairo_set_operator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$setting',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_operator',
  ),
  'cairo_set_scaled_font' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoScaledFont',
        'name' => '$scaledfont',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_scaled_font',
  ),
  'cairo_set_source' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoPattern',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_source',
  ),
  'cairo_set_source_surface' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$surface',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_source_surface',
  ),
  'cairo_set_tolerance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tolerance',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_set_tolerance',
  ),
  'cairo_show_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_show_page',
  ),
  'cairo_show_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_show_text',
  ),
  'cairo_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'cairo_status',
  ),
  'cairo_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_stroke',
  ),
  'cairo_stroke_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_stroke_extents',
  ),
  'cairo_stroke_preserve' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_stroke_preserve',
  ),
  'cairo_text_extents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_text_extents',
  ),
  'cairo_text_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_text_path',
  ),
  'cairo_transform' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_transform',
  ),
  'cairo_translate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_translate',
  ),
  'cairo_user_to_device' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_user_to_device',
  ),
  'cairo_user_to_device_distance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cairo_user_to_device_distance',
  ),
  'createSimilar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoSurface',
        'name' => '$other',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$content',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'createSimilar',
  ),
  'finish' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'finish',
  ),
  'getContent' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getContent',
  ),
  'getDeviceOffset' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getDeviceOffset',
  ),
  'markDirty' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'markDirty',
  ),
  'markDirtyRectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'markDirtyRectangle',
  ),
  'setDeviceOffset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setDeviceOffset',
  ),
  'setFallbackResolution' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setFallbackResolution',
  ),
  'writeToPng' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'writeToPng',
  ),
  'getVersions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getVersions',
  ),
  'restrictToVersion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'restrictToVersion',
  ),
  'versionToString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'versionToString',
  ),
  'cairo_svg_get_versions' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'cairo_svg_get_versions',
  ),
  'createForData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$stride',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'createForData',
  ),
  'createFromPng' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'CairoImageSurface',
    'name' => 'createFromPng',
  ),
  'getData' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'getData',
  ),
  'getFormat' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getFormat',
  ),
  'getHeight' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getHeight',
  ),
  'getStride' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getStride',
  ),
  'getWidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'getWidth',
  ),
  'dscBeginPageSetup' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'dscBeginPageSetup',
  ),
  'dscBeginSetup' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'dscBeginSetup',
  ),
  'dscComment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'dscComment',
  ),
  'getEps' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getEps',
  ),
  'getLevels' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getLevels',
  ),
  'levelToString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'levelToString',
  ),
  'restrictToLevel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'restrictToLevel',
  ),
  'setEps' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setEps',
  ),
  'equal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$other',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'equal',
  ),
  'getHintMetrics' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHintMetrics',
  ),
  'getHintStyle' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHintStyle',
  ),
  'getSubpixelOrder' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getSubpixelOrder',
  ),
  'merge' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$src',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$diff',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'merge',
  ),
  'setHintMetrics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hint_metrics',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setHintMetrics',
  ),
  'setHintStyle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hint_style',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setHintStyle',
  ),
  'setSubpixelOrder' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$subpixel_order',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSubpixelOrder',
  ),
  'extents' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'extents',
  ),
  'getCtm' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'CairoMatrix',
    'name' => 'getCtm',
  ),
  'getScaleMatrix' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getScaleMatrix',
  ),
  'glyphExtents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$glyphs',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'glyphExtents',
  ),
  'addColorStopRgb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addColorStopRgb',
  ),
  'addColorStopRgba' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$blue',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addColorStopRgba',
  ),
  'getColorStopCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getColorStopCount',
  ),
  'getColorStopRgba' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getColorStopRgba',
  ),
  'getExtend' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getExtend',
  ),
  'setExtend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$extend',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setExtend',
  ),
  'getRgba' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getRgba',
  ),
  'getFilter' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFilter',
  ),
  'getSurface' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getSurface',
  ),
  'setFilter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$exclude',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFilter',
  ),
  'getPoints' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getPoints',
  ),
  'getCircles' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getCircles',
  ),
  'strideForWidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'strideForWidth',
  ),
  'initIdentity' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'initIdentity',
  ),
  'initRotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radians',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'initRotate',
  ),
  'initScale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$sx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sy',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'initScale',
  ),
  'initTranslate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$tx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ty',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'initTranslate',
  ),
  'invert' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'invert',
  ),
  'multiply' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'CairoMatrix',
        'name' => '$matrix2',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'CairoMatrix',
    'name' => 'multiply',
  ),
  'transformDistance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'transformDistance',
  ),
  'transformPoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'transformPoint',
  ),
  'cairo_matrix_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$xx',
        'initializer' => '= 1.0',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$yx',
        'initializer' => '= 0.0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$xy',
        'initializer' => '= 0.0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$yy',
        'initializer' => '= 1.0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x0',
        'initializer' => '= 0.0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y0',
        'initializer' => '= 0.0',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'cairo_matrix_init',
  ),
  'cairo_matrix_init_identity' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'cairo_matrix_init_identity',
  ),
  'cairo_matrix_init_rotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radians',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'cairo_matrix_init_rotate',
  ),
  'cairo_matrix_init_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$sx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sy',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'cairo_matrix_init_scale',
  ),
  'cairo_matrix_init_translate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$tx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ty',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'cairo_matrix_init_translate',
  ),
  'cairo_matrix_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'CairoContext',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$sy',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'cairo_matrix_scale',
  ),
  'exif_imagetype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'exif_imagetype',
  ),
  'exif_read_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sections',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$arrays',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$thumbnail',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'exif_read_data',
  ),
  'exif_tagname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'exif_tagname',
  ),
  'exif_thumbnail' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$width',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$height',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '&$imagetype',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'exif_thumbnail',
  ),
  'gd_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'gd_info',
  ),
  'getimagesize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$imageinfo',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getimagesize',
  ),
  'getimagesizefromstring' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$imagedata',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$imageinfo',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getimagesizefromstring',
  ),
  'image_type_to_extension' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$imagetype',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$include_dot',
        'initializer' => '= TRUE',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'image_type_to_extension',
  ),
  'image_type_to_mime_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$imagetype',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'image_type_to_mime_type',
  ),
  'image2wbmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$threshold',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'image2wbmp',
  ),
  'imageaffine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$affine',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$clip',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'imageaffine',
  ),
  'imageaffinematrixconcat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$m1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$m2',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imageaffinematrixconcat',
  ),
  'imageaffinematrixget' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imageaffinematrixget',
  ),
  'imagealphablending' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$blendmode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagealphablending',
  ),
  'imageantialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$enabled',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imageantialias',
  ),
  'imagearc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$cy',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$end',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagearc',
  ),
  'imagechar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$c',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagechar',
  ),
  'imagecharup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$c',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecharup',
  ),
  'imagecolorallocate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorallocate',
  ),
  'imagecolorallocatealpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorallocatealpha',
  ),
  'imagecolorat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorat',
  ),
  'imagecolorclosest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorclosest',
  ),
  'imagecolorclosestalpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorclosestalpha',
  ),
  'imagecolorclosesthwb' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorclosesthwb',
  ),
  'imagecolordeallocate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecolordeallocate',
  ),
  'imagecolorexact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorexact',
  ),
  'imagecolorexactalpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorexactalpha',
  ),
  'imagecolormatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$image2',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecolormatch',
  ),
  'imagecolorresolve' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorresolve',
  ),
  'imagecolorresolvealpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$alpha',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorresolvealpha',
  ),
  'imagecolorset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$alpha',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'imagecolorset',
  ),
  'imagecolorsforindex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imagecolorsforindex',
  ),
  'imagecolorstotal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolorstotal',
  ),
  'imagecolortransparent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'imagecolortransparent',
  ),
  'imageconvolution' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$matrix',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$div',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imageconvolution',
  ),
  'imagecopy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dst_im',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$src_im',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dst_x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dst_y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$src_x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$src_y',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$src_w',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$src_h',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecopy',
  ),
  'imagecopymerge' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dst_im',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$src_im',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dst_x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dst_y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$src_x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$src_y',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$src_w',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$src_h',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$pct',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecopymerge',
  ),
  'imagecopymergegray' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dst_im',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$src_im',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dst_x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dst_y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$src_x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$src_y',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$src_w',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$src_h',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$pct',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecopymergegray',
  ),
  'imagecopyresampled' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dst_image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$src_image',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dst_x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dst_y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$src_x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$src_y',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$dst_w',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$dst_h',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$src_w',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'int',
        'name' => '$src_h',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecopyresampled',
  ),
  'imagecopyresized' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$dst_image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$src_image',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dst_x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dst_y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$src_x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$src_y',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$dst_w',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$dst_h',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$src_w',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'int',
        'name' => '$src_h',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagecopyresized',
  ),
  'imagecreate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreate',
  ),
  'imagecreatefromgd2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromgd2',
  ),
  'imagecreatefromgd2part' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$srcX',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$srcY',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromgd2part',
  ),
  'imagecreatefromgd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromgd',
  ),
  'imagecreatefromgif' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromgif',
  ),
  'imagecreatefromjpeg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromjpeg',
  ),
  'imagecreatefrompng' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefrompng',
  ),
  'imagecreatefromstring' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromstring',
  ),
  'imagecreatefromwbmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromwbmp',
  ),
  'imagecreatefromwebp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromwebp',
  ),
  'imagecreatefromxbm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromxbm',
  ),
  'imagecreatefromxpm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatefromxpm',
  ),
  'imagecreatetruecolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecreatetruecolor',
  ),
  'imagecrop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$rect',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecrop',
  ),
  'imagecropauto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$threshold',
        'initializer' => '= .5',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagecropauto',
  ),
  'imagedashedline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagedashedline',
  ),
  'imagedestroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagedestroy',
  ),
  'imageellipse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$cy',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imageellipse',
  ),
  'imagefill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagefill',
  ),
  'imagefilledarc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$cy',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$end',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$style',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagefilledarc',
  ),
  'imagefilledellipse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$cy',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagefilledellipse',
  ),
  'imagefilledpolygon' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$points',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num_points',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagefilledpolygon',
  ),
  'imagefilledrectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagefilledrectangle',
  ),
  'imagefilltoborder' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$border',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagefilltoborder',
  ),
  'imagefilter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$filtertype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$arg1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$arg2',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$arg3',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$arg4',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagefilter',
  ),
  'imageflip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imageflip',
  ),
  'imagefontheight' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagefontheight',
  ),
  'imagefontwidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagefontwidth',
  ),
  'imageftbbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$fontfile',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$extrainfo',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imageftbbox',
  ),
  'imagefttext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$fontfile',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'array',
        'name' => '$extrainfo',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imagefttext',
  ),
  'imagegammacorrect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$inputgamma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$outputgamma',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagegammacorrect',
  ),
  'imagegd2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$chunk_size',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= IMG_GD2_RAW',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagegd2',
  ),
  'imagegd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagegd',
  ),
  'imagegif' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagegif',
  ),
  'imagegrabscreen' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'imagegrabscreen',
  ),
  'imagegrabwindow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$window_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$client_area',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagegrabwindow',
  ),
  'imageinterlace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$interlace',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'imageinterlace',
  ),
  'imageistruecolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imageistruecolor',
  ),
  'imagejpeg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$quality',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagejpeg',
  ),
  'imagelayereffect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$effect',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagelayereffect',
  ),
  'imageline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imageline',
  ),
  'imageloadfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imageloadfont',
  ),
  'imagepalettecopy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$destination',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'imagepalettecopy',
  ),
  'imagepalettetotruecolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$src',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagepalettetotruecolor',
  ),
  'imagepng' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$quality',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$filters',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagepng',
  ),
  'imagepolygon' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$points',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num_points',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagepolygon',
  ),
  'imagepsbbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$font',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$space',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tightness',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imagepsbbox',
  ),
  'imagepsencodefont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$font_index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encodingfile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagepsencodefont',
  ),
  'imagepsextendfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$font_index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$extend',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagepsextendfont',
  ),
  'imagepsfreefont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$font_index',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagepsfreefont',
  ),
  'imagepsloadfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagepsloadfont',
  ),
  'imagepsslantfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$font_index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$slant',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagepsslantfont',
  ),
  'imagepstext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$font_index',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$foreground',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$background',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$space',
        'initializer' => '= 0',
        'required' => false,
      ),
      9 => 
      array (
        'type' => 'int',
        'name' => '$tightness',
        'initializer' => '= 0',
        'required' => false,
      ),
      10 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'initializer' => '= 0.0',
        'required' => false,
      ),
      11 => 
      array (
        'type' => 'int',
        'name' => '$antialias_steps',
        'initializer' => '= 4',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imagepstext',
  ),
  'imagerectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagerectangle',
  ),
  'imagerotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$bgd_color',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$ignore_transparent',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagerotate',
  ),
  'imagesavealpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$saveflag',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagesavealpha',
  ),
  'imagescale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$new_width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$new_height',
        'initializer' => '= -1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= IMG_BILINEAR_FIXED',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'imagescale',
  ),
  'imagesetbrush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$brush',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagesetbrush',
  ),
  'imagesetinterpolation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'initializer' => '= IMG_BILINEAR_FIXED',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagesetinterpolation',
  ),
  'imagesetpixel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagesetpixel',
  ),
  'imagesetstyle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$style',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagesetstyle',
  ),
  'imagesetthickness' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$thickness',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagesetthickness',
  ),
  'imagesettile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$tile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagesettile',
  ),
  'imagestring' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagestring',
  ),
  'imagestringup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagestringup',
  ),
  'imagesx' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagesx',
  ),
  'imagesy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imagesy',
  ),
  'imagetruecolortopalette' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$ncolors',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagetruecolortopalette',
  ),
  'imagettfbbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$fontfile',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imagettfbbox',
  ),
  'imagettftext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$fontfile',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imagettftext',
  ),
  'imagetypes' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'imagetypes',
  ),
  'imagewbmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$foreground',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagewbmp',
  ),
  'imagewebp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagewebp',
  ),
  'imagexbm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$foreground',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imagexbm',
  ),
  'iptcembed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$iptcdata',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$jpeg_file_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$spool',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'iptcembed',
  ),
  'iptcparse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$iptcblock',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'iptcparse',
  ),
  'jpeg2wbmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$jpegname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$wbmpname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dest_height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dest_width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'jpeg2wbmp',
  ),
  'png2wbmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pngname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$wbmpname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dest_height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$dest_width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'png2wbmp',
  ),
  'addimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Gmagick',
        'name' => '$Gmagick',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'addimage',
  ),
  'addnoiseimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$NOISE',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'addnoiseimage',
  ),
  'annotateimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickDraw',
        'name' => '$GmagickDraw',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'annotateimage',
  ),
  'blurimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'blurimage',
  ),
  'borderimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickPixel',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'borderimage',
  ),
  'charcoalimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'charcoalimage',
  ),
  'chopimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'chopimage',
  ),
  'commentimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'commentimage',
  ),
  'compositeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Gmagick',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$COMPOSE',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'compositeimage',
  ),
  'cropimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'cropimage',
  ),
  'cropthumbnailimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'cropthumbnailimage',
  ),
  'cyclecolormapimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$displace',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'cyclecolormapimage',
  ),
  'deconstructimages' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'deconstructimages',
  ),
  'despeckleimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'despeckleimage',
  ),
  'destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session_id',
        'required' => true,
      ),
    ),
    'modifier' => 'abstract',
    'type' => 'bool',
    'name' => 'destroy',
  ),
  'drawimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickDraw',
        'name' => '$GmagickDraw',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'drawimage',
  ),
  'edgeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'edgeimage',
  ),
  'embossimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'embossimage',
  ),
  'enhanceimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'enhanceimage',
  ),
  'equalizeimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'equalizeimage',
  ),
  'flipimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'flipimage',
  ),
  'flopimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'flopimage',
  ),
  'frameimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickPixel',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$inner_bevel',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$outer_bevel',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'frameimage',
  ),
  'gammaimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$gamma',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'gammaimage',
  ),
  'getcopyright' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getcopyright',
  ),
  'getfilename' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getfilename',
  ),
  'getimagebackgroundcolor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getimagebackgroundcolor',
  ),
  'getimageblueprimary' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getimageblueprimary',
  ),
  'getimagebordercolor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getimagebordercolor',
  ),
  'getimagechanneldepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel_type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagechanneldepth',
  ),
  'getimagecolors' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagecolors',
  ),
  'getimagecolorspace' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagecolorspace',
  ),
  'getimagecompose' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagecompose',
  ),
  'getimagedelay' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagedelay',
  ),
  'getimagedepth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagedepth',
  ),
  'getimagedispose' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagedispose',
  ),
  'getimageextrema' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getimageextrema',
  ),
  'getimagefilename' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getimagefilename',
  ),
  'getimageformat' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getimageformat',
  ),
  'getimagegamma' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getimagegamma',
  ),
  'getimagegreenprimary' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getimagegreenprimary',
  ),
  'getimageheight' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimageheight',
  ),
  'getimagehistogram' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getimagehistogram',
  ),
  'getimageindex' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimageindex',
  ),
  'getimageinterlacescheme' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimageinterlacescheme',
  ),
  'getimageiterations' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimageiterations',
  ),
  'getimagematte' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagematte',
  ),
  'getimagemattecolor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getimagemattecolor',
  ),
  'getimageprofile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getimageprofile',
  ),
  'getimageredprimary' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getimageredprimary',
  ),
  'getimagerenderingintent' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagerenderingintent',
  ),
  'getimageresolution' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getimageresolution',
  ),
  'getimagescene' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagescene',
  ),
  'getimagesignature' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getimagesignature',
  ),
  'getimagetype' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagetype',
  ),
  'getimageunits' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimageunits',
  ),
  'getimagewhitepoint' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getimagewhitepoint',
  ),
  'getimagewidth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getimagewidth',
  ),
  'getpackagename' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getpackagename',
  ),
  'getquantumdepth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getquantumdepth',
  ),
  'getreleasedate' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getreleasedate',
  ),
  'getsamplingfactors' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getsamplingfactors',
  ),
  'getsize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getsize',
  ),
  'getversion' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getversion',
  ),
  'hasnextimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'hasnextimage',
  ),
  'haspreviousimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'haspreviousimage',
  ),
  'implodeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'implodeimage',
  ),
  'labelimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$label',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'labelimage',
  ),
  'levelimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$blackPoint',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$gamma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$whitePoint',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Gmagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'levelimage',
  ),
  'magnifyimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'magnifyimage',
  ),
  'mapimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'gmagick',
        'name' => '$gmagick',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'mapimage',
  ),
  'medianfilterimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'medianfilterimage',
  ),
  'minifyimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'minifyimage',
  ),
  'modulateimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$brightness',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$saturation',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$hue',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'modulateimage',
  ),
  'motionblurimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'motionblurimage',
  ),
  'newimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$background',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'newimage',
  ),
  'nextimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'nextimage',
  ),
  'normalizeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'normalizeimage',
  ),
  'oilpaintimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'oilpaintimage',
  ),
  'previousimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'previousimage',
  ),
  'profileimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$profile',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'profileimage',
  ),
  'quantizeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$numColors',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$colorspace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$treeDepth',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$measureError',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'quantizeimage',
  ),
  'quantizeimages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$numColors',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$colorspace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$treeDepth',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$measureError',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'quantizeimages',
  ),
  'queryfontmetrics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickDraw',
        'name' => '$draw',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'queryfontmetrics',
  ),
  'queryfonts' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'initializer' => '= "*"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'queryfonts',
  ),
  'queryformats' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'initializer' => '= "*"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'queryformats',
  ),
  'radialblurimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Gmagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'radialblurimage',
  ),
  'raiseimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$raise',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'raiseimage',
  ),
  'readimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'readimage',
  ),
  'readimageblob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$imageContents',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'readimageblob',
  ),
  'readimagefile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'readimagefile',
  ),
  'reducenoiseimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'reducenoiseimage',
  ),
  'removeimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'removeimage',
  ),
  'removeimageprofile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'removeimageprofile',
  ),
  'resampleimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$xResolution',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$yResolution',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blur',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'resampleimage',
  ),
  'resizeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blur',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$fit',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'resizeimage',
  ),
  'rollimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'rollimage',
  ),
  'rotateimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$degrees',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'rotateimage',
  ),
  'scaleimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$fit',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'scaleimage',
  ),
  'separateimagechannel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'separateimagechannel',
  ),
  'setfilename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setfilename',
  ),
  'setimagebackgroundcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickPixel',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagebackgroundcolor',
  ),
  'setimageblueprimary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageblueprimary',
  ),
  'setimagebordercolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickPixel',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagebordercolor',
  ),
  'setimagechanneldepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagechanneldepth',
  ),
  'setimagecolorspace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$colorspace',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagecolorspace',
  ),
  'setimagecompose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$composite',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagecompose',
  ),
  'setimagedelay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$delay',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagedelay',
  ),
  'setimagedepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagedepth',
  ),
  'setimagedispose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$disposeType',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagedispose',
  ),
  'setimagefilename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagefilename',
  ),
  'setimageformat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$imageFormat',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageformat',
  ),
  'setimagegamma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$gamma',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagegamma',
  ),
  'setimagegreenprimary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagegreenprimary',
  ),
  'setimageindex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageindex',
  ),
  'setimageinterlacescheme' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$interlace',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageinterlacescheme',
  ),
  'setimageiterations' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$iterations',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageiterations',
  ),
  'setimageprofile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$profile',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageprofile',
  ),
  'setimageredprimary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageredprimary',
  ),
  'setimagerenderingintent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$rendering_intent',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagerenderingintent',
  ),
  'setimageresolution' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$xResolution',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$yResolution',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageresolution',
  ),
  'setimagescene' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$scene',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagescene',
  ),
  'setimagetype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$imgType',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagetype',
  ),
  'setimageunits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$resolution',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimageunits',
  ),
  'setimagewhitepoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setimagewhitepoint',
  ),
  'setsamplingfactors' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$factors',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setsamplingfactors',
  ),
  'setsize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'setsize',
  ),
  'shearimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$xShear',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$yShear',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'shearimage',
  ),
  'solarizeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'solarizeimage',
  ),
  'spreadimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'spreadimage',
  ),
  'stripimage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'stripimage',
  ),
  'swirlimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$degrees',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'swirlimage',
  ),
  'thumbnailimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$fit',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'thumbnailimage',
  ),
  'trimimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'trimimage',
  ),
  'writeimage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$all_frames',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Gmagick',
    'name' => 'writeimage',
  ),
  'annotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'annotate',
  ),
  'bezier' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$coordinates',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bezier',
  ),
  'ellipse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$xray',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$yray',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ellipse',
  ),
  'getfillcolor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getfillcolor',
  ),
  'getfillopacity' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getfillopacity',
  ),
  'getfont' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getfont',
  ),
  'getfontsize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getfontsize',
  ),
  'getfontstyle' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getfontstyle',
  ),
  'getfontweight' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getfontweight',
  ),
  'getstrokecolor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getstrokecolor',
  ),
  'getstrokeopacity' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getstrokeopacity',
  ),
  'getstrokewidth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getstrokewidth',
  ),
  'gettextdecoration' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'gettextdecoration',
  ),
  'gettextencoding' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'gettextencoding',
  ),
  'line' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$sx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sy',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$ex',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$ey',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'line',
  ),
  'point' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'point',
  ),
  'polygon' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$coordinates',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'polygon',
  ),
  'polyline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$coordinates',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'polyline',
  ),
  'roundrectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$rx',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$ry',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'roundrectangle',
  ),
  'setfillcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setfillcolor',
  ),
  'setfillopacity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$fill_opacity',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setfillopacity',
  ),
  'setfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$font',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setfont',
  ),
  'setfontsize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$pointsize',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setfontsize',
  ),
  'setfontstyle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$style',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setfontstyle',
  ),
  'setfontweight' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$weight',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setfontweight',
  ),
  'setstrokecolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GmagickPixel',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setstrokecolor',
  ),
  'setstrokeopacity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$stroke_opacity',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setstrokeopacity',
  ),
  'setstrokewidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'setstrokewidth',
  ),
  'settextdecoration' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$decoration',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'settextdecoration',
  ),
  'settextencoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickDraw',
    'name' => 'settextencoding',
  ),
  'getcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$as_array',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$normalize_array',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getcolor',
  ),
  'getcolorcount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getcolorcount',
  ),
  'getcolorvalue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getcolorvalue',
  ),
  'setcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickPixel',
    'name' => 'setcolor',
  ),
  'setcolorvalue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GmagickPixel',
    'name' => 'setcolorvalue',
  ),
  'adaptiveBlurImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'adaptiveBlurImage',
  ),
  'adaptiveResizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$bestfit',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'adaptiveResizeImage',
  ),
  'adaptiveSharpenImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'adaptiveSharpenImage',
  ),
  'adaptiveThresholdImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'adaptiveThresholdImage',
  ),
  'addImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'addImage',
  ),
  'addNoiseImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$noise_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'addNoiseImage',
  ),
  'affineTransformImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickDraw',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'affineTransformImage',
  ),
  'animateImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$x_server',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'animateImages',
  ),
  'annotateImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickDraw',
        'name' => '$draw_settings',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'annotateImage',
  ),
  'appendImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$stack',
        'initializer' => '= false',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'appendImages',
  ),
  'averageImages' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Imagick',
    'name' => 'averageImages',
  ),
  'blackThresholdImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'blackThresholdImage',
  ),
  'blurImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'blurImage',
  ),
  'borderImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$bordercolor',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'borderImage',
  ),
  'charcoalImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'charcoalImage',
  ),
  'chopImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'chopImage',
  ),
  'clipImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'clipImage',
  ),
  'clipPathImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$inside',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'clipPathImage',
  ),
  'clone' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'clone',
  ),
  'clutImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$lookup_table',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'clutImage',
  ),
  'coalesceImages' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Imagick',
    'name' => 'coalesceImages',
  ),
  'colorFloodfillImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fill',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$bordercolor',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'colorFloodfillImage',
  ),
  'colorizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$colorize',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$opacity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'colorizeImage',
  ),
  'combineImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channelType',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'combineImages',
  ),
  'commentImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'commentImage',
  ),
  'compareImageChannels' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channelType',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$metricType',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'compareImageChannels',
  ),
  'compareImageLayers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'compareImageLayers',
  ),
  'compareImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$compare',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$metric',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'compareImages',
  ),
  'compositeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$composite_object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$composite',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'compositeImage',
  ),
  'contrastImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$sharpen',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'contrastImage',
  ),
  'contrastStretchImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$black_point',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$white_point',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'contrastStretchImage',
  ),
  'convolveImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$kernel',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'convolveImage',
  ),
  'cropImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cropImage',
  ),
  'cropThumbnailImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cropThumbnailImage',
  ),
  'cycleColormapImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$displace',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cycleColormapImage',
  ),
  'decipherImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'decipherImage',
  ),
  'deconstructImages' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Imagick',
    'name' => 'deconstructImages',
  ),
  'deleteImageArtifact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$artifact',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'deleteImageArtifact',
  ),
  'deskewImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'deskewImage',
  ),
  'despeckleImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'despeckleImage',
  ),
  'displayImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servername',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'displayImage',
  ),
  'displayImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servername',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'displayImages',
  ),
  'distortImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arguments',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$bestfit',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'distortImage',
  ),
  'drawImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'drawImage',
  ),
  'edgeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'edgeImage',
  ),
  'embossImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'embossImage',
  ),
  'encipherImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'encipherImage',
  ),
  'enhanceImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'enhanceImage',
  ),
  'equalizeImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'equalizeImage',
  ),
  'evaluateImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$op',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$constant',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'evaluateImage',
  ),
  'exportImagePixels' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$STORAGE',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'exportImagePixels',
  ),
  'extentImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'extentImage',
  ),
  'flattenImages' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Imagick',
    'name' => 'flattenImages',
  ),
  'flipImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'flipImage',
  ),
  'floodFillPaintImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fill',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$target',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$invert',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'floodFillPaintImage',
  ),
  'flopImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'flopImage',
  ),
  'frameImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$matte_color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$inner_bevel',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$outer_bevel',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'frameImage',
  ),
  'functionImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arguments',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'functionImage',
  ),
  'fxImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$expression',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'fxImage',
  ),
  'gammaImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$gamma',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gammaImage',
  ),
  'gaussianBlurImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gaussianBlurImage',
  ),
  'getColorspace' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getColorspace',
  ),
  'getCompression' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getCompression',
  ),
  'getCompressionQuality' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getCompressionQuality',
  ),
  'getCopyright' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getCopyright',
  ),
  'getFont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fontname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'getFont',
  ),
  'getGravity' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getGravity',
  ),
  'getHomeURL' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getHomeURL',
  ),
  'getImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Imagick',
    'name' => 'getImage',
  ),
  'getImageAlphaChannel' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageAlphaChannel',
  ),
  'getImageArtifact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$artifact',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getImageArtifact',
  ),
  'getImageBackgroundColor' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'ImagickPixel',
    'name' => 'getImageBackgroundColor',
  ),
  'getImageBlob' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getImageBlob',
  ),
  'getImageBluePrimary' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageBluePrimary',
  ),
  'getImageBorderColor' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'ImagickPixel',
    'name' => 'getImageBorderColor',
  ),
  'getImageChannelDepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getImageChannelDepth',
  ),
  'getImageChannelDistortion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$reference',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$metric',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'getImageChannelDistortion',
  ),
  'getImageChannelDistortions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$reference',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$metric',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'getImageChannelDistortions',
  ),
  'getImageChannelExtrema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'getImageChannelExtrema',
  ),
  'getImageChannelKurtosis' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getImageChannelKurtosis',
  ),
  'getImageChannelMean' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'getImageChannelMean',
  ),
  'getImageChannelRange' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'getImageChannelRange',
  ),
  'getImageChannelStatistics' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageChannelStatistics',
  ),
  'getImageClipMask' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Imagick',
    'name' => 'getImageClipMask',
  ),
  'getImageColormapColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'ImagickPixel',
    'name' => 'getImageColormapColor',
  ),
  'getImageColors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageColors',
  ),
  'getImageColorspace' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageColorspace',
  ),
  'getImageCompose' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageCompose',
  ),
  'getImageCompression' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageCompression',
  ),
  'getImageCompressionQuality' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageCompressionQuality',
  ),
  'getImageDelay' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageDelay',
  ),
  'getImageDepth' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageDepth',
  ),
  'getImageDispose' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageDispose',
  ),
  'getImageDistortion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'MagickWand',
        'name' => '$reference',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$metric',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'getImageDistortion',
  ),
  'getImageExtrema' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageExtrema',
  ),
  'getImageFilename' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getImageFilename',
  ),
  'getImageFormat' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getImageFormat',
  ),
  'getImageGamma' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getImageGamma',
  ),
  'getImageGeometry' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageGeometry',
  ),
  'getImageGravity' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageGravity',
  ),
  'getImageGreenPrimary' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageGreenPrimary',
  ),
  'getImageHeight' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageHeight',
  ),
  'getImageHistogram' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageHistogram',
  ),
  'getImageIndex' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageIndex',
  ),
  'getImageInterlaceScheme' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageInterlaceScheme',
  ),
  'getImageInterpolateMethod' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageInterpolateMethod',
  ),
  'getImageIterations' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageIterations',
  ),
  'getImageLength' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageLength',
  ),
  'getImageMagickLicense' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getImageMagickLicense',
  ),
  'getImageMatte' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'getImageMatte',
  ),
  'getImageMatteColor' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'ImagickPixel',
    'name' => 'getImageMatteColor',
  ),
  'getImageOrientation' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageOrientation',
  ),
  'getImagePage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImagePage',
  ),
  'getImagePixelColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'ImagickPixel',
    'name' => 'getImagePixelColor',
  ),
  'getImageProfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getImageProfile',
  ),
  'getImageProfiles' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'initializer' => '= "*"',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$only_names',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getImageProfiles',
  ),
  'getImageProperties' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'initializer' => '= "*"',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$only_names',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getImageProperties',
  ),
  'getImageProperty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getImageProperty',
  ),
  'getImageRedPrimary' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageRedPrimary',
  ),
  'getImageRegion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'getImageRegion',
  ),
  'getImageRenderingIntent' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageRenderingIntent',
  ),
  'getImageResolution' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageResolution',
  ),
  'getImagesBlob' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getImagesBlob',
  ),
  'getImageScene' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageScene',
  ),
  'getImageSignature' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getImageSignature',
  ),
  'getImageSize' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageSize',
  ),
  'getImageTicksPerSecond' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageTicksPerSecond',
  ),
  'getImageTotalInkDensity' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getImageTotalInkDensity',
  ),
  'getImageType' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageType',
  ),
  'getImageUnits' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageUnits',
  ),
  'getImageVirtualPixelMethod' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageVirtualPixelMethod',
  ),
  'getImageWhitePoint' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getImageWhitePoint',
  ),
  'getImageWidth' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getImageWidth',
  ),
  'getInterlaceScheme' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getInterlaceScheme',
  ),
  'getIteratorIndex' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getIteratorIndex',
  ),
  'getNumberImages' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getNumberImages',
  ),
  'getOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getOption',
  ),
  'getPackageName' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getPackageName',
  ),
  'getPage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getPage',
  ),
  'getPixelIterator' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'ImagickPixelIterator',
    'name' => 'getPixelIterator',
  ),
  'getPixelRegionIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'type' => 'ImagickPixelIterator',
    'name' => 'getPixelRegionIterator',
  ),
  'getPointSize' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getPointSize',
  ),
  'getQuantumDepth' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getQuantumDepth',
  ),
  'getQuantumRange' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getQuantumRange',
  ),
  'getReleaseDate' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getReleaseDate',
  ),
  'getResourceLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getResourceLimit',
  ),
  'getSamplingFactors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getSamplingFactors',
  ),
  'getSizeOffset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getSizeOffset',
  ),
  'haldClutImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$clut',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'haldClutImage',
  ),
  'hasNextImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'hasNextImage',
  ),
  'hasPreviousImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'hasPreviousImage',
  ),
  'identifyImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$appendRawOutput',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'identifyImage',
  ),
  'implodeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'implodeImage',
  ),
  'importImagePixels' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$storage',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'array',
        'name' => '$pixels',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'importImagePixels',
  ),
  'labelImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$label',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'labelImage',
  ),
  'levelImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$blackPoint',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$gamma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$whitePoint',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'levelImage',
  ),
  'linearStretchImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$blackPoint',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$whitePoint',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'linearStretchImage',
  ),
  'liquidRescaleImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$delta_x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$rigidity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'liquidRescaleImage',
  ),
  'magnifyImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'magnifyImage',
  ),
  'mapImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$map',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mapImage',
  ),
  'matteFloodfillImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$bordercolor',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'matteFloodfillImage',
  ),
  'medianFilterImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'medianFilterImage',
  ),
  'mergeImageLayers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$layer_method',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mergeImageLayers',
  ),
  'minifyImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'minifyImage',
  ),
  'modulateImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$brightness',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$saturation',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$hue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'modulateImage',
  ),
  'montageImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickDraw',
        'name' => '$draw',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tile_geometry',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$thumbnail_geometry',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$frame',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'montageImage',
  ),
  'morphImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$number_frames',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'morphImages',
  ),
  'mosaicImages' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'Imagick',
    'name' => 'mosaicImages',
  ),
  'motionBlurImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'motionBlurImage',
  ),
  'negateImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$gray',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'negateImage',
  ),
  'newImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$cols',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$background',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'newImage',
  ),
  'newPseudoImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pseudoString',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'newPseudoImage',
  ),
  'nextImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'nextImage',
  ),
  'normalizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'normalizeImage',
  ),
  'oilPaintImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'oilPaintImage',
  ),
  'opaquePaintImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$target',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$fill',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$invert',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'opaquePaintImage',
  ),
  'optimizeImageLayers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'optimizeImageLayers',
  ),
  'orderedPosterizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$threshold_map',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'orderedPosterizeImage',
  ),
  'paintFloodfillImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fill',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$bordercolor',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'paintFloodfillImage',
  ),
  'paintOpaqueImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$target',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$fill',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'paintOpaqueImage',
  ),
  'paintTransparentImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$target',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'paintTransparentImage',
  ),
  'pingImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pingImage',
  ),
  'pingImageBlob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pingImageBlob',
  ),
  'pingImageFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fileName',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pingImageFile',
  ),
  'polaroidImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickDraw',
        'name' => '$properties',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'polaroidImage',
  ),
  'posterizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$levels',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posterizeImage',
  ),
  'previewImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$preview',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'previewImages',
  ),
  'previousImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'previousImage',
  ),
  'profileImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$profile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'profileImage',
  ),
  'quantizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$numberColors',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$colorspace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$treedepth',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$measureError',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'quantizeImage',
  ),
  'quantizeImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$numberColors',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$colorspace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$treedepth',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$dither',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$measureError',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'quantizeImages',
  ),
  'queryFontMetrics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickDraw',
        'name' => '$properties',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$multiline',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'queryFontMetrics',
  ),
  'queryFonts' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'initializer' => '= "*"',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'queryFonts',
  ),
  'queryFormats' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'initializer' => '= "*"',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'queryFormats',
  ),
  'radialBlurImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'radialBlurImage',
  ),
  'raiseImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$raise',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'raiseImage',
  ),
  'randomThresholdImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$low',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'randomThresholdImage',
  ),
  'readImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'readImage',
  ),
  'readImageBlob' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$image',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'readImageBlob',
  ),
  'readImageFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fileName',
        'initializer' => '= null',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'readImageFile',
  ),
  'recolorImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$matrix',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'recolorImage',
  ),
  'reduceNoiseImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'reduceNoiseImage',
  ),
  'remapImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$replacement',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$DITHER',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'remapImage',
  ),
  'removeImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'removeImage',
  ),
  'removeImageProfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'removeImageProfile',
  ),
  'render' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$tpl',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tpl_vars',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'render',
  ),
  'resampleImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x_resolution',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y_resolution',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blur',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'resampleImage',
  ),
  'resetImagePage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$page',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'resetImagePage',
  ),
  'resizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blur',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$bestfit',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'resizeImage',
  ),
  'rollImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rollImage',
  ),
  'rotateImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$background',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$degrees',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rotateImage',
  ),
  'roundCorners' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x_rounding',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y_rounding',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$stroke_width',
        'initializer' => '= 10',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$displace',
        'initializer' => '= 5',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$size_correction',
        'initializer' => '= -6',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'roundCorners',
  ),
  'sampleImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sampleImage',
  ),
  'scaleImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$cols',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$bestfit',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'scaleImage',
  ),
  'segmentImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$COLORSPACE',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$cluster_threshold',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$smooth_threshold',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$verbose',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'segmentImage',
  ),
  'separateImageChannel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'separateImageChannel',
  ),
  'sepiaToneImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sepiaToneImage',
  ),
  'setBackgroundColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$background',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setBackgroundColor',
  ),
  'setColorspace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$COLORSPACE',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setColorspace',
  ),
  'setCompression' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compression',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCompression',
  ),
  'setCompressionQuality' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$quality',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCompressionQuality',
  ),
  'setFilename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFilename',
  ),
  'setFirstIterator' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'setFirstIterator',
  ),
  'setFont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFFont',
        'name' => '$font',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setFont',
  ),
  'setFormat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFormat',
  ),
  'setGravity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$gravity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setGravity',
  ),
  'setImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$replace',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImage',
  ),
  'setImageAlphaChannel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageAlphaChannel',
  ),
  'setImageArtifact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$artifact',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageArtifact',
  ),
  'setImageBackgroundColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$background',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageBackgroundColor',
  ),
  'setImageBias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$bias',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageBias',
  ),
  'setImageBluePrimary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageBluePrimary',
  ),
  'setImageBorderColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$border',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageBorderColor',
  ),
  'setImageChannelDepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageChannelDepth',
  ),
  'setImageClipMask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$clip_mask',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageClipMask',
  ),
  'setImageColormapColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'ImagickPixel',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageColormapColor',
  ),
  'setImageColorspace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$colorspace',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageColorspace',
  ),
  'setImageCompose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compose',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageCompose',
  ),
  'setImageCompression' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compression',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageCompression',
  ),
  'setImageCompressionQuality' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$quality',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageCompressionQuality',
  ),
  'setImageDelay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$delay',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageDelay',
  ),
  'setImageDepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageDepth',
  ),
  'setImageDispose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$dispose',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageDispose',
  ),
  'setImageExtent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageExtent',
  ),
  'setImageFilename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageFilename',
  ),
  'setImageFormat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageFormat',
  ),
  'setImageGamma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$gamma',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageGamma',
  ),
  'setImageGravity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$gravity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageGravity',
  ),
  'setImageGreenPrimary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageGreenPrimary',
  ),
  'setImageIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageIndex',
  ),
  'setImageInterlaceScheme' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$interlace_scheme',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageInterlaceScheme',
  ),
  'setImageInterpolateMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageInterpolateMethod',
  ),
  'setImageIterations' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$iterations',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageIterations',
  ),
  'setImageMatte' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$matte',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageMatte',
  ),
  'setImageMatteColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$matte',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageMatteColor',
  ),
  'setImageOpacity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$opacity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageOpacity',
  ),
  'setImageOrientation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$orientation',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageOrientation',
  ),
  'setImagePage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImagePage',
  ),
  'setImageProfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$profile',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageProfile',
  ),
  'setImageProperty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageProperty',
  ),
  'setImageRedPrimary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageRedPrimary',
  ),
  'setImageRenderingIntent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$rendering_intent',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageRenderingIntent',
  ),
  'setImageResolution' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x_resolution',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y_resolution',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageResolution',
  ),
  'setImageScene' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$scene',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageScene',
  ),
  'setImageTicksPerSecond' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$ticks_per_second',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageTicksPerSecond',
  ),
  'setImageType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$image_type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageType',
  ),
  'setImageUnits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$units',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageUnits',
  ),
  'setImageVirtualPixelMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageVirtualPixelMethod',
  ),
  'setImageWhitePoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setImageWhitePoint',
  ),
  'setInterlaceScheme' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$interlace_scheme',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setInterlaceScheme',
  ),
  'setIteratorIndex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setIteratorIndex',
  ),
  'setLastIterator' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'setLastIterator',
  ),
  'setOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setOption',
  ),
  'setPage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setPage',
  ),
  'setPointSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$point_size',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setPointSize',
  ),
  'setResolution' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x_resolution',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y_resolution',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setResolution',
  ),
  'setResourceLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setResourceLimit',
  ),
  'setSamplingFactors' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$factors',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setSamplingFactors',
  ),
  'setSizeOffset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setSizeOffset',
  ),
  'shadeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$gray',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$azimuth',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$elevation',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shadeImage',
  ),
  'shadowImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$opacity',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shadowImage',
  ),
  'sharpenImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'sharpenImage',
  ),
  'shaveImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shaveImage',
  ),
  'shearImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$background',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x_shear',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y_shear',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shearImage',
  ),
  'sigmoidalContrastImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$sharpen',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$beta',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'sigmoidalContrastImage',
  ),
  'sketchImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sketchImage',
  ),
  'solarizeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'solarizeImage',
  ),
  'sparseColorImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$SPARSE_METHOD',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arguments',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_DEFAULT',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sparseColorImage',
  ),
  'spliceImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'spliceImage',
  ),
  'spreadImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'spreadImage',
  ),
  'steganoImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$watermark_wand',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'steganoImage',
  ),
  'stereoImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$offset_wand',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stereoImage',
  ),
  'stripImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'stripImage',
  ),
  'swirlImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$degrees',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'swirlImage',
  ),
  'textureImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$texture_wand',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'textureImage',
  ),
  'thresholdImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$threshold',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'thresholdImage',
  ),
  'thumbnailImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$bestfit',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$fill',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'thumbnailImage',
  ),
  'tintImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$tint',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$opacity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tintImage',
  ),
  'transformImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$crop',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$geometry',
        'required' => true,
      ),
    ),
    'type' => 'Imagick',
    'name' => 'transformImage',
  ),
  'transparentPaintImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$target',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$invert',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'transparentPaintImage',
  ),
  'transposeImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'transposeImage',
  ),
  'transverseImage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'transverseImage',
  ),
  'trimImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'trimImage',
  ),
  'uniqueImageColors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'uniqueImageColors',
  ),
  'unsharpMaskImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sigma',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$amount',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$threshold',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$channel',
        'initializer' => '= Imagick::CHANNEL_ALL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'unsharpMaskImage',
  ),
  'vignetteImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$blackPoint',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$whitePoint',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vignetteImage',
  ),
  'waveImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$amplitude',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$length',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'waveImage',
  ),
  'whiteThresholdImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'whiteThresholdImage',
  ),
  'writeImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'writeImage',
  ),
  'writeImageFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'writeImageFile',
  ),
  'writeImages' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$adjoin',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'writeImages',
  ),
  'writeImagesFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$filehandle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'writeImagesFile',
  ),
  'affine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$affine',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'affine',
  ),
  'annotation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'annotation',
  ),
  'circle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$ray',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'circle',
  ),
  'color' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$paintMethod',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'color',
  ),
  'comment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'comment',
  ),
  'composite' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compose',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'Imagick',
        'name' => '$compositeWand',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'composite',
  ),
  'getClipPath' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getClipPath',
  ),
  'getClipRule' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getClipRule',
  ),
  'getClipUnits' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getClipUnits',
  ),
  'getFillColor' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'ImagickPixel',
    'name' => 'getFillColor',
  ),
  'getFillOpacity' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getFillOpacity',
  ),
  'getFontFamily' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getFontFamily',
  ),
  'getFontSize' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getFontSize',
  ),
  'getFontStyle' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getFontStyle',
  ),
  'getFontWeight' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getFontWeight',
  ),
  'getStrokeAntialias' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'getStrokeAntialias',
  ),
  'getStrokeColor' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'ImagickPixel',
    'name' => 'getStrokeColor',
  ),
  'getStrokeDashArray' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getStrokeDashArray',
  ),
  'getStrokeDashOffset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getStrokeDashOffset',
  ),
  'getStrokeLineCap' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getStrokeLineCap',
  ),
  'getStrokeLineJoin' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getStrokeLineJoin',
  ),
  'getStrokeMiterLimit' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getStrokeMiterLimit',
  ),
  'getStrokeOpacity' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getStrokeOpacity',
  ),
  'getStrokeWidth' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getStrokeWidth',
  ),
  'getTextAlignment' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getTextAlignment',
  ),
  'getTextAntialias' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'getTextAntialias',
  ),
  'getTextDecoration' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getTextDecoration',
  ),
  'getTextEncoding' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getTextEncoding',
  ),
  'getTextUnderColor' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'ImagickPixel',
    'name' => 'getTextUnderColor',
  ),
  'getVectorGraphics' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getVectorGraphics',
  ),
  'matte' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$paintMethod',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'matte',
  ),
  'pathClose' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'pathClose',
  ),
  'pathCurveToAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToAbsolute',
  ),
  'pathCurveToQuadraticBezierAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToQuadraticBezierAbsolute',
  ),
  'pathCurveToQuadraticBezierRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToQuadraticBezierRelative',
  ),
  'pathCurveToQuadraticBezierSmoothAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToQuadraticBezierSmoothAbsolute',
  ),
  'pathCurveToQuadraticBezierSmoothRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToQuadraticBezierSmoothRelative',
  ),
  'pathCurveToRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToRelative',
  ),
  'pathCurveToSmoothAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToSmoothAbsolute',
  ),
  'pathCurveToSmoothRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathCurveToSmoothRelative',
  ),
  'pathEllipticArcAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$rx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ry',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x_axis_rotation',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$large_arc_flag',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$sweep_flag',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathEllipticArcAbsolute',
  ),
  'pathEllipticArcRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$rx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ry',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x_axis_rotation',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$large_arc_flag',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$sweep_flag',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathEllipticArcRelative',
  ),
  'pathFinish' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'pathFinish',
  ),
  'pathLineToAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathLineToAbsolute',
  ),
  'pathLineToHorizontalAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathLineToHorizontalAbsolute',
  ),
  'pathLineToHorizontalRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathLineToHorizontalRelative',
  ),
  'pathLineToRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathLineToRelative',
  ),
  'pathLineToVerticalAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathLineToVerticalAbsolute',
  ),
  'pathLineToVerticalRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathLineToVerticalRelative',
  ),
  'pathMoveToAbsolute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathMoveToAbsolute',
  ),
  'pathMoveToRelative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pathMoveToRelative',
  ),
  'pathStart' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'pathStart',
  ),
  'pop' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'pop',
  ),
  'popClipPath' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'popClipPath',
  ),
  'popDefs' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'popDefs',
  ),
  'popPattern' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'popPattern',
  ),
  'push' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'push',
  ),
  'pushClipPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clip_mask_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pushClipPath',
  ),
  'pushDefs' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'pushDefs',
  ),
  'pushPattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pushPattern',
  ),
  'roundRectangle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$rx',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$ry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'roundRectangle',
  ),
  'setClipPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clip_mask',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setClipPath',
  ),
  'setClipRule' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fill_rule',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setClipRule',
  ),
  'setClipUnits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$clip_units',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setClipUnits',
  ),
  'setFillAlpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$opacity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFillAlpha',
  ),
  'setFillColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickPixel',
        'name' => '$fill_pixel',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFillColor',
  ),
  'setFillOpacity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$fillOpacity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFillOpacity',
  ),
  'setFillPatternURL' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fill_url',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFillPatternURL',
  ),
  'setFontFamily' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$font_family',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFontFamily',
  ),
  'setFontStretch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fontStretch',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFontStretch',
  ),
  'setFontStyle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$style',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFontStyle',
  ),
  'setFontWeight' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$font_weight',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFontWeight',
  ),
  'setStrokeAlpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$opacity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeAlpha',
  ),
  'setStrokeAntialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$stroke_antialias',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeAntialias',
  ),
  'setStrokeColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickPixel',
        'name' => '$stroke_pixel',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeColor',
  ),
  'setStrokeDashArray' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$dashArray',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeDashArray',
  ),
  'setStrokeDashOffset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$dash_offset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeDashOffset',
  ),
  'setStrokeLineCap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$linecap',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeLineCap',
  ),
  'setStrokeLineJoin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$linejoin',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeLineJoin',
  ),
  'setStrokeMiterLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$miterlimit',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeMiterLimit',
  ),
  'setStrokeOpacity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$stroke_opacity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeOpacity',
  ),
  'setStrokePatternURL' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$stroke_url',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokePatternURL',
  ),
  'setStrokeWidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$stroke_width',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setStrokeWidth',
  ),
  'setTextAlignment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$alignment',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextAlignment',
  ),
  'setTextAntialias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$antiAlias',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextAntialias',
  ),
  'setTextDecoration' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$decoration',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextDecoration',
  ),
  'setTextEncoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextEncoding',
  ),
  'setTextUnderColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickPixel',
        'name' => '$under_color',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextUnderColor',
  ),
  'setVectorGraphics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$xml',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setVectorGraphics',
  ),
  'setViewbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$x2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$y2',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setViewbox',
  ),
  'skewX' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$ddegrees',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'skewX',
  ),
  'skewY' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$ddegrees',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'skewY',
  ),
  'getColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$normalized',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getColor',
  ),
  'getColorAsString' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getColorAsString',
  ),
  'getColorCount' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getColorCount',
  ),
  'getColorValue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'getColorValue',
  ),
  'getHSL' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getHSL',
  ),
  'isPixelSimilar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickPixel',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'isPixelSimilar',
  ),
  'isSimilar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'ImagickPixel',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fuzz',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'isSimilar',
  ),
  'setColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$a',
        'initializer' => '= 255',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'setColor',
  ),
  'setColorValue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$color',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setColorValue',
  ),
  'setHSL' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$hue',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$saturation',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$luminosity',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setHSL',
  ),
  'getCurrentIteratorRow' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getCurrentIteratorRow',
  ),
  'getIteratorRow' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getIteratorRow',
  ),
  'getNextIteratorRow' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getNextIteratorRow',
  ),
  'getPreviousIteratorRow' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getPreviousIteratorRow',
  ),
  'newPixelIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$wand',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'newPixelIterator',
  ),
  'newPixelRegionIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Imagick',
        'name' => '$wand',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$columns',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'newPixelRegionIterator',
  ),
  'resetIterator' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'resetIterator',
  ),
  'setIteratorFirstRow' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'setIteratorFirstRow',
  ),
  'setIteratorLastRow' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'setIteratorLastRow',
  ),
  'setIteratorRow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setIteratorRow',
  ),
  'syncIterator' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'syncIterator',
  ),
  'cyrus_authenticate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mechlist',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$service',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$minssf',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$maxssf',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$authname',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'cyrus_authenticate',
  ),
  'cyrus_bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$callbacks',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cyrus_bind',
  ),
  'cyrus_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cyrus_close',
  ),
  'cyrus_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$port',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'cyrus_connect',
  ),
  'cyrus_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'cyrus_query',
  ),
  'cyrus_unbind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$connection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$trigger_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'cyrus_unbind',
  ),
  'imap_8bit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_8bit',
  ),
  'imap_alerts' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'imap_alerts',
  ),
  'imap_append' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$options',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$internal_date',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_append',
  ),
  'imap_base64' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_base64',
  ),
  'imap_binary' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_binary',
  ),
  'imap_body' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_body',
  ),
  'imap_bodystruct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$section',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'imap_bodystruct',
  ),
  'imap_check' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'imap_check',
  ),
  'imap_clearflag_full' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sequence',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$flag',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_clearflag_full',
  ),
  'imap_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flag',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_close',
  ),
  'imap_createmailbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_createmailbox',
  ),
  'imap_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_delete',
  ),
  'imap_deletemailbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_deletemailbox',
  ),
  'imap_errors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'imap_errors',
  ),
  'imap_expunge' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_expunge',
  ),
  'imap_fetch_overview' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sequence',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_fetch_overview',
  ),
  'imap_fetchbody' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$section',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_fetchbody',
  ),
  'imap_fetchheader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_fetchheader',
  ),
  'imap_fetchmime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$section',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_fetchmime',
  ),
  'imap_fetchstructure' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'imap_fetchstructure',
  ),
  'imap_gc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$caches',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_gc',
  ),
  'imap_get_quota' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$quota_root',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_get_quota',
  ),
  'imap_get_quotaroot' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$quota_root',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_get_quotaroot',
  ),
  'imap_getacl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_getacl',
  ),
  'imap_getmailboxes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ref',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_getmailboxes',
  ),
  'imap_getsubscribed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ref',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_getsubscribed',
  ),
  'imap_headerinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$fromlength',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$subjectlength',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$defaulthost',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'imap_headerinfo',
  ),
  'imap_headers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_headers',
  ),
  'imap_last_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'imap_last_error',
  ),
  'imap_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ref',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_list',
  ),
  'imap_listscan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ref',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_listscan',
  ),
  'imap_lsub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ref',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_lsub',
  ),
  'imap_mail_compose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$envelope',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$body',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_mail_compose',
  ),
  'imap_mail_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$msglist',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_mail_copy',
  ),
  'imap_mail_move' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$msglist',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_mail_move',
  ),
  'imap_mail' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$to',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$additional_headers',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$cc',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$bcc',
        'initializer' => '= NULL',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$rpath',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_mail',
  ),
  'imap_mailboxmsginfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'imap_mailboxmsginfo',
  ),
  'imap_mime_header_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_mime_header_decode',
  ),
  'imap_msgno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$uid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imap_msgno',
  ),
  'imap_num_msg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imap_num_msg',
  ),
  'imap_num_recent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imap_num_recent',
  ),
  'imap_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$n_retries',
        'initializer' => '= 0',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'imap_open',
  ),
  'imap_ping' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_ping',
  ),
  'imap_qprint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_qprint',
  ),
  'imap_renamemailbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$old_mbox',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$new_mbox',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_renamemailbox',
  ),
  'imap_reopen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$n_retries',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_reopen',
  ),
  'imap_rfc822_parse_adrlist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$address',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$default_host',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_rfc822_parse_adrlist',
  ),
  'imap_rfc822_parse_headers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$headers',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$defaulthost',
        'initializer' => '= "UNKNOWN"',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'imap_rfc822_parse_headers',
  ),
  'imap_rfc822_write_address' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$personal',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_rfc822_write_address',
  ),
  'imap_savebody' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$part_number',
        'initializer' => '= ""',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_savebody',
  ),
  'imap_search' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$criteria',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= SE_FREE',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= NIL',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_search',
  ),
  'imap_set_quota' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$quota_root',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$quota_limit',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_set_quota',
  ),
  'imap_setacl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$rights',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_setacl',
  ),
  'imap_setflag_full' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sequence',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$flag',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= NIL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_setflag_full',
  ),
  'imap_sort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$criteria',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$reverse',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$search_criteria',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'initializer' => '= NIL',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_sort',
  ),
  'imap_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'imap_status',
  ),
  'imap_subscribe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_subscribe',
  ),
  'imap_thread' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= SE_FREE',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'imap_thread',
  ),
  'imap_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timeout_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'imap_timeout',
  ),
  'imap_uid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'imap_uid',
  ),
  'imap_undelete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msg_number',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_undelete',
  ),
  'imap_unsubscribe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$imap_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mailbox',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'imap_unsubscribe',
  ),
  'imap_utf7_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_utf7_decode',
  ),
  'imap_utf7_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_utf7_encode',
  ),
  'imap_utf8' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$mime_encoded_text',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'imap_utf8',
  ),
  'ezmlm_hash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$addr',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ezmlm_hash',
  ),
  'mail' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$to',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$additional_headers',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$additional_parameters',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'mail',
  ),
  'mailparse_determine_best_xfer_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fp',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mailparse_determine_best_xfer_encoding',
  ),
  'mailparse_msg_create' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'mailparse_msg_create',
  ),
  'mailparse_msg_extract_part_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callbackfunc',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mailparse_msg_extract_part_file',
  ),
  'mailparse_msg_extract_part' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$msgbody',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callbackfunc',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'mailparse_msg_extract_part',
  ),
  'mailparse_msg_extract_whole_part_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callbackfunc',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'mailparse_msg_extract_whole_part_file',
  ),
  'mailparse_msg_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mailparse_msg_free',
  ),
  'mailparse_msg_get_part_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mailparse_msg_get_part_data',
  ),
  'mailparse_msg_get_part' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mimesection',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'mailparse_msg_get_part',
  ),
  'mailparse_msg_get_structure' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mailparse_msg_get_structure',
  ),
  'mailparse_msg_parse_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'mailparse_msg_parse_file',
  ),
  'mailparse_msg_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mimemail',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mailparse_msg_parse',
  ),
  'mailparse_rfc822_parse_addresses' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$addresses',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mailparse_rfc822_parse_addresses',
  ),
  'mailparse_stream_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sourcefp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$destfp',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'mailparse_stream_encode',
  ),
  'mailparse_uudecode_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fp',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'mailparse_uudecode_all',
  ),
  'vpopmail_add_alias_domain_ex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$olddomain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$newdomain',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_add_alias_domain_ex',
  ),
  'vpopmail_add_alias_domain' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$aliasdomain',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_add_alias_domain',
  ),
  'vpopmail_add_domain_ex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$passwd',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$quota',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$bounce',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$apop',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_add_domain_ex',
  ),
  'vpopmail_add_domain' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dir',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$uid',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$gid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_add_domain',
  ),
  'vpopmail_add_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$gecos',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$apop',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_add_user',
  ),
  'vpopmail_alias_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_alias_add',
  ),
  'vpopmail_alias_del_domain' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_alias_del_domain',
  ),
  'vpopmail_alias_del' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_alias_del',
  ),
  'vpopmail_alias_get_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'vpopmail_alias_get_all',
  ),
  'vpopmail_alias_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'vpopmail_alias_get',
  ),
  'vpopmail_auth_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$apop',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_auth_user',
  ),
  'vpopmail_del_domain_ex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_del_domain_ex',
  ),
  'vpopmail_del_domain' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_del_domain',
  ),
  'vpopmail_del_user' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_del_user',
  ),
  'vpopmail_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'vpopmail_error',
  ),
  'vpopmail_passwd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$apop',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_passwd',
  ),
  'vpopmail_set_user_quota' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$quota',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'vpopmail_set_user_quota',
  ),
  'bcadd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$right_operand',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bcadd',
  ),
  'bccomp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$right_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'initializer' => '= int',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'bccomp',
  ),
  'bcdiv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$right_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'initializer' => '= int',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bcdiv',
  ),
  'bcmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$modulus',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'bcmod',
  ),
  'bcmul' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$right_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'initializer' => '= int',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bcmul',
  ),
  'bcpow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$right_operand',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bcpow',
  ),
  'bcpowmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$right_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$modulus',
        'initializer' => '= ""',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'initializer' => '= int',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bcpowmod',
  ),
  'bcscale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bcscale',
  ),
  'bcsqrt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$operand',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bcsqrt',
  ),
  'bcsub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$left_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$right_operand',
        'initializer' => '= ""',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$scale',
        'initializer' => '= int',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'bcsub',
  ),
  'gmp_abs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_abs',
  ),
  'gmp_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_add',
  ),
  'gmp_and' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_and',
  ),
  'gmp_clrbit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'gmp_clrbit',
  ),
  'gmp_cmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_cmp',
  ),
  'gmp_com' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_com',
  ),
  'gmp_div_q' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$round',
        'initializer' => '= GMP_ROUND_ZERO',
        'required' => false,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_div_q',
  ),
  'gmp_div_qr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$n',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$d',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$round',
        'initializer' => '= GMP_ROUND_ZERO',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'gmp_div_qr',
  ),
  'gmp_div_r' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$n',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$d',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$round',
        'initializer' => '= GMP_ROUND_ZERO',
        'required' => false,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_div_r',
  ),
  'gmp_divexact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$n',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$d',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_divexact',
  ),
  'gmp_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$gmpnumber',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$word_size',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gmp_export',
  ),
  'gmp_fact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_fact',
  ),
  'gmp_gcd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_gcd',
  ),
  'gmp_gcdext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gmp_gcdext',
  ),
  'gmp_hamdist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_hamdist',
  ),
  'gmp_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$word_size',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_import',
  ),
  'gmp_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$number',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$base',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_init',
  ),
  'gmp_intval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$gmpnumber',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_intval',
  ),
  'gmp_invert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_invert',
  ),
  'gmp_jacobi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_jacobi',
  ),
  'gmp_legendre' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_legendre',
  ),
  'gmp_mod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$n',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$d',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_mod',
  ),
  'gmp_mul' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_mul',
  ),
  'gmp_neg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_neg',
  ),
  'gmp_nextprime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_nextprime',
  ),
  'gmp_or' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_or',
  ),
  'gmp_perfect_square' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gmp_perfect_square',
  ),
  'gmp_popcount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_popcount',
  ),
  'gmp_pow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$exp',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_pow',
  ),
  'gmp_powm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$exp',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'GMP',
        'name' => '$mod',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_powm',
  ),
  'gmp_prob_prime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$reps',
        'initializer' => '= 10',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_prob_prime',
  ),
  'gmp_random_bits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$bits',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_random_bits',
  ),
  'gmp_random_range' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$min',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$max',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_random_range',
  ),
  'gmp_random' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$limiter',
        'initializer' => '= 20',
        'required' => false,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_random',
  ),
  'gmp_root' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$nth',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_root',
  ),
  'gmp_rootrem' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$nth',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gmp_rootrem',
  ),
  'gmp_scan0' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_scan0',
  ),
  'gmp_scan1' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_scan1',
  ),
  'gmp_setbit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '&$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$bit_on',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'gmp_setbit',
  ),
  'gmp_sign' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gmp_sign',
  ),
  'gmp_sqrt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_sqrt',
  ),
  'gmp_sqrtrem' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gmp_sqrtrem',
  ),
  'gmp_strval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$gmpnumber',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$base',
        'initializer' => '= 10',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'gmp_strval',
  ),
  'gmp_sub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_sub',
  ),
  'gmp_testbit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gmp_testbit',
  ),
  'gmp_xor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'GMP',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'GMP',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'GMP',
    'name' => 'gmp_xor',
  ),
  'eigenValues' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$left',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$right',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'eigenValues',
  ),
  'identity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'identity',
  ),
  'leastSquaresByFactorisation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'leastSquaresByFactorisation',
  ),
  'leastSquaresBySVD' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'leastSquaresBySVD',
  ),
  'pseudoInverse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'pseudoInverse',
  ),
  'singularValues' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'singularValues',
  ),
  'solveLinearEquation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'solveLinearEquation',
  ),
  'abs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'abs',
  ),
  'acos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'acos',
  ),
  'acosh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'acosh',
  ),
  'asin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'asin',
  ),
  'asinh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'asinh',
  ),
  'atan2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'atan2',
  ),
  'atan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'atan',
  ),
  'atanh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'atanh',
  ),
  'base_convert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$number',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$frombase',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$tobase',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'base_convert',
  ),
  'bindec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$binary_string',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'bindec',
  ),
  'ceil' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'ceil',
  ),
  'cos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'cos',
  ),
  'cosh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'cosh',
  ),
  'decbin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'decbin',
  ),
  'dechex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'dechex',
  ),
  'decoct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'decoct',
  ),
  'deg2rad' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'deg2rad',
  ),
  'exp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'exp',
  ),
  'expm1' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'expm1',
  ),
  'floor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'floor',
  ),
  'fmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fmod',
  ),
  'getrandmax' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getrandmax',
  ),
  'hexdec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hex_string',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'hexdec',
  ),
  'hypot' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'hypot',
  ),
  'is_finite' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_finite',
  ),
  'is_infinite' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_infinite',
  ),
  'is_nan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_nan',
  ),
  'lcg_value' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'lcg_value',
  ),
  'log10' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'log10',
  ),
  'log1p' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'log1p',
  ),
  'log' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$base',
        'initializer' => '= M_E',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'log',
  ),
  'min' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'min',
  ),
  'mt_getrandmax' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'mt_getrandmax',
  ),
  'mt_rand' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$min',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'mt_rand',
  ),
  'mt_srand' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$seed',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'mt_srand',
  ),
  'octdec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$octal_string',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'octdec',
  ),
  'pi' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'pi',
  ),
  'pow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'number',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'number',
        'name' => '$exp',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'pow',
  ),
  'rad2deg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'rad2deg',
  ),
  'rand' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$min',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'rand',
  ),
  'round' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$val',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$precision',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= PHP_ROUND_HALF_UP',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'round',
  ),
  'sin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'sin',
  ),
  'sinh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'sinh',
  ),
  'sqrt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'sqrt',
  ),
  'srand' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$seed',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'srand',
  ),
  'tan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'tan',
  ),
  'tanh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'tanh',
  ),
  'stats_absolute_deviation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_absolute_deviation',
  ),
  'stats_cdf_beta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_beta',
  ),
  'stats_cdf_binomial' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_binomial',
  ),
  'stats_cdf_cauchy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_cauchy',
  ),
  'stats_cdf_chisquare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_chisquare',
  ),
  'stats_cdf_exponential' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_exponential',
  ),
  'stats_cdf_f' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_f',
  ),
  'stats_cdf_gamma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_gamma',
  ),
  'stats_cdf_laplace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_laplace',
  ),
  'stats_cdf_logistic' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_logistic',
  ),
  'stats_cdf_negative_binomial' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_negative_binomial',
  ),
  'stats_cdf_noncentral_chisquare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_noncentral_chisquare',
  ),
  'stats_cdf_noncentral_f' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$par4',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_noncentral_f',
  ),
  'stats_cdf_poisson' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_poisson',
  ),
  'stats_cdf_t' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_t',
  ),
  'stats_cdf_uniform' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_uniform',
  ),
  'stats_cdf_weibull' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_cdf_weibull',
  ),
  'stats_covariance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_covariance',
  ),
  'stats_den_uniform' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_den_uniform',
  ),
  'stats_dens_beta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_beta',
  ),
  'stats_dens_cauchy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ave',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$stdev',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_cauchy',
  ),
  'stats_dens_chisquare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dfr',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_chisquare',
  ),
  'stats_dens_exponential' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$scale',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_exponential',
  ),
  'stats_dens_f' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dfr1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$dfr2',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_f',
  ),
  'stats_dens_gamma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$shape',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$scale',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_gamma',
  ),
  'stats_dens_laplace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ave',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$stdev',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_laplace',
  ),
  'stats_dens_logistic' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ave',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$stdev',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_logistic',
  ),
  'stats_dens_negative_binomial' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$n',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$pi',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_negative_binomial',
  ),
  'stats_dens_normal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$ave',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$stdev',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_normal',
  ),
  'stats_dens_pmf_binomial' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$n',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$pi',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_pmf_binomial',
  ),
  'stats_dens_pmf_hypergeometric' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$n1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$n2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$N1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$N2',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_pmf_hypergeometric',
  ),
  'stats_dens_pmf_poisson' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$lb',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_pmf_poisson',
  ),
  'stats_dens_t' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dfr',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_t',
  ),
  'stats_dens_weibull' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_dens_weibull',
  ),
  'stats_harmonic_mean' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'stats_harmonic_mean',
  ),
  'stats_kurtosis' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_kurtosis',
  ),
  'stats_rand_gen_beta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_beta',
  ),
  'stats_rand_gen_chisquare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$df',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_chisquare',
  ),
  'stats_rand_gen_exponential' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$av',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_exponential',
  ),
  'stats_rand_gen_f' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$dfn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dfd',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_f',
  ),
  'stats_rand_gen_funiform' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$low',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$high',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_funiform',
  ),
  'stats_rand_gen_gamma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_gamma',
  ),
  'stats_rand_gen_ibinomial_negative' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'stats_rand_gen_ibinomial_negative',
  ),
  'stats_rand_gen_ibinomial' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$pp',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'stats_rand_gen_ibinomial',
  ),
  'stats_rand_gen_int' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'stats_rand_gen_int',
  ),
  'stats_rand_gen_ipoisson' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$mu',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'stats_rand_gen_ipoisson',
  ),
  'stats_rand_gen_iuniform' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$low',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$high',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'stats_rand_gen_iuniform',
  ),
  'stats_rand_gen_noncenral_chisquare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$df',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$xnonc',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_noncenral_chisquare',
  ),
  'stats_rand_gen_noncentral_f' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$dfn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dfd',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$xnonc',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_noncentral_f',
  ),
  'stats_rand_gen_noncentral_t' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$df',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$xnonc',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_noncentral_t',
  ),
  'stats_rand_gen_normal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$av',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sd',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_normal',
  ),
  'stats_rand_gen_t' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$df',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_rand_gen_t',
  ),
  'stats_rand_get_seeds' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'stats_rand_get_seeds',
  ),
  'stats_rand_phrase_to_seeds' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$phrase',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'stats_rand_phrase_to_seeds',
  ),
  'stats_rand_ranf' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'stats_rand_ranf',
  ),
  'stats_rand_setall' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$iseed1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$iseed2',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'stats_rand_setall',
  ),
  'stats_skew' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_skew',
  ),
  'stats_standard_deviation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$sample',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_standard_deviation',
  ),
  'stats_stat_binomial_coef' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_binomial_coef',
  ),
  'stats_stat_correlation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$arr1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arr2',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_correlation',
  ),
  'stats_stat_gennch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$n',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_gennch',
  ),
  'stats_stat_independent_t' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$arr1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arr2',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_independent_t',
  ),
  'stats_stat_innerproduct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$arr1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arr2',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_innerproduct',
  ),
  'stats_stat_noncentral_t' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$par1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$par2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$par3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_noncentral_t',
  ),
  'stats_stat_paired_t' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$arr1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arr2',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_paired_t',
  ),
  'stats_stat_percentile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$df',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$xnonc',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_percentile',
  ),
  'stats_stat_powersum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$arr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$power',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_stat_powersum',
  ),
  'stats_variance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$sample',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'stats_variance',
  ),
  'trader_acos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_acos',
  ),
  'trader_ad' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$volume',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ad',
  ),
  'trader_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$real1',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_add',
  ),
  'trader_adosc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$volume',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$fastPeriod',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'integer',
        'name' => '$slowPeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_adosc',
  ),
  'trader_adx' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_adx',
  ),
  'trader_adxr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_adxr',
  ),
  'trader_apo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$fastPeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$slowPeriod',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$mAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_apo',
  ),
  'trader_aroon' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_aroon',
  ),
  'trader_aroonosc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_aroonosc',
  ),
  'trader_asin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_asin',
  ),
  'trader_atan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_atan',
  ),
  'trader_atr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_atr',
  ),
  'trader_avgprice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_avgprice',
  ),
  'trader_bbands' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$nbDevUp',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$nbDevDn',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$mAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_bbands',
  ),
  'trader_beta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$real1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_beta',
  ),
  'trader_bop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_bop',
  ),
  'trader_cci' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cci',
  ),
  'trader_cdl2crows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdl2crows',
  ),
  'trader_cdl3blackcrows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdl3blackcrows',
  ),
  'trader_cdl3inside' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdl3inside',
  ),
  'trader_cdl3linestrike' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdl3linestrike',
  ),
  'trader_cdl3outside' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdl3outside',
  ),
  'trader_cdl3starsinsouth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdl3starsinsouth',
  ),
  'trader_cdl3whitesoldiers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdl3whitesoldiers',
  ),
  'trader_cdlabandonedbaby' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$penetration',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlabandonedbaby',
  ),
  'trader_cdladvanceblock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdladvanceblock',
  ),
  'trader_cdlbelthold' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlbelthold',
  ),
  'trader_cdlbreakaway' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlbreakaway',
  ),
  'trader_cdlclosingmarubozu' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlclosingmarubozu',
  ),
  'trader_cdlconcealbabyswall' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlconcealbabyswall',
  ),
  'trader_cdlcounterattack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlcounterattack',
  ),
  'trader_cdldarkcloudcover' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$penetration',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdldarkcloudcover',
  ),
  'trader_cdldoji' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdldoji',
  ),
  'trader_cdldojistar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdldojistar',
  ),
  'trader_cdldragonflydoji' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdldragonflydoji',
  ),
  'trader_cdlengulfing' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlengulfing',
  ),
  'trader_cdleveningdojistar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$penetration',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdleveningdojistar',
  ),
  'trader_cdleveningstar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$penetration',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdleveningstar',
  ),
  'trader_cdlgapsidesidewhite' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlgapsidesidewhite',
  ),
  'trader_cdlgravestonedoji' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlgravestonedoji',
  ),
  'trader_cdlhammer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlhammer',
  ),
  'trader_cdlhangingman' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlhangingman',
  ),
  'trader_cdlharami' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlharami',
  ),
  'trader_cdlharamicross' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlharamicross',
  ),
  'trader_cdlhighwave' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlhighwave',
  ),
  'trader_cdlhikkake' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlhikkake',
  ),
  'trader_cdlhikkakemod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlhikkakemod',
  ),
  'trader_cdlhomingpigeon' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlhomingpigeon',
  ),
  'trader_cdlidentical3crows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlidentical3crows',
  ),
  'trader_cdlinneck' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlinneck',
  ),
  'trader_cdlinvertedhammer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlinvertedhammer',
  ),
  'trader_cdlkicking' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlkicking',
  ),
  'trader_cdlkickingbylength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlkickingbylength',
  ),
  'trader_cdlladderbottom' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlladderbottom',
  ),
  'trader_cdllongleggeddoji' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdllongleggeddoji',
  ),
  'trader_cdllongline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdllongline',
  ),
  'trader_cdlmarubozu' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlmarubozu',
  ),
  'trader_cdlmatchinglow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlmatchinglow',
  ),
  'trader_cdlmathold' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$penetration',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlmathold',
  ),
  'trader_cdlmorningdojistar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$penetration',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlmorningdojistar',
  ),
  'trader_cdlmorningstar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$penetration',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlmorningstar',
  ),
  'trader_cdlonneck' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlonneck',
  ),
  'trader_cdlpiercing' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlpiercing',
  ),
  'trader_cdlrickshawman' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlrickshawman',
  ),
  'trader_cdlrisefall3methods' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlrisefall3methods',
  ),
  'trader_cdlseparatinglines' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlseparatinglines',
  ),
  'trader_cdlshootingstar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlshootingstar',
  ),
  'trader_cdlshortline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlshortline',
  ),
  'trader_cdlspinningtop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlspinningtop',
  ),
  'trader_cdlstalledpattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlstalledpattern',
  ),
  'trader_cdlsticksandwich' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlsticksandwich',
  ),
  'trader_cdltakuri' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdltakuri',
  ),
  'trader_cdltasukigap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdltasukigap',
  ),
  'trader_cdlthrusting' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlthrusting',
  ),
  'trader_cdltristar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdltristar',
  ),
  'trader_cdlunique3river' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlunique3river',
  ),
  'trader_cdlupsidegap2crows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlupsidegap2crows',
  ),
  'trader_cdlxsidegap3methods' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$open',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cdlxsidegap3methods',
  ),
  'trader_ceil' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ceil',
  ),
  'trader_cmo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cmo',
  ),
  'trader_correl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$real1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_correl',
  ),
  'trader_cos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cos',
  ),
  'trader_cosh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_cosh',
  ),
  'trader_dema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_dema',
  ),
  'trader_div' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$real1',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_div',
  ),
  'trader_dx' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_dx',
  ),
  'trader_ema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ema',
  ),
  'trader_errno' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'integer',
    'name' => 'trader_errno',
  ),
  'trader_exp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_exp',
  ),
  'trader_floor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_floor',
  ),
  'trader_get_compat' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'integer',
    'name' => 'trader_get_compat',
  ),
  'trader_get_unstable_period' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$functionId',
        'required' => true,
      ),
    ),
    'type' => 'integer',
    'name' => 'trader_get_unstable_period',
  ),
  'trader_ht_dcperiod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ht_dcperiod',
  ),
  'trader_ht_dcphase' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ht_dcphase',
  ),
  'trader_ht_phasor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ht_phasor',
  ),
  'trader_ht_sine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ht_sine',
  ),
  'trader_ht_trendline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ht_trendline',
  ),
  'trader_ht_trendmode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ht_trendmode',
  ),
  'trader_kama' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_kama',
  ),
  'trader_linearreg_angle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_linearreg_angle',
  ),
  'trader_linearreg_intercept' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_linearreg_intercept',
  ),
  'trader_linearreg_slope' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_linearreg_slope',
  ),
  'trader_linearreg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_linearreg',
  ),
  'trader_ln' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ln',
  ),
  'trader_log10' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_log10',
  ),
  'trader_ma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$mAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ma',
  ),
  'trader_macd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$fastPeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$slowPeriod',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$signalPeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_macd',
  ),
  'trader_macdext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$fastPeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$fastMAType',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$slowPeriod',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$slowMAType',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'integer',
        'name' => '$signalPeriod',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'integer',
        'name' => '$signalMAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_macdext',
  ),
  'trader_macdfix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$signalPeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_macdfix',
  ),
  'trader_mama' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fastLimit',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$slowLimit',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_mama',
  ),
  'trader_mavp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$periods',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$minPeriod',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$maxPeriod',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$mAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_mavp',
  ),
  'trader_max' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_max',
  ),
  'trader_maxindex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_maxindex',
  ),
  'trader_medprice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_medprice',
  ),
  'trader_mfi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$volume',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_mfi',
  ),
  'trader_midpoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_midpoint',
  ),
  'trader_midprice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_midprice',
  ),
  'trader_min' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_min',
  ),
  'trader_minindex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_minindex',
  ),
  'trader_minmax' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_minmax',
  ),
  'trader_minmaxindex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_minmaxindex',
  ),
  'trader_minus_di' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_minus_di',
  ),
  'trader_minus_dm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_minus_dm',
  ),
  'trader_mom' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_mom',
  ),
  'trader_mult' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$real1',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_mult',
  ),
  'trader_natr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_natr',
  ),
  'trader_obv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$volume',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_obv',
  ),
  'trader_plus_di' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_plus_di',
  ),
  'trader_plus_dm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_plus_dm',
  ),
  'trader_ppo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$fastPeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$slowPeriod',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$mAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ppo',
  ),
  'trader_roc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_roc',
  ),
  'trader_rocp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_rocp',
  ),
  'trader_rocr100' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_rocr100',
  ),
  'trader_rocr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_rocr',
  ),
  'trader_rsi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_rsi',
  ),
  'trader_sar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$acceleration',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$maximum',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sar',
  ),
  'trader_sarext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$startValue',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$offsetOnReverse',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$accelerationInitLong',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$accelerationLong',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$accelerationMaxLong',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'float',
        'name' => '$accelerationInitShort',
        'required' => false,
      ),
      8 => 
      array (
        'type' => 'float',
        'name' => '$accelerationShort',
        'required' => false,
      ),
      9 => 
      array (
        'type' => 'float',
        'name' => '$accelerationMaxShort',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sarext',
  ),
  'trader_set_compat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$compatId',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'trader_set_compat',
  ),
  'trader_set_unstable_period' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$functionId',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'trader_set_unstable_period',
  ),
  'trader_sin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sin',
  ),
  'trader_sinh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sinh',
  ),
  'trader_sma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sma',
  ),
  'trader_sqrt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sqrt',
  ),
  'trader_stddev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$nbDev',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_stddev',
  ),
  'trader_stoch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$fastK_Period',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$slowK_Period',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'integer',
        'name' => '$slowK_MAType',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'integer',
        'name' => '$slowD_Period',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'integer',
        'name' => '$slowD_MAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_stoch',
  ),
  'trader_stochf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$fastK_Period',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$fastD_Period',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'integer',
        'name' => '$fastD_MAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_stochf',
  ),
  'trader_stochrsi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$fastK_Period',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$fastD_Period',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$fastD_MAType',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_stochrsi',
  ),
  'trader_sub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real0',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$real1',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sub',
  ),
  'trader_sum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_sum',
  ),
  'trader_t3' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$vFactor',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_t3',
  ),
  'trader_tan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_tan',
  ),
  'trader_tanh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_tanh',
  ),
  'trader_tema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_tema',
  ),
  'trader_trange' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_trange',
  ),
  'trader_trima' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_trima',
  ),
  'trader_trix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_trix',
  ),
  'trader_tsf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_tsf',
  ),
  'trader_typprice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_typprice',
  ),
  'trader_ultosc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod1',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod2',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod3',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_ultosc',
  ),
  'trader_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$nbDev',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_var',
  ),
  'trader_wclprice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_wclprice',
  ),
  'trader_willr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$high',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$low',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$close',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_willr',
  ),
  'trader_wma' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$real',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timePeriod',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'trader_wma',
  ),
  'fdf_add_doc_javascript' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$script_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$script_code',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_add_doc_javascript',
  ),
  'fdf_add_template' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$newpage',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$template',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$rename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_add_template',
  ),
  'fdf_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'fdf_close',
  ),
  'fdf_create' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'fdf_create',
  ),
  'fdf_enum_values' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$userdata',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_enum_values',
  ),
  'fdf_errno' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'fdf_errno',
  ),
  'fdf_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$error_code',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fdf_error',
  ),
  'fdf_get_ap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$face',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_get_ap',
  ),
  'fdf_get_attachment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$savepath',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fdf_get_attachment',
  ),
  'fdf_get_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'fdf_get_encoding',
  ),
  'fdf_get_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'fdf_get_file',
  ),
  'fdf_get_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$whichflags',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fdf_get_flags',
  ),
  'fdf_get_opt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$element',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'fdf_get_opt',
  ),
  'fdf_get_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'fdf_get_status',
  ),
  'fdf_get_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$which',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'fdf_get_value',
  ),
  'fdf_get_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fdf_get_version',
  ),
  'fdf_header' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'fdf_header',
  ),
  'fdf_next_field_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'fdf_next_field_name',
  ),
  'fdf_open_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fdf_data',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fdf_open_string',
  ),
  'fdf_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fdf_open',
  ),
  'fdf_remove_item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$item',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_remove_item',
  ),
  'fdf_save_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'fdf_save_string',
  ),
  'fdf_save' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_save',
  ),
  'fdf_set_ap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$face',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$page_number',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_ap',
  ),
  'fdf_set_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_encoding',
  ),
  'fdf_set_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$target_frame',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_file',
  ),
  'fdf_set_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$whichFlags',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$newFlags',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_flags',
  ),
  'fdf_set_javascript_action' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$trigger',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$script',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_javascript_action',
  ),
  'fdf_set_on_import_javascript' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$script',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$before_data_import',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_on_import_javascript',
  ),
  'fdf_set_opt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$element',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_opt',
  ),
  'fdf_set_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_status',
  ),
  'fdf_set_submit_form_action' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$trigger',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$script',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_submit_form_action',
  ),
  'fdf_set_target_frame' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$frame_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_target_frame',
  ),
  'fdf_set_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$isName',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_value',
  ),
  'fdf_set_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fdf_document',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fdf_set_version',
  ),
  'gnupg_adddecryptkey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fingerprint',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_adddecryptkey',
  ),
  'gnupg_addencryptkey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fingerprint',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_addencryptkey',
  ),
  'gnupg_addsignkey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fingerprint',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_addsignkey',
  ),
  'gnupg_cleardecryptkeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_cleardecryptkeys',
  ),
  'gnupg_clearencryptkeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_clearencryptkeys',
  ),
  'gnupg_clearsignkeys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_clearsignkeys',
  ),
  'gnupg_decrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gnupg_decrypt',
  ),
  'gnupg_decryptverify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$plaintext',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gnupg_decryptverify',
  ),
  'gnupg_encrypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$plaintext',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gnupg_encrypt',
  ),
  'gnupg_encryptsign' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$plaintext',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gnupg_encryptsign',
  ),
  'gnupg_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fingerprint',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gnupg_export',
  ),
  'gnupg_geterror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gnupg_geterror',
  ),
  'gnupg_getprotocol' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gnupg_getprotocol',
  ),
  'gnupg_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$keydata',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gnupg_import',
  ),
  'gnupg_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'gnupg_init',
  ),
  'gnupg_keyinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gnupg_keyinfo',
  ),
  'gnupg_setarmor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$armor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_setarmor',
  ),
  'gnupg_seterrormode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$errormode',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'gnupg_seterrormode',
  ),
  'gnupg_setsignmode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$signmode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gnupg_setsignmode',
  ),
  'gnupg_sign' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$plaintext',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gnupg_sign',
  ),
  'gnupg_verify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$signed_text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$signature',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$plaintext',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'gnupg_verify',
  ),
  'addPage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'addPage',
  ),
  'addPageLabel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$first_page',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$style',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$first_num',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'addPageLabel',
  ),
  'createOutline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'object',
        'name' => '$parent_outline',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'object',
        'name' => '$encoder',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'createOutline',
  ),
  'getCurrentEncoder' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'getCurrentEncoder',
  ),
  'getCurrentPage' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'getCurrentPage',
  ),
  'getEncoder' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'getEncoder',
  ),
  'getInfoAttr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getInfoAttr',
  ),
  'getPageLayout' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getPageLayout',
  ),
  'getPageMode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getPageMode',
  ),
  'getStreamSize' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getStreamSize',
  ),
  'insertPage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$page',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'insertPage',
  ),
  'loadJPEG' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'loadJPEG',
  ),
  'loadPNG' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$deferred',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'loadPNG',
  ),
  'loadRaw' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$color_space',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'loadRaw',
  ),
  'loadTTC' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fontfile',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$embed',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'loadTTC',
  ),
  'loadTTF' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fontfile',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$embed',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'loadTTF',
  ),
  'loadType1' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$afmfile',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$pfmfile',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'loadType1',
  ),
  'output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compression',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'output',
  ),
  'readFromStream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bytes',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'readFromStream',
  ),
  'resetStream' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'resetStream',
  ),
  'saveToStream' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'saveToStream',
  ),
  'setCompressionMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCompressionMode',
  ),
  'setCurrentEncoder' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCurrentEncoder',
  ),
  'setEncryptionMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$key_len',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setEncryptionMode',
  ),
  'setInfoAttr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$info',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setInfoAttr',
  ),
  'setInfoDateAttr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$year',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$month',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$day',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$hour',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$min',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$sec',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$ind',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$off_hour',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'int',
        'name' => '$off_min',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setInfoDateAttr',
  ),
  'setOpenAction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$destination',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setOpenAction',
  ),
  'setPageLayout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$layout',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setPageLayout',
  ),
  'setPageMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setPageMode',
  ),
  'setPagesConfiguration' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$page_per_pages',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setPagesConfiguration',
  ),
  'setPermission' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$permission',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setPermission',
  ),
  'useCNSEncodings' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useCNSEncodings',
  ),
  'useCNSFonts' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useCNSFonts',
  ),
  'useCNTEncodings' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useCNTEncodings',
  ),
  'useCNTFonts' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useCNTFonts',
  ),
  'useJPEncodings' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useJPEncodings',
  ),
  'useJPFonts' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useJPFonts',
  ),
  'useKREncodings' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useKREncodings',
  ),
  'useKRFonts' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'useKRFonts',
  ),
  'beginText' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'beginText',
  ),
  'concat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$d',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'concat',
  ),
  'createDestination' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'createDestination',
  ),
  'createLinkAnnotation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$rectangle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'object',
        'name' => '$destination',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'createLinkAnnotation',
  ),
  'createTextAnnotation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$rectangle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'object',
        'name' => '$encoder',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'createTextAnnotation',
  ),
  'createURLAnnotation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$rectangle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'createURLAnnotation',
  ),
  'curveTo2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'curveTo2',
  ),
  'curveTo3' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x3',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'curveTo3',
  ),
  'endPath' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'endPath',
  ),
  'endText' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'endText',
  ),
  'eofill' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'eofill',
  ),
  'eoFillStroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$close_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'eoFillStroke',
  ),
  'fillStroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$close_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'fillStroke',
  ),
  'getCharSpace' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getCharSpace',
  ),
  'getCMYKFill' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getCMYKFill',
  ),
  'getCMYKStroke' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getCMYKStroke',
  ),
  'getCurrentFont' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'getCurrentFont',
  ),
  'getCurrentFontSize' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getCurrentFontSize',
  ),
  'getCurrentPos' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getCurrentPos',
  ),
  'getCurrentTextPos' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getCurrentTextPos',
  ),
  'getFillingColorSpace' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getFillingColorSpace',
  ),
  'getFlatness' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getFlatness',
  ),
  'getGMode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getGMode',
  ),
  'getGrayFill' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getGrayFill',
  ),
  'getGrayStroke' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getGrayStroke',
  ),
  'getHorizontalScaling' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getHorizontalScaling',
  ),
  'getRGBFill' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getRGBFill',
  ),
  'getRGBStroke' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getRGBStroke',
  ),
  'getStrokingColorSpace' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getStrokingColorSpace',
  ),
  'getTextLeading' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getTextLeading',
  ),
  'getTextMatrix' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getTextMatrix',
  ),
  'getTextRenderingMode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getTextRenderingMode',
  ),
  'getTextRise' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getTextRise',
  ),
  'getTextWidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'getTextWidth',
  ),
  'getTransMatrix' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getTransMatrix',
  ),
  'getWordSpace' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getWordSpace',
  ),
  'measureText' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$font_size',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$char_space',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$word_space',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$word_wrap',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'measureText',
  ),
  'moveTextPos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$set_leading',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'moveTextPos',
  ),
  'moveToNextLine' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'moveToNextLine',
  ),
  'setCharSpace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$char_space',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCharSpace',
  ),
  'setCMYKFill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$m',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$k',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCMYKFill',
  ),
  'setCMYKStroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$m',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$k',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCMYKStroke',
  ),
  'setFlatness' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$flatness',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFlatness',
  ),
  'setFontAndSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$font',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFontAndSize',
  ),
  'setGrayFill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setGrayFill',
  ),
  'setGrayStroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setGrayStroke',
  ),
  'setHeight' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setHeight',
  ),
  'setHorizontalScaling' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$scaling',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setHorizontalScaling',
  ),
  'setRGBFill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$g',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setRGBFill',
  ),
  'setRGBStroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$g',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setRGBStroke',
  ),
  'setRotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setRotate',
  ),
  'setSlideShow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$disp_time',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$trans_time',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setSlideShow',
  ),
  'setTextLeading' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$text_leading',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextLeading',
  ),
  'setTextMatrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$d',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextMatrix',
  ),
  'setTextRenderingMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextRenderingMode',
  ),
  'setTextRise' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$rise',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setTextRise',
  ),
  'setWidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setWidth',
  ),
  'setWordSpace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$word_space',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setWordSpace',
  ),
  'showTextNextLine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$word_space',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$char_space',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'showTextNextLine',
  ),
  'textOut' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'textOut',
  ),
  'textRect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$right',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$bottom',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$align',
        'initializer' => '= HaruPage::TALIGN_LEFT',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'textRect',
  ),
  'getAscent' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getAscent',
  ),
  'getCapHeight' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getCapHeight',
  ),
  'getDescent' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getDescent',
  ),
  'getEncodingName' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getEncodingName',
  ),
  'getFontName' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getFontName',
  ),
  'getUnicodeWidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$character',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getUnicodeWidth',
  ),
  'getXHeight' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getXHeight',
  ),
  'getBitsPerComponent' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getBitsPerComponent',
  ),
  'getColorSpace' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getColorSpace',
  ),
  'setColorMask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$rmin',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rmax',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$gmin',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$gmax',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$bmin',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$bmax',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setColorMask',
  ),
  'setMaskImage' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$mask_image',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setMaskImage',
  ),
  'getByteType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getByteType',
  ),
  'getUnicode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$character',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getUnicode',
  ),
  'getWritingMode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getWritingMode',
  ),
  'setDestination' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$destination',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setDestination',
  ),
  'setOpened' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$opened',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setOpened',
  ),
  'setBorderStyle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$dash_on',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dash_off',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setBorderStyle',
  ),
  'setHighlightMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setHighlightMode',
  ),
  'setIcon' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$icon',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setIcon',
  ),
  'setFit' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'setFit',
  ),
  'setFitB' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'setFitB',
  ),
  'setFitBH' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$top',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFitBH',
  ),
  'setFitBV' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFitBV',
  ),
  'setFitH' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$top',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFitH',
  ),
  'setFitR' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$bottom',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$right',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$top',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFitR',
  ),
  'setFitV' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setFitV',
  ),
  'setXYZ' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$top',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$zoom',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setXYZ',
  ),
  'ming_keypress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$char',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ming_keypress',
  ),
  'ming_setcubicthreshold' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$threshold',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ming_setcubicthreshold',
  ),
  'ming_setscale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$scale',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ming_setscale',
  ),
  'ming_setswfcompression' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ming_setswfcompression',
  ),
  'ming_useconstants' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$use',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ming_useconstants',
  ),
  'ming_useswfversion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ming_useswfversion',
  ),
  'addAction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFAction',
        'name' => '$action',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'addAction',
  ),
  'addASound' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFSound',
        'name' => '$sound',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'SWFSoundInstance',
    'name' => 'addASound',
  ),
  'addShape' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFShape',
        'name' => '$shape',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'addShape',
  ),
  'setAction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFAction',
        'name' => '$action',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setAction',
  ),
  'setDown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFShape',
        'name' => '$shape',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setDown',
  ),
  'setHit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFShape',
        'name' => '$shape',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setHit',
  ),
  'setMenu' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setMenu',
  ),
  'setOver' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFShape',
        'name' => '$shape',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setOver',
  ),
  'setUp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFShape',
        'name' => '$shape',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setUp',
  ),
  'addColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$a',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'addColor',
  ),
  'endMask' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'endMask',
  ),
  'getRot' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getRot',
  ),
  'getX' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getX',
  ),
  'getXScale' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getXScale',
  ),
  'getXSkew' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getXSkew',
  ),
  'getY' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getY',
  ),
  'getYScale' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getYScale',
  ),
  'getYSkew' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getYSkew',
  ),
  'move' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'move',
  ),
  'multColor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'multColor',
  ),
  'rotateTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$angle',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'rotateTo',
  ),
  'scaleTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'scaleTo',
  ),
  'setDepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setDepth',
  ),
  'setMaskLevel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setMaskLevel',
  ),
  'setName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setName',
  ),
  'setRatio' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$ratio',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setRatio',
  ),
  'skewXTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'skewXTo',
  ),
  'skewYTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'skewYTo',
  ),
  'getLeading' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'float',
    'name' => 'getLeading',
  ),
  'getShape' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$code',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getShape',
  ),
  'getUTF8Width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'getUTF8Width',
  ),
  'addChars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$chars',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'addChars',
  ),
  'addUTF8Chars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$char',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'addUTF8Chars',
  ),
  'addEntry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$ratio',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$alpha',
        'initializer' => '= 255',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'addEntry',
  ),
  'getShape1' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'SWFShape',
    'name' => 'getShape1',
  ),
  'getShape2' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'SWFShape',
    'name' => 'getShape2',
  ),
  'addExport' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFCharacter',
        'name' => '$char',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'addExport',
  ),
  'addFont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFFont',
        'name' => '$font',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'addFont',
  ),
  'importChar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$libswf',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'SWFSprite',
    'name' => 'importChar',
  ),
  'importFont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$libswf',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'SWFFontChar',
    'name' => 'importFont',
  ),
  'labelFrame' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$label',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'labelFrame',
  ),
  'nextFrame' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'nextFrame',
  ),
  'saveToFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'saveToFile',
  ),
  'setbackground' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setbackground',
  ),
  'setDimension' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setDimension',
  ),
  'setFrames' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setFrames',
  ),
  'setRate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$rate',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setRate',
  ),
  'startSound' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFSound',
        'name' => '$sount',
        'required' => true,
      ),
    ),
    'type' => 'SWFSoundInstance',
    'name' => 'startSound',
  ),
  'stopSound' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFSound',
        'name' => '$sount',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'stopSound',
  ),
  'streamMP3' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$mp3file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$skip',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'streamMP3',
  ),
  'writeExports' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'writeExports',
  ),
  'addFill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFGradient',
        'name' => '$gradient',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'SWFFill',
    'name' => 'addFill',
  ),
  'drawArc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$startAngle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$endAngle',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'drawArc',
  ),
  'drawCircle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'drawCircle',
  ),
  'drawCubic' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$bx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$by',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$cx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$cy',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'drawCubic',
  ),
  'drawCubicTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$bx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$by',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$cx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$cy',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'drawCubicTo',
  ),
  'drawCurve' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$controldx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$controldy',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$anchordx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$anchordy',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$targetdx',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$targetdy',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'drawCurve',
  ),
  'drawCurveTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$controlx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$controly',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$anchorx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$anchory',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$targetx',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$targety',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'drawCurveTo',
  ),
  'drawGlyph' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SWFFont',
        'name' => '$font',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$character',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'drawGlyph',
  ),
  'drawLine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'drawLine',
  ),
  'drawLineTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'drawLineTo',
  ),
  'movePen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$dx',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$dy',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'movePen',
  ),
  'movePenTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'movePenTo',
  ),
  'setLeftFill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$a',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'setLeftFill',
  ),
  'setLine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$a',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'setLine',
  ),
  'setRightFill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$red',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$green',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$blue',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$a',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'setRightFill',
  ),
  'loopCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$point',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'loopCount',
  ),
  'loopInPoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$point',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'loopInPoint',
  ),
  'loopOutPoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$point',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'loopOutPoint',
  ),
  'noMultiple' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'noMultiple',
  ),
  'addString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'addString',
  ),
  'addUTF8String' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'addUTF8String',
  ),
  'setSpacing' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$spacing',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setSpacing',
  ),
  'align' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$alignement',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'align',
  ),
  'setBounds' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setBounds',
  ),
  'setIndentation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setIndentation',
  ),
  'setLeftMargin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setLeftMargin',
  ),
  'setLineSpacing' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setLineSpacing',
  ),
  'setMargins' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setMargins',
  ),
  'setPadding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$padding',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setPadding',
  ),
  'setRightMargin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setRightMargin',
  ),
  'getNumFrames' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getNumFrames',
  ),
  'PDF_activate_item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_activate_item',
  ),
  'PDF_add_launchlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_add_launchlink',
  ),
  'PDF_add_locallink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$lowerleftx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lowerlefty',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$upperrightx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$upperrighty',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_add_locallink',
  ),
  'PDF_add_nameddest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_add_nameddest',
  ),
  'PDF_add_note' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$contents',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$icon',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$open',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_add_note',
  ),
  'PDF_add_pdflink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$bottom_left_x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$bottom_left_y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$up_right_x',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$up_right_y',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_add_pdflink',
  ),
  'PDF_add_table_cell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$table',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$column',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_add_table_cell',
  ),
  'PDF_add_textflow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$textflow',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_add_textflow',
  ),
  'PDF_add_thumbnail' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_add_thumbnail',
  ),
  'PDF_add_weblink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$lowerleftx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lowerlefty',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$upperrightx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$upperrighty',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_add_weblink',
  ),
  'PDF_arc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$beta',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_arc',
  ),
  'PDF_arcn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$beta',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_arcn',
  ),
  'PDF_attach_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$description',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$author',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$mimetype',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$icon',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_attach_file',
  ),
  'PDF_begin_document' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_begin_document',
  ),
  'PDF_begin_font' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$d',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$e',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'float',
        'name' => '$f',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_begin_font',
  ),
  'PDF_begin_glyph' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$glyphname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$wx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_begin_glyph',
  ),
  'PDF_begin_item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tag',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_begin_item',
  ),
  'PDF_begin_layer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$layer',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_begin_layer',
  ),
  'PDF_begin_page_ext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_begin_page_ext',
  ),
  'PDF_begin_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_begin_page',
  ),
  'PDF_begin_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$xstep',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ystep',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$painttype',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_begin_pattern',
  ),
  'PDF_begin_template_ext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_begin_template_ext',
  ),
  'PDF_begin_template' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_begin_template',
  ),
  'PDF_circle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$r',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_circle',
  ),
  'PDF_clip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_clip',
  ),
  'PDF_close_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_close_image',
  ),
  'PDF_close_pdi_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_close_pdi_page',
  ),
  'PDF_close_pdi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_close_pdi',
  ),
  'PDF_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_close',
  ),
  'PDF_closepath_fill_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_closepath_fill_stroke',
  ),
  'PDF_closepath_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_closepath_stroke',
  ),
  'PDF_closepath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_closepath',
  ),
  'PDF_concat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$d',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$e',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$f',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_concat',
  ),
  'PDF_continue_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_continue_text',
  ),
  'PDF_create_3dview' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_create_3dview',
  ),
  'PDF_create_action' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_create_action',
  ),
  'PDF_create_annotation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_create_annotation',
  ),
  'PDF_create_bookmark' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_create_bookmark',
  ),
  'PDF_create_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_create_field',
  ),
  'PDF_create_fieldgroup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_create_fieldgroup',
  ),
  'PDF_create_gstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_create_gstate',
  ),
  'PDF_create_pvf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_create_pvf',
  ),
  'PDF_create_textflow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_create_textflow',
  ),
  'PDF_curveto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$x3',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_curveto',
  ),
  'PDF_define_layer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_define_layer',
  ),
  'PDF_delete_pvf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_delete_pvf',
  ),
  'PDF_delete_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$table',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_delete_table',
  ),
  'PDF_delete_textflow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$textflow',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_delete_textflow',
  ),
  'PDF_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_delete',
  ),
  'PDF_encoding_set_char' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$slot',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$glyphname',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$uv',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_encoding_set_char',
  ),
  'PDF_end_document' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_document',
  ),
  'PDF_end_font' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_font',
  ),
  'PDF_end_glyph' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_glyph',
  ),
  'PDF_end_item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_item',
  ),
  'PDF_end_layer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_layer',
  ),
  'PDF_end_page_ext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_page_ext',
  ),
  'PDF_end_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_page',
  ),
  'PDF_end_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_pattern',
  ),
  'PDF_end_template' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_end_template',
  ),
  'PDF_endpath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_endpath',
  ),
  'PDF_fill_imageblock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$blockname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$image',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_fill_imageblock',
  ),
  'PDF_fill_pdfblock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$blockname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$contents',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_fill_pdfblock',
  ),
  'PDF_fill_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_fill_stroke',
  ),
  'PDF_fill_textblock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$blockname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_fill_textblock',
  ),
  'PDF_fill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_fill',
  ),
  'PDF_findfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fontname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$embed',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_findfont',
  ),
  'PDF_fit_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$image',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_fit_image',
  ),
  'PDF_fit_pdi_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_fit_pdi_page',
  ),
  'PDF_fit_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$table',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_fit_table',
  ),
  'PDF_fit_textflow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$textflow',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_fit_textflow',
  ),
  'PDF_fit_textline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_fit_textline',
  ),
  'PDF_get_apiname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_get_apiname',
  ),
  'PDF_get_buffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_get_buffer',
  ),
  'PDF_get_errmsg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_get_errmsg',
  ),
  'PDF_get_errnum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_get_errnum',
  ),
  'PDF_get_majorversion' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'PDF_get_majorversion',
  ),
  'PDF_get_minorversion' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'PDF_get_minorversion',
  ),
  'PDF_get_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$modifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_get_parameter',
  ),
  'PDF_get_pdi_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$reserved',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_get_pdi_parameter',
  ),
  'PDF_get_pdi_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$reserved',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_get_pdi_value',
  ),
  'PDF_get_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$modifier',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_get_value',
  ),
  'PDF_info_font' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$keyword',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_info_font',
  ),
  'PDF_info_matchbox' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$boxname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$keyword',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_info_matchbox',
  ),
  'PDF_info_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$table',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$keyword',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_info_table',
  ),
  'PDF_info_textflow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$textflow',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$keyword',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_info_textflow',
  ),
  'PDF_info_textline' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$keyword',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_info_textline',
  ),
  'PDF_initgraphics' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_initgraphics',
  ),
  'PDF_lineto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_lineto',
  ),
  'PDF_load_3ddata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_load_3ddata',
  ),
  'PDF_load_font' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fontname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_load_font',
  ),
  'PDF_load_iccprofile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$profilename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_load_iccprofile',
  ),
  'PDF_load_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$imagetype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_load_image',
  ),
  'PDF_makespotcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$spotname',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_makespotcolor',
  ),
  'PDF_moveto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_moveto',
  ),
  'PDF_new' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'PDF_new',
  ),
  'PDF_open_ccitt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$BitReverse',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$k',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$Blackls1',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_open_ccitt',
  ),
  'PDF_open_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_open_file',
  ),
  'PDF_open_image_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$imagetype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$stringparam',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$intparam',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_open_image_file',
  ),
  'PDF_open_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$imagetype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$components',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$bpc',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_open_image',
  ),
  'PDF_open_memory_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$image',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_open_memory_image',
  ),
  'PDF_open_pdi_document' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_open_pdi_document',
  ),
  'PDF_open_pdi_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pagenumber',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_open_pdi_page',
  ),
  'PDF_open_pdi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_open_pdi',
  ),
  'PDF_pcos_get_number' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_pcos_get_number',
  ),
  'PDF_pcos_get_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_pcos_get_stream',
  ),
  'PDF_pcos_get_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_pcos_get_string',
  ),
  'PDF_place_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$image',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$scale',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_place_image',
  ),
  'PDF_place_pdi_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$sx',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$sy',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_place_pdi_page',
  ),
  'PDF_process_pdi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$doc',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_process_pdi',
  ),
  'PDF_rect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_rect',
  ),
  'PDF_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_restore',
  ),
  'PDF_resume_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_resume_page',
  ),
  'PDF_rotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$phi',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_rotate',
  ),
  'PDF_save' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_save',
  ),
  'PDF_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$sy',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_scale',
  ),
  'PDF_set_border_color' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_border_color',
  ),
  'PDF_set_border_dash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$black',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$white',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_border_dash',
  ),
  'PDF_set_border_style' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$style',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_border_style',
  ),
  'PDF_set_gstate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$gstate',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_gstate',
  ),
  'PDF_set_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_info',
  ),
  'PDF_set_layer_dependency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_layer_dependency',
  ),
  'PDF_set_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_parameter',
  ),
  'PDF_set_text_pos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_text_pos',
  ),
  'PDF_set_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_set_value',
  ),
  'PDF_setcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fstype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$colorspace',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$c1',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$c2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$c3',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$c4',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setcolor',
  ),
  'PDF_setdash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$w',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setdash',
  ),
  'PDF_setdashpattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setdashpattern',
  ),
  'PDF_setflat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$flatness',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setflat',
  ),
  'PDF_setfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$fontsize',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setfont',
  ),
  'PDF_setgray_fill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$g',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setgray_fill',
  ),
  'PDF_setgray_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$g',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setgray_stroke',
  ),
  'PDF_setgray' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$g',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setgray',
  ),
  'PDF_setlinecap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$linecap',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setlinecap',
  ),
  'PDF_setlinejoin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setlinejoin',
  ),
  'PDF_setlinewidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setlinewidth',
  ),
  'PDF_setmatrix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$a',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$b',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$c',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$d',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$e',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$f',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setmatrix',
  ),
  'PDF_setmiterlimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$miter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setmiterlimit',
  ),
  'PDF_setrgbcolor_fill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setrgbcolor_fill',
  ),
  'PDF_setrgbcolor_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setrgbcolor_stroke',
  ),
  'PDF_setrgbcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_setrgbcolor',
  ),
  'PDF_shading_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$shading',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_shading_pattern',
  ),
  'PDF_shading' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$shtype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x0',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y0',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$c1',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'float',
        'name' => '$c2',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'float',
        'name' => '$c3',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'float',
        'name' => '$c4',
        'required' => true,
      ),
      10 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_shading',
  ),
  'PDF_shfill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$shading',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_shfill',
  ),
  'PDF_show_boxed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$top',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$feature',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'PDF_show_boxed',
  ),
  'PDF_show_xy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_show_xy',
  ),
  'PDF_show' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_show',
  ),
  'PDF_skew' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$beta',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_skew',
  ),
  'PDF_stringwidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$font',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$fontsize',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'PDF_stringwidth',
  ),
  'PDF_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_stroke',
  ),
  'PDF_suspend_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_suspend_page',
  ),
  'PDF_translate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$tx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$ty',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'PDF_translate',
  ),
  'PDF_utf16_to_utf8' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$utf16string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_utf16_to_utf8',
  ),
  'PDF_utf32_to_utf16' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$utf32string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$ordering',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_utf32_to_utf16',
  ),
  'PDF_utf8_to_utf16' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pdfdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$utf8string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$ordering',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'PDF_utf8_to_utf16',
  ),
  'ps_add_bookmark' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$parent',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$open',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_add_bookmark',
  ),
  'ps_add_launchlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_add_launchlink',
  ),
  'ps_add_locallink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_add_locallink',
  ),
  'ps_add_note' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$contents',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$title',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$icon',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$open',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_add_note',
  ),
  'ps_add_pdflink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$page',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$dest',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_add_pdflink',
  ),
  'ps_add_weblink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$llx',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$lly',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$urx',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ury',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_add_weblink',
  ),
  'ps_arc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$beta',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_arc',
  ),
  'ps_arcn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$alpha',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$beta',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_arcn',
  ),
  'ps_begin_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_begin_page',
  ),
  'ps_begin_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$xstep',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ystep',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$painttype',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_begin_pattern',
  ),
  'ps_begin_template' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_begin_template',
  ),
  'ps_circle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$radius',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_circle',
  ),
  'ps_clip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_clip',
  ),
  'ps_close_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$imageid',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'ps_close_image',
  ),
  'ps_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_close',
  ),
  'ps_closepath_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_closepath_stroke',
  ),
  'ps_closepath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_closepath',
  ),
  'ps_continue_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_continue_text',
  ),
  'ps_curveto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$x2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$y2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$x3',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$y3',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_curveto',
  ),
  'ps_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_delete',
  ),
  'ps_end_page' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_end_page',
  ),
  'ps_end_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_end_pattern',
  ),
  'ps_end_template' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_end_template',
  ),
  'ps_fill_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_fill_stroke',
  ),
  'ps_fill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_fill',
  ),
  'ps_findfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$fontname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$embed',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_findfont',
  ),
  'ps_get_buffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ps_get_buffer',
  ),
  'ps_get_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$modifier',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ps_get_parameter',
  ),
  'ps_get_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$modifier',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'ps_get_value',
  ),
  'ps_hyphenate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ps_hyphenate',
  ),
  'ps_include_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_include_file',
  ),
  'ps_lineto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_lineto',
  ),
  'ps_makespotcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$reserved',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_makespotcolor',
  ),
  'ps_moveto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_moveto',
  ),
  'ps_new' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'ps_new',
  ),
  'ps_open_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_open_file',
  ),
  'ps_open_image_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$stringparam',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$intparam',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_open_image_file',
  ),
  'ps_open_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$lenght',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$components',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'int',
        'name' => '$bpc',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_open_image',
  ),
  'ps_open_memory_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$gd',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_open_memory_image',
  ),
  'ps_place_image' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$imageid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$scale',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_place_image',
  ),
  'ps_rect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_rect',
  ),
  'ps_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_restore',
  ),
  'ps_rotate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$rot',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_rotate',
  ),
  'ps_save' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_save',
  ),
  'ps_scale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_scale',
  ),
  'ps_set_border_color' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$red',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$green',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$blue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_set_border_color',
  ),
  'ps_set_border_dash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$black',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$white',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_set_border_dash',
  ),
  'ps_set_border_style' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$style',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_set_border_style',
  ),
  'ps_set_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$p',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_set_info',
  ),
  'ps_set_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_set_parameter',
  ),
  'ps_set_text_pos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_set_text_pos',
  ),
  'ps_set_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_set_value',
  ),
  'ps_setcolor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$colorspace',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$c1',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$c2',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$c3',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$c4',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setcolor',
  ),
  'ps_setdash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$on',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$off',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setdash',
  ),
  'ps_setflat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setflat',
  ),
  'ps_setfont' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$fontid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setfont',
  ),
  'ps_setgray' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$gray',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setgray',
  ),
  'ps_setlinecap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setlinecap',
  ),
  'ps_setlinejoin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setlinejoin',
  ),
  'ps_setlinewidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setlinewidth',
  ),
  'ps_setmiterlimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setmiterlimit',
  ),
  'ps_setoverprintmode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setoverprintmode',
  ),
  'ps_setpolydash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$arr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_setpolydash',
  ),
  'ps_shading_pattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$shadingid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_shading_pattern',
  ),
  'ps_shading' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x0',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y0',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$x1',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$y1',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'float',
        'name' => '$c1',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'float',
        'name' => '$c2',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'float',
        'name' => '$c3',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'float',
        'name' => '$c4',
        'required' => true,
      ),
      10 => 
      array (
        'type' => 'string',
        'name' => '$optlist',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_shading',
  ),
  'ps_shfill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$shadingid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_shfill',
  ),
  'ps_show_boxed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$left',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$bottom',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$width',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$height',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$hmode',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$feature',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ps_show_boxed',
  ),
  'ps_show_xy2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$xcoor',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$ycoor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_show_xy2',
  ),
  'ps_show_xy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_show_xy',
  ),
  'ps_show2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_show2',
  ),
  'ps_show' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_show',
  ),
  'ps_string_geometry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$fontid',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'initializer' => '= 0.0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'ps_string_geometry',
  ),
  'ps_stringwidth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$fontid',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'initializer' => '= 0.0',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'ps_stringwidth',
  ),
  'ps_stroke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_stroke',
  ),
  'ps_symbol_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$ord',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$fontid',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ps_symbol_name',
  ),
  'ps_symbol_width' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$ord',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$fontid',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$size',
        'initializer' => '= 0.0',
        'required' => false,
      ),
    ),
    'type' => 'float',
    'name' => 'ps_symbol_width',
  ),
  'ps_symbol' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$ord',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_symbol',
  ),
  'ps_translate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$psdoc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$x',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$y',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ps_translate',
  ),
  'rpm_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$rpmr',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rpm_close',
  ),
  'rpm_get_tag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$rpmr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$tagnum',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'rpm_get_tag',
  ),
  'rpm_is_valid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rpm_is_valid',
  ),
  'rpm_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'rpm_open',
  ),
  'rpm_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'rpm_version',
  ),
  'eio_busy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$delay',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_busy',
  ),
  'eio_cancel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_cancel',
  ),
  'eio_chmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_chmod',
  ),
  'eio_chown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$uid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$gid',
        'initializer' => '= -1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_chown',
  ),
  'eio_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_close',
  ),
  'eio_custom' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$execute',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_custom',
  ),
  'eio_dup2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$fd2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_dup2',
  ),
  'eio_event_loop' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'eio_event_loop',
  ),
  'eio_fallocate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_fallocate',
  ),
  'eio_fchmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_fchmod',
  ),
  'eio_fchown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$uid',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$gid',
        'initializer' => '= -1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_fchown',
  ),
  'eio_fdatasync' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_fdatasync',
  ),
  'eio_fstat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_fstat',
  ),
  'eio_fstatvfs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_fstatvfs',
  ),
  'eio_fsync' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_fsync',
  ),
  'eio_ftruncate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_ftruncate',
  ),
  'eio_futime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$atime',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$mtime',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_futime',
  ),
  'eio_get_event_stream' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mixed',
    'name' => 'eio_get_event_stream',
  ),
  'eio_get_last_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$req',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'eio_get_last_error',
  ),
  'eio_grp_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$req',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_grp_add',
  ),
  'eio_grp_cancel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grp',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_grp_cancel',
  ),
  'eio_grp_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$grp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_grp_limit',
  ),
  'eio_grp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_grp',
  ),
  'eio_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'eio_init',
  ),
  'eio_link' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_link',
  ),
  'eio_lstat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_lstat',
  ),
  'eio_mkdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_mkdir',
  ),
  'eio_mknod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$dev',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_mknod',
  ),
  'eio_nop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_nop',
  ),
  'eio_npending' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'eio_npending',
  ),
  'eio_nready' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'eio_nready',
  ),
  'eio_nreqs' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'eio_nreqs',
  ),
  'eio_nthreads' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'eio_nthreads',
  ),
  'eio_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_open',
  ),
  'eio_poll' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'eio_poll',
  ),
  'eio_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_read',
  ),
  'eio_readahead' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_readahead',
  ),
  'eio_readdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_readdir',
  ),
  'eio_readlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_readlink',
  ),
  'eio_realpath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_realpath',
  ),
  'eio_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_rename',
  ),
  'eio_rmdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_rmdir',
  ),
  'eio_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$whence',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_seek',
  ),
  'eio_sendfile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$out_fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$in_fd',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_sendfile',
  ),
  'eio_set_max_idle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$nthreads',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_set_max_idle',
  ),
  'eio_set_max_parallel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$nthreads',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_set_max_parallel',
  ),
  'eio_set_max_poll_reqs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$nreqs',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_set_max_poll_reqs',
  ),
  'eio_set_max_poll_time' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$nseconds',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_set_max_poll_time',
  ),
  'eio_set_min_parallel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$nthreads',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'eio_set_min_parallel',
  ),
  'eio_stat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_stat',
  ),
  'eio_statvfs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_statvfs',
  ),
  'eio_symlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$new_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_symlink',
  ),
  'eio_sync_file_range' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$nbytes',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_sync_file_range',
  ),
  'eio_sync' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_sync',
  ),
  'eio_syncfs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_syncfs',
  ),
  'eio_truncate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_truncate',
  ),
  'eio_unlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_unlink',
  ),
  'eio_utime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$atime',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$mtime',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_utime',
  ),
  'eio_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$pri',
        'initializer' => '= EIO_PRI_DEFAULT',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'initializer' => '= NULL',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'eio_write',
  ),
  'callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$a',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$b',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'callback',
  ),
  'backend' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'backend',
  ),
  'depth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'int',
    'name' => 'depth',
  ),
  'embeddableBackends' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'embeddableBackends',
  ),
  'feedSignal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$signum',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'feedSignal',
  ),
  'feedSignalEvent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$signum',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'feedSignalEvent',
  ),
  'iteration' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'int',
    'name' => 'iteration',
  ),
  'now' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'double',
    'name' => 'now',
  ),
  'nowUpdate' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'nowUpdate',
  ),
  'recommendedBackends' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'recommendedBackends',
  ),
  'resume' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'resume',
  ),
  'run' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'run',
  ),
  'sleep' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'sleep',
  ),
  'supportedBackends' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'void',
    'name' => 'supportedBackends',
  ),
  'suspend' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'suspend',
  ),
  'verify' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'verify',
  ),
  'createStopped' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'double',
        'name' => '$after',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'double',
        'name' => '$repeat',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvTimer',
    'name' => 'createStopped',
  ),
  'sweep' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sweep',
  ),
  'check' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$priority',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvCheck',
    'name' => 'check',
  ),
  'child' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$trace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$priority',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvChild',
    'name' => 'child',
  ),
  'defaultLoop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= Ev::FLAG_AUTO',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'double',
        'name' => '$io_interval',
        'initializer' => '= 0.',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'double',
        'name' => '$timeout_interval',
        'initializer' => '= 0.',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'EvLoop',
    'name' => 'defaultLoop',
  ),
  'embed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$other',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$callback',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$priority',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvEmbed',
    'name' => 'embed',
  ),
  'fork' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvFork',
    'name' => 'fork',
  ),
  'idle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvIdle',
    'name' => 'idle',
  ),
  'invokePending' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'invokePending',
  ),
  'io' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$events',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvIo',
    'name' => 'io',
  ),
  'loopFork' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'loopFork',
  ),
  'periodic' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'double',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'double',
        'name' => '$interval',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'EvPeriodic',
    'name' => 'periodic',
  ),
  'signal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBase',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$signum',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$cb',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Event',
    'name' => 'signal',
  ),
  'timer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBase',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$cb',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Event',
    'name' => 'timer',
  ),
  'again' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'again',
  ),
  'at' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'double',
    'name' => 'at',
  ),
  'attr' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'attr',
  ),
  'prev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'prev',
  ),
  'feed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$revents',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'feed',
  ),
  'getLoop' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'EvLoop',
    'name' => 'getLoop',
  ),
  'invoke' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$parameter',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'invoke',
  ),
  'keepalive' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'keepalive',
  ),
  'expect_expectl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$expect',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$cases',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$match',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'expect_expectl',
  ),
  'expect_popen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'expect_popen',
  ),
  'event_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_add',
  ),
  'event_base_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'event_base_free',
  ),
  'event_base_loop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'event_base_loop',
  ),
  'event_base_loopbreak' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_base_loopbreak',
  ),
  'event_base_loopexit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_base_loopexit',
  ),
  'event_base_new' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'event_base_new',
  ),
  'event_base_priority_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$npriorities',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_base_priority_init',
  ),
  'event_base_reinit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_base_reinit',
  ),
  'event_base_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_base_set',
  ),
  'event_buffer_base_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$event_base',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_buffer_base_set',
  ),
  'event_buffer_disable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$events',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_buffer_disable',
  ),
  'event_buffer_enable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$events',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_buffer_enable',
  ),
  'event_buffer_fd_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$fd',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'event_buffer_fd_set',
  ),
  'event_buffer_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'event_buffer_free',
  ),
  'event_buffer_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$readcb',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$writecb',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$errorcb',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'event_buffer_new',
  ),
  'event_buffer_priority_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_buffer_priority_set',
  ),
  'event_buffer_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$data_size',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'event_buffer_read',
  ),
  'event_buffer_set_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$readcb',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$writecb',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$errorcb',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_buffer_set_callback',
  ),
  'event_buffer_timeout_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$read_timeout',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$write_timeout',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'event_buffer_timeout_set',
  ),
  'event_buffer_watermark_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$events',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$lowmark',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$highmark',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'event_buffer_watermark_set',
  ),
  'event_buffer_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bevent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$data_size',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_buffer_write',
  ),
  'event_del' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_del',
  ),
  'event_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'event_free',
  ),
  'event_new' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'event_new',
  ),
  'event_priority_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_priority_set',
  ),
  'event_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$events',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_set',
  ),
  'event_timer_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$event',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'event_timer_set',
  ),
  'pcntl_alarm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_alarm',
  ),
  'pcntl_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$envs',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'pcntl_exec',
  ),
  'pcntl_fork' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'pcntl_fork',
  ),
  'pcntl_get_last_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'pcntl_get_last_error',
  ),
  'pcntl_getpriority' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'initializer' => '= getmypid()',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$process_identifier',
        'initializer' => '= PRIO_PROCESS',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_getpriority',
  ),
  'pcntl_setpriority' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'initializer' => '= getmypid()',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$process_identifier',
        'initializer' => '= PRIO_PROCESS',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pcntl_setpriority',
  ),
  'pcntl_signal_dispatch' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'pcntl_signal_dispatch',
  ),
  'pcntl_signal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$signo',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable|int',
        'name' => '$handler',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$restart_syscalls',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pcntl_signal',
  ),
  'pcntl_sigprocmask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$how',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$set',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$oldset',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'pcntl_sigprocmask',
  ),
  'pcntl_sigtimedwait' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$set',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$siginfo',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$nanoseconds',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_sigtimedwait',
  ),
  'pcntl_sigwaitinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$set',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$siginfo',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_sigwaitinfo',
  ),
  'pcntl_strerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errno',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'pcntl_strerror',
  ),
  'pcntl_wait' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '&$status',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_wait',
  ),
  'pcntl_waitpid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$status',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_waitpid',
  ),
  'pcntl_wexitstatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_wexitstatus',
  ),
  'pcntl_wifexited' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pcntl_wifexited',
  ),
  'pcntl_wifsignaled' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pcntl_wifsignaled',
  ),
  'pcntl_wifstopped' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'pcntl_wifstopped',
  ),
  'pcntl_wstopsig' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_wstopsig',
  ),
  'pcntl_wtermsig' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'pcntl_wtermsig',
  ),
  'posix_access' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= POSIX_F_OK',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_access',
  ),
  'posix_ctermid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'posix_ctermid',
  ),
  'posix_get_last_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_get_last_error',
  ),
  'posix_getcwd' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'posix_getcwd',
  ),
  'posix_getegid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_getegid',
  ),
  'posix_geteuid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_geteuid',
  ),
  'posix_getgid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_getgid',
  ),
  'posix_getgrgid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$gid',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'posix_getgrgid',
  ),
  'posix_getgrnam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'posix_getgrnam',
  ),
  'posix_getgroups' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'posix_getgroups',
  ),
  'posix_getlogin' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'posix_getlogin',
  ),
  'posix_getpgid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'posix_getpgid',
  ),
  'posix_getpgrp' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_getpgrp',
  ),
  'posix_getpid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_getpid',
  ),
  'posix_getppid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_getppid',
  ),
  'posix_getpwnam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'posix_getpwnam',
  ),
  'posix_getpwuid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$uid',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'posix_getpwuid',
  ),
  'posix_getrlimit' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'posix_getrlimit',
  ),
  'posix_getsid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'posix_getsid',
  ),
  'posix_getuid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_getuid',
  ),
  'posix_initgroups' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$base_group_id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_initgroups',
  ),
  'posix_isatty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_isatty',
  ),
  'posix_kill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sig',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_kill',
  ),
  'posix_mkfifo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_mkfifo',
  ),
  'posix_mknod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$major',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$minor',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_mknod',
  ),
  'posix_setegid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$gid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_setegid',
  ),
  'posix_seteuid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$uid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_seteuid',
  ),
  'posix_setgid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$gid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_setgid',
  ),
  'posix_setpgid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pgid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_setpgid',
  ),
  'posix_setsid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'posix_setsid',
  ),
  'posix_setuid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$uid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'posix_setuid',
  ),
  'posix_strerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errno',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'posix_strerror',
  ),
  'posix_times' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'posix_times',
  ),
  'posix_ttyname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$fd',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'posix_ttyname',
  ),
  'posix_uname' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'posix_uname',
  ),
  'escapeshellarg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'escapeshellarg',
  ),
  'escapeshellcmd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'escapeshellcmd',
  ),
  'passthru' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$return_var',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'passthru',
  ),
  'proc_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$process',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'proc_close',
  ),
  'proc_get_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$process',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'proc_get_status',
  ),
  'proc_nice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$increment',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'proc_nice',
  ),
  'proc_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cmd',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$descriptorspec',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$pipes',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$cwd',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$env',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'array',
        'name' => '$other_options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'proc_open',
  ),
  'proc_terminate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$process',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$signal',
        'initializer' => '= 15',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'proc_terminate',
  ),
  'shell_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cmd',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'shell_exec',
  ),
  'system' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'system',
  ),
  'chunk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$size',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'boolean',
        'name' => '$preserve',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'chunk',
  ),
  'extend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'extend',
  ),
  'from' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Closure',
        'name' => '$run',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Closure',
        'name' => '$construct',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Threaded',
    'name' => 'from',
  ),
  'getTerminationInfo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getTerminationInfo',
  ),
  'isTerminated' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'isTerminated',
  ),
  'isWaiting' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'isWaiting',
  ),
  'lock' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'lock',
  ),
  'notify' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'abstract',
    'type' => 'void',
    'name' => 'notify',
  ),
  'shift' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'shift',
  ),
  'synchronized' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Closure',
        'name' => '$block',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'synchronized',
  ),
  'unlock' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'unlock',
  ),
  'wait' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'wait',
  ),
  'detach' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'HttpRequest',
        'name' => '$request',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'detach',
  ),
  'getCreatorId' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getCreatorId',
  ),
  'getCurrentThread' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Thread',
    'name' => 'getCurrentThread',
  ),
  'getCurrentThreadId' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getCurrentThreadId',
  ),
  'globally' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'globally',
  ),
  'isJoined' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'isJoined',
  ),
  'isStarted' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'isStarted',
  ),
  'join' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'join',
  ),
  'getStacked' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getStacked',
  ),
  'isShutdown' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'isShutdown',
  ),
  'isWorking' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'isWorking',
  ),
  'shutdown' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'shutdown',
  ),
  'stack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Threaded',
        'name' => '&$work',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'stack',
  ),
  'unstack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Threaded',
        'name' => '&$work',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'unstack',
  ),
  'isGarbage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isGarbage',
  ),
  'setGarbage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setGarbage',
  ),
  'collect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Callable',
        'name' => '$collector',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'collect',
  ),
  'resize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'resize',
  ),
  'submit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Threaded',
        'name' => '$task',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'submit',
  ),
  'submitTo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$worker',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Threaded',
        'name' => '$task',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'submitTo',
  ),
  'trylock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'long',
        'name' => '$mutex',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'boolean',
    'name' => 'trylock',
  ),
  'broadcast' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'long',
        'name' => '$condition',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'boolean',
    'name' => 'broadcast',
  ),
  'ftok' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$proj',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ftok',
  ),
  'msg_get_queue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$perms',
        'initializer' => '= 0666',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'msg_get_queue',
  ),
  'msg_queue_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msg_queue_exists',
  ),
  'msg_receive' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$queue',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$desiredmsgtype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$msgtype',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$maxsize',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '&$message',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$unserialize',
        'initializer' => '= true',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '&$errorcode',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'msg_receive',
  ),
  'msg_remove_queue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$queue',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msg_remove_queue',
  ),
  'msg_send' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$queue',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$msgtype',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$message',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$serialize',
        'initializer' => '= true',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$blocking',
        'initializer' => '= true',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '&$errorcode',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'msg_send',
  ),
  'msg_set_queue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$queue',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msg_set_queue',
  ),
  'msg_stat_queue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$queue',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'msg_stat_queue',
  ),
  'sem_acquire' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sem_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sem_acquire',
  ),
  'sem_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max_acquire',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$perm',
        'initializer' => '= 0666',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$auto_release',
        'initializer' => '= 1',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'sem_get',
  ),
  'sem_release' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sem_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sem_release',
  ),
  'sem_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sem_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'sem_remove',
  ),
  'shm_attach' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$memsize',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$perm',
        'initializer' => '= 0666',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'shm_attach',
  ),
  'shm_detach' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$shm_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shm_detach',
  ),
  'shm_get_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$shm_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$variable_key',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'shm_get_var',
  ),
  'shm_has_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$shm_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$variable_key',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shm_has_var',
  ),
  'shm_put_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$shm_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$variable_key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$variable',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shm_put_var',
  ),
  'shm_remove_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$shm_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$variable_key',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shm_remove_var',
  ),
  'shm_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$shm_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shm_remove',
  ),
  'shmop_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$shmid',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'shmop_close',
  ),
  'shmop_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$shmid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shmop_delete',
  ),
  'shmop_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'shmop_open',
  ),
  'shmop_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$shmid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'shmop_read',
  ),
  'shmop_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$shmid',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'shmop_size',
  ),
  'shmop_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$shmid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'shmop_write',
  ),
  'fire' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'fire',
  ),
  'readlock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$wait',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'readlock',
  ),
  'readunlock' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'readunlock',
  ),
  'writelock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$wait',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'writelock',
  ),
  'writeunlock' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'writeunlock',
  ),
  'geoip_asnum_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_asnum_by_name',
  ),
  'geoip_continent_code_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_continent_code_by_name',
  ),
  'geoip_country_code_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_country_code_by_name',
  ),
  'geoip_country_code3_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_country_code3_by_name',
  ),
  'geoip_country_name_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_country_name_by_name',
  ),
  'geoip_database_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$database',
        'initializer' => '= GEOIP_COUNTRY_EDITION',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_database_info',
  ),
  'geoip_db_avail' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$database',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'geoip_db_avail',
  ),
  'geoip_db_filename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$database',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_db_filename',
  ),
  'geoip_db_get_all_info' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'geoip_db_get_all_info',
  ),
  'geoip_domain_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_domain_by_name',
  ),
  'geoip_id_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'geoip_id_by_name',
  ),
  'geoip_isp_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_isp_by_name',
  ),
  'geoip_netspeedcell_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_netspeedcell_by_name',
  ),
  'geoip_org_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_org_by_name',
  ),
  'geoip_record_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'geoip_record_by_name',
  ),
  'geoip_region_by_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'geoip_region_by_name',
  ),
  'geoip_region_name_by_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$country_code',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$region_code',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_region_name_by_code',
  ),
  'geoip_setup_custom_directory' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'geoip_setup_custom_directory',
  ),
  'geoip_time_zone_by_country_and_region' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$country_code',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$region_code',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'geoip_time_zone_by_country_and_region',
  ),
  'fann_cascadetrain_on_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$max_neurons',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$neurons_between_reports',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$desired_error',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_cascadetrain_on_data',
  ),
  'fann_cascadetrain_on_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$max_neurons',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$neurons_between_reports',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$desired_error',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_cascadetrain_on_file',
  ),
  'fann_clear_scaling_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_clear_scaling_params',
  ),
  'fann_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_copy',
  ),
  'fann_create_from_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$configuration_file',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_create_from_file',
  ),
  'fann_create_shortcut_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num_layers',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$layers',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_create_shortcut_array',
  ),
  'fann_create_shortcut' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num_layers',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num_neurons1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num_neurons2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'reference',
    'name' => 'fann_create_shortcut',
  ),
  'fann_create_sparse_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$connection_rate',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num_layers',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$layers',
        'required' => true,
      ),
    ),
    'type' => 'ReturnType',
    'name' => 'fann_create_sparse_array',
  ),
  'fann_create_sparse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$connection_rate',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num_layers',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num_neurons1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$num_neurons2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'ReturnType',
    'name' => 'fann_create_sparse',
  ),
  'fann_create_standard_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num_layers',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$layers',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_create_standard_array',
  ),
  'fann_create_standard' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num_layers',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num_neurons1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num_neurons2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_create_standard',
  ),
  'fann_create_train_from_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num_input',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num_output',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'collable',
        'name' => '$user_function',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_create_train_from_callback',
  ),
  'fann_create_train' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$num_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num_input',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$num_output',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_create_train',
  ),
  'fann_descale_input' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$input_vector',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_descale_input',
  ),
  'fann_descale_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$output_vector',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_descale_output',
  ),
  'fann_descale_train' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_descale_train',
  ),
  'fann_destroy_train' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_destroy_train',
  ),
  'fann_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_destroy',
  ),
  'fann_duplicate_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_duplicate_train_data',
  ),
  'fann_get_activation_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$layer',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$neuron',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_activation_function',
  ),
  'fann_get_activation_steepness' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$layer',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$neuron',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_activation_steepness',
  ),
  'fann_get_bias_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fann_get_bias_array',
  ),
  'fann_get_bit_fail_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_bit_fail_limit',
  ),
  'fann_get_bit_fail' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_bit_fail',
  ),
  'fann_get_cascade_activation_functions_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_activation_functions_count',
  ),
  'fann_get_cascade_activation_functions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fann_get_cascade_activation_functions',
  ),
  'fann_get_cascade_activation_steepnesses_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_activation_steepnesses_count',
  ),
  'fann_get_cascade_activation_steepnesses' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fann_get_cascade_activation_steepnesses',
  ),
  'fann_get_cascade_candidate_change_fraction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_cascade_candidate_change_fraction',
  ),
  'fann_get_cascade_candidate_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_cascade_candidate_limit',
  ),
  'fann_get_cascade_candidate_stagnation_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_cascade_candidate_stagnation_epochs',
  ),
  'fann_get_cascade_max_cand_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_max_cand_epochs',
  ),
  'fann_get_cascade_max_out_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_max_out_epochs',
  ),
  'fann_get_cascade_min_cand_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_min_cand_epochs',
  ),
  'fann_get_cascade_min_out_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_min_out_epochs',
  ),
  'fann_get_cascade_num_candidate_groups' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_num_candidate_groups',
  ),
  'fann_get_cascade_num_candidates' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_num_candidates',
  ),
  'fann_get_cascade_output_change_fraction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_cascade_output_change_fraction',
  ),
  'fann_get_cascade_output_stagnation_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_cascade_output_stagnation_epochs',
  ),
  'fann_get_cascade_weight_multiplier' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_cascade_weight_multiplier',
  ),
  'fann_get_connection_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fann_get_connection_array',
  ),
  'fann_get_connection_rate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_connection_rate',
  ),
  'fann_get_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$errdat',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_errno',
  ),
  'fann_get_errstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$errdat',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'fann_get_errstr',
  ),
  'fann_get_layer_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fann_get_layer_array',
  ),
  'fann_get_learning_momentum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_learning_momentum',
  ),
  'fann_get_learning_rate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_learning_rate',
  ),
  'fann_get_MSE' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_MSE',
  ),
  'fann_get_network_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_network_type',
  ),
  'fann_get_num_input' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_num_input',
  ),
  'fann_get_num_layers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_num_layers',
  ),
  'fann_get_num_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_num_output',
  ),
  'fann_get_quickprop_decay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_quickprop_decay',
  ),
  'fann_get_quickprop_mu' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_quickprop_mu',
  ),
  'fann_get_rprop_decrease_factor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_rprop_decrease_factor',
  ),
  'fann_get_rprop_delta_max' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_rprop_delta_max',
  ),
  'fann_get_rprop_delta_min' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_rprop_delta_min',
  ),
  'fann_get_rprop_delta_zero' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'ReturnType',
    'name' => 'fann_get_rprop_delta_zero',
  ),
  'fann_get_rprop_increase_factor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_rprop_increase_factor',
  ),
  'fann_get_sarprop_step_error_shift' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_sarprop_step_error_shift',
  ),
  'fann_get_sarprop_step_error_threshold_factor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_sarprop_step_error_threshold_factor',
  ),
  'fann_get_sarprop_temperature' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_sarprop_temperature',
  ),
  'fann_get_sarprop_weight_decay_shift' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_get_sarprop_weight_decay_shift',
  ),
  'fann_get_total_connections' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_total_connections',
  ),
  'fann_get_total_neurons' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_total_neurons',
  ),
  'fann_get_train_error_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_train_error_function',
  ),
  'fann_get_train_stop_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_train_stop_function',
  ),
  'fann_get_training_algorithm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_get_training_algorithm',
  ),
  'fann_init_weights' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_init_weights',
  ),
  'fann_length_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_length_train_data',
  ),
  'fann_merge_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$data1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$data2',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_merge_train_data',
  ),
  'fann_num_input_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_num_input_train_data',
  ),
  'fann_num_output_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fann_num_output_train_data',
  ),
  'fann_print_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$errdat',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'fann_print_error',
  ),
  'fann_randomize_weights' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$min_weight',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$max_weight',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_randomize_weights',
  ),
  'fann_read_train_from_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_read_train_from_file',
  ),
  'fann_reset_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$errdat',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'fann_reset_errno',
  ),
  'fann_reset_errstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$errdat',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'fann_reset_errstr',
  ),
  'fann_reset_MSE' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ann',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_reset_MSE',
  ),
  'fann_run' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$input',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fann_run',
  ),
  'fann_save_train' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_save_train',
  ),
  'fann_save' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$configuration_file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_save',
  ),
  'fann_scale_input_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$new_min',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$new_max',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_scale_input_train_data',
  ),
  'fann_scale_input' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$input_vector',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_scale_input',
  ),
  'fann_scale_output_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$new_min',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$new_max',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_scale_output_train_data',
  ),
  'fann_scale_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$output_vector',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_scale_output',
  ),
  'fann_scale_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$new_min',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$new_max',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_scale_train_data',
  ),
  'fann_scale_train' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_scale_train',
  ),
  'fann_set_activation_function_hidden' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$activation_function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_function_hidden',
  ),
  'fann_set_activation_function_layer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$activation_function',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$layer',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_function_layer',
  ),
  'fann_set_activation_function_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$activation_function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_function_output',
  ),
  'fann_set_activation_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$activation_function',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$layer',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$neuron',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_function',
  ),
  'fann_set_activation_steepness_hidden' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$activation_steepness',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_steepness_hidden',
  ),
  'fann_set_activation_steepness_layer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$activation_steepness',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$layer',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_steepness_layer',
  ),
  'fann_set_activation_steepness_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$activation_steepness',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_steepness_output',
  ),
  'fann_set_activation_steepness' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$activation_steepness',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$layer',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$neuron',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_activation_steepness',
  ),
  'fann_set_bit_fail_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$bit_fail_limit',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_bit_fail_limit',
  ),
  'fann_set_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'collable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_callback',
  ),
  'fann_set_cascade_activation_functions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$cascade_activation_functions',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_activation_functions',
  ),
  'fann_set_cascade_activation_steepnesses' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$cascade_activation_steepnesses_count',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_activation_steepnesses',
  ),
  'fann_set_cascade_candidate_change_fraction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$cascade_candidate_change_fraction',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_candidate_change_fraction',
  ),
  'fann_set_cascade_candidate_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$cascade_candidate_limit',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_candidate_limit',
  ),
  'fann_set_cascade_candidate_stagnation_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cascade_candidate_stagnation_epochs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_candidate_stagnation_epochs',
  ),
  'fann_set_cascade_max_cand_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cascade_max_cand_epochs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_max_cand_epochs',
  ),
  'fann_set_cascade_max_out_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cascade_max_out_epochs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_max_out_epochs',
  ),
  'fann_set_cascade_min_cand_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cascade_min_cand_epochs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_min_cand_epochs',
  ),
  'fann_set_cascade_min_out_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cascade_min_out_epochs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_min_out_epochs',
  ),
  'fann_set_cascade_num_candidate_groups' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cascade_num_candidate_groups',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_num_candidate_groups',
  ),
  'fann_set_cascade_output_change_fraction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$cascade_output_change_fraction',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_output_change_fraction',
  ),
  'fann_set_cascade_output_stagnation_epochs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$cascade_output_stagnation_epochs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_output_stagnation_epochs',
  ),
  'fann_set_cascade_weight_multiplier' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$cascade_weight_multiplier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_cascade_weight_multiplier',
  ),
  'fann_set_error_log' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$errdat',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$log_file',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'fann_set_error_log',
  ),
  'fann_set_input_scaling_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$new_input_min',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$new_input_max',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_input_scaling_params',
  ),
  'fann_set_learning_momentum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$learning_momentum',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_learning_momentum',
  ),
  'fann_set_learning_rate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$learning_rate',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_learning_rate',
  ),
  'fann_set_output_scaling_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$new_output_min',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$new_output_max',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_output_scaling_params',
  ),
  'fann_set_quickprop_decay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$quickprop_decay',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_quickprop_decay',
  ),
  'fann_set_quickprop_mu' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$quickprop_mu',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_quickprop_mu',
  ),
  'fann_set_rprop_decrease_factor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$rprop_decrease_factor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_rprop_decrease_factor',
  ),
  'fann_set_rprop_delta_max' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$rprop_delta_max',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_rprop_delta_max',
  ),
  'fann_set_rprop_delta_min' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$rprop_delta_min',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_rprop_delta_min',
  ),
  'fann_set_rprop_delta_zero' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$rprop_delta_zero',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_rprop_delta_zero',
  ),
  'fann_set_rprop_increase_factor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$rprop_increase_factor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_rprop_increase_factor',
  ),
  'fann_set_sarprop_step_error_shift' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sarprop_step_error_shift',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_sarprop_step_error_shift',
  ),
  'fann_set_sarprop_step_error_threshold_factor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sarprop_step_error_threshold_factor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_sarprop_step_error_threshold_factor',
  ),
  'fann_set_sarprop_temperature' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sarprop_temperature',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_sarprop_temperature',
  ),
  'fann_set_sarprop_weight_decay_shift' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$sarprop_weight_decay_shift',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_sarprop_weight_decay_shift',
  ),
  'fann_set_scaling_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$new_input_min',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$new_input_max',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$new_output_min',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'float',
        'name' => '$new_output_max',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_scaling_params',
  ),
  'fann_set_train_error_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$error_function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_train_error_function',
  ),
  'fann_set_train_stop_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$stop_function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_train_stop_function',
  ),
  'fann_set_training_algorithm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$training_algorithm',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_training_algorithm',
  ),
  'fann_set_weight_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$connections',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_weight_array',
  ),
  'fann_set_weight' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$from_neuron',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$to_neuron',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$weight',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_set_weight',
  ),
  'fann_shuffle_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$train_data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_shuffle_train_data',
  ),
  'fann_subset_train_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pos',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fann_subset_train_data',
  ),
  'fann_test_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_test_data',
  ),
  'fann_test' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$input',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$desired_output',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_test',
  ),
  'fann_train_epoch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'fann_train_epoch',
  ),
  'fann_train_on_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$max_epochs',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$epochs_between_reports',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$desired_error',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_train_on_data',
  ),
  'fann_train_on_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$max_epochs',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$epochs_between_reports',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$desired_error',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_train_on_file',
  ),
  'fann_train' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ann',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$input',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$desired_output',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fann_train',
  ),
  'getFromNeuron' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFromNeuron',
  ),
  'getToNeuron' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getToNeuron',
  ),
  'getWeight' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getWeight',
  ),
  'setWeight' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$weight',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setWeight',
  ),
  'jsonSerialize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'abstract',
    'type' => 'mixed',
    'name' => 'jsonSerialize',
  ),
  'json_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$json',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$assoc',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'initializer' => '= 512',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'json_decode',
  ),
  'json_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'initializer' => '= 512',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'json_encode',
  ),
  'json_last_error_msg' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'json_last_error_msg',
  ),
  'json_last_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'json_last_error',
  ),
  'byCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$nth_index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'byCount',
  ),
  'firstEmpty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$index',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'firstEmpty',
  ),
  'lastEmpty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'lastEmpty',
  ),
  'memoryUsage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'memoryUsage',
  ),
  'nextEmpty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'nextEmpty',
  ),
  'prevEmpty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'prevEmpty',
  ),
  'judy_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Judy',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'judy_type',
  ),
  'judy_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'judy_version',
  ),
  'call' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$parameters',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'call',
  ),
  'eval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$tpl_content',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tpl_vars',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'eval',
  ),
  'include' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'include',
  ),
  'registerCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'registerCallback',
  ),
  'connection_aborted' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'connection_aborted',
  ),
  'connection_status' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'connection_status',
  ),
  'constant' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'constant',
  ),
  'define' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$case_insensitive',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'define',
  ),
  'defined' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'defined',
  ),
  'exit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'double',
        'name' => '$timeout',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'exit',
  ),
  'get_browser' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$user_agent',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$return_array',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'get_browser',
  ),
  '__halt_compiler' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => '__halt_compiler',
  ),
  'highlight_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$return',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'highlight_file',
  ),
  'highlight_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$return',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'highlight_string',
  ),
  'ignore_user_abort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ignore_user_abort',
  ),
  'pack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'pack',
  ),
  'php_check_syntax' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$error_message',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'php_check_syntax',
  ),
  'php_strip_whitespace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'php_strip_whitespace',
  ),
  'sys_getloadavg' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'sys_getloadavg',
  ),
  'time_nanosleep' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$nanoseconds',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'time_nanosleep',
  ),
  'time_sleep_until' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$timestamp',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'time_sleep_until',
  ),
  'uniqid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'initializer' => '= ""',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$more_entropy',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'uniqid',
  ),
  'unpack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'unpack',
  ),
  'usleep' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$micro_seconds',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'usleep',
  ),
  'parsekit_compile_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$errors',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= PARSEKIT_QUIET',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'parsekit_compile_file',
  ),
  'parsekit_compile_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$phpcode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$errors',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= PARSEKIT_QUIET',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'parsekit_compile_string',
  ),
  'parsekit_func_arginfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'parsekit_func_arginfo',
  ),
  'bottom' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'bottom',
  ),
  'getIteratorMode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getIteratorMode',
  ),
  'setIteratorMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'setIteratorMode',
  ),
  'top' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'top',
  ),
  'unshift' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'unshift',
  ),
  'dequeue' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'mixed',
    'name' => 'dequeue',
  ),
  'enqueue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'enqueue',
  ),
  'recoverFromCorruption' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'recoverFromCorruption',
  ),
  'setExtractFlags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setExtractFlags',
  ),
  'fromArray' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$save_indexes',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SplFixedArray',
    'name' => 'fromArray',
  ),
  'toArray' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'toArray',
  ),
  'addAll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SplObjectStorage',
        'name' => '$storage',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addAll',
  ),
  'attach' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'HttpRequest',
        'name' => '$request',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'attach',
  ),
  'contains' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'contains',
  ),
  'getHash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHash',
  ),
  'getInfo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getInfo',
  ),
  'removeAll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SplObjectStorage',
        'name' => '$storage',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'removeAll',
  ),
  'removeAllExcept' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SplObjectStorage',
        'name' => '$storage',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'removeAllExcept',
  ),
  'setInfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setInfo',
  ),
  'getArrayIterator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getArrayIterator',
  ),
  'getInnerIterator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Iterator',
    'name' => 'getInnerIterator',
  ),
  'getArrayCopy' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getArrayCopy',
  ),
  'getFlags' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFlags',
  ),
  'ksort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sort_flags',
        'initializer' => '= SORT_REGULAR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ksort',
  ),
  'natcasesort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'natcasesort',
  ),
  'natsort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'natsort',
  ),
  'setFlags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setFlags',
  ),
  'uasort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'uasort',
  ),
  'uksort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$key_compare_func',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'uksort',
  ),
  'getCache' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'getCache',
  ),
  'accept' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$socket',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'accept',
  ),
  'getATime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getATime',
  ),
  'getBasename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$suffix',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getBasename',
  ),
  'getCTime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getCTime',
  ),
  'getExtension' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReflectionExtension',
    'name' => 'getExtension',
  ),
  'getGroup' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getGroup',
  ),
  'getInode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getInode',
  ),
  'getMTime' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMTime',
  ),
  'getOwner' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getOwner',
  ),
  'getPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPath',
  ),
  'getPathname' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPathname',
  ),
  'getPerms' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getPerms',
  ),
  'isDir' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDir',
  ),
  'isDot' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDot',
  ),
  'isExecutable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isExecutable',
  ),
  'isFile' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isFile',
  ),
  'isLink' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isLink',
  ),
  'isReadable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isReadable',
  ),
  'getPosition' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getPosition',
  ),
  'attachIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Iterator',
        'name' => '$iterator',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$infos',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'attachIterator',
  ),
  'containsIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Iterator',
        'name' => '$iterator',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'containsIterator',
  ),
  'countIterators' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'countIterators',
  ),
  'detachIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Iterator',
        'name' => '$iterator',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'detachIterator',
  ),
  'getChildren' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'SimpleXMLIterator',
    'name' => 'getChildren',
  ),
  'hasChildren' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasChildren',
  ),
  'getSubPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSubPath',
  ),
  'getSubPathname' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSubPathname',
  ),
  'beginChildren' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'beginChildren',
  ),
  'beginIteration' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'RecursiveIterator',
    'name' => 'beginIteration',
  ),
  'callGetChildren' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'RecursiveIterator',
    'name' => 'callGetChildren',
  ),
  'callHasChildren' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'callHasChildren',
  ),
  'endChildren' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'endChildren',
  ),
  'endIteration' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'endIteration',
  ),
  'getDepth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getDepth',
  ),
  'getMaxDepth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getMaxDepth',
  ),
  'getSubIterator' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'RecursiveIterator',
    'name' => 'getSubIterator',
  ),
  'nextElement' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'nextElement',
  ),
  'setMaxDepth' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$max_depth',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMaxDepth',
  ),
  'getPostfix' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getPostfix',
  ),
  'getPrefix' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPrefix',
  ),
  'setPrefixPart' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$part',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setPrefixPart',
  ),
  'getMode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMode',
  ),
  'getPregFlags' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getPregFlags',
  ),
  'getRegex' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRegex',
  ),
  'setMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMode',
  ),
  'setPregFlags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$preg_flags',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setPregFlags',
  ),
  'class_implements' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$class',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$autoload',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'class_implements',
  ),
  'class_parents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$class',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$autoload',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'class_parents',
  ),
  'class_uses' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$class',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$autoload',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'class_uses',
  ),
  'iterator_apply' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Traversable',
        'name' => '$iterator',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'iterator_apply',
  ),
  'iterator_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Traversable',
        'name' => '$iterator',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iterator_count',
  ),
  'iterator_to_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Traversable',
        'name' => '$iterator',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$use_keys',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'iterator_to_array',
  ),
  'spl_autoload_call' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'spl_autoload_call',
  ),
  'spl_autoload_extensions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file_extensions',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'spl_autoload_extensions',
  ),
  'spl_autoload_functions' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'spl_autoload_functions',
  ),
  'spl_autoload_register' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$autoload_function',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$throw',
        'initializer' => '= true',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$prepend',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'spl_autoload_register',
  ),
  'spl_autoload_unregister' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$autoload_function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'spl_autoload_unregister',
  ),
  'spl_autoload' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file_extensions',
        'initializer' => '= spl_autoload_extensions()',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'spl_autoload',
  ),
  'spl_classes' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'spl_classes',
  ),
  'spl_object_hash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$obj',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'spl_object_hash',
  ),
  'getFileInfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SplFileInfo',
    'name' => 'getFileInfo',
  ),
  'getLinkTarget' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getLinkTarget',
  ),
  'getPathInfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SplFileInfo',
    'name' => 'getPathInfo',
  ),
  'getRealPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRealPath',
  ),
  'openFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$open_mode',
        'initializer' => '= "r"',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SplFileObject',
    'name' => 'openFile',
  ),
  'setFileClass' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setFileClass',
  ),
  'setInfoClass' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setInfoClass',
  ),
  'getCsvControl' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getCsvControl',
  ),
  'getMaxLineLen' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMaxLineLen',
  ),
  'setCsvControl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'initializer' => '= ","',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$enclosure',
        'initializer' => '= "\\""',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$escape',
        'initializer' => '= "\\\\"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setCsvControl',
  ),
  'setMaxLineLen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$max_len',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMaxLineLen',
  ),
  'exchangeArray' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$input',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'exchangeArray',
  ),
  'getIteratorClass' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getIteratorClass',
  ),
  'setIteratorClass' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$iterator_class',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setIteratorClass',
  ),
  'getConstList' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$include_default',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getConstList',
  ),
  'filter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$in',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$out',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$consumed',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$closing',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'filter',
  ),
  'onClose' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'onClose',
  ),
  'onCreate' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'onCreate',
  ),
  'dir_closedir' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'dir_closedir',
  ),
  'dir_opendir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'dir_opendir',
  ),
  'dir_readdir' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'dir_readdir',
  ),
  'dir_rewinddir' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'dir_rewinddir',
  ),
  'stream_cast' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$cast_as',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'resource',
    'name' => 'stream_cast',
  ),
  'stream_close' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'stream_close',
  ),
  'stream_eof' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_eof',
  ),
  'stream_flush' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_flush',
  ),
  'stream_lock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$operation',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_lock',
  ),
  'stream_metadata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_metadata',
  ),
  'stream_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$opened_path',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_open',
  ),
  'stream_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'stream_read',
  ),
  'stream_seek' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$whence',
        'initializer' => '= SEEK_SET',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_seek',
  ),
  'stream_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$arg1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$arg2',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_set_option',
  ),
  'stream_stat' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'stream_stat',
  ),
  'stream_tell' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'stream_tell',
  ),
  'stream_truncate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$new_size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'stream_truncate',
  ),
  'stream_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'stream_write',
  ),
  'url_stat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'url_stat',
  ),
  'stream_bucket_append' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$brigade',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$bucket',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'stream_bucket_append',
  ),
  'stream_bucket_make_writeable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$brigade',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'stream_bucket_make_writeable',
  ),
  'stream_bucket_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$buffer',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'stream_bucket_new',
  ),
  'stream_bucket_prepend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$brigade',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$bucket',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'stream_bucket_prepend',
  ),
  'stream_context_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_context_create',
  ),
  'stream_context_get_default' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_context_get_default',
  ),
  'stream_context_get_options' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream_or_context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'stream_context_get_options',
  ),
  'stream_context_get_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream_or_context',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'stream_context_get_params',
  ),
  'stream_context_set_default' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_context_set_default',
  ),
  'stream_context_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream_or_context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_context_set_option',
  ),
  'stream_context_set_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream_or_context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_context_set_params',
  ),
  'stream_copy_to_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$dest',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$maxlength',
        'initializer' => '= -1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'stream_copy_to_stream',
  ),
  'stream_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_encoding',
  ),
  'stream_filter_append' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filtername',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$read_write',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_filter_append',
  ),
  'stream_filter_prepend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filtername',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$read_write',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$params',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_filter_prepend',
  ),
  'stream_filter_register' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filtername',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_filter_register',
  ),
  'stream_filter_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream_filter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_filter_remove',
  ),
  'stream_get_contents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$maxlength',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'stream_get_contents',
  ),
  'stream_get_filters' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'stream_get_filters',
  ),
  'stream_get_line' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$ending',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'stream_get_line',
  ),
  'stream_get_meta_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'stream_get_meta_data',
  ),
  'stream_get_transports' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'stream_get_transports',
  ),
  'stream_get_wrappers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'stream_get_wrappers',
  ),
  'stream_is_local' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$stream_or_url',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_is_local',
  ),
  'stream_notification_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$notification_code',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$severity',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$message_code',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$bytes_transferred',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$bytes_max',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'stream_notification_callback',
  ),
  'stream_resolve_include_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'stream_resolve_include_path',
  ),
  'stream_select' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$read',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$write',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$except',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$tv_sec',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tv_usec',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'stream_select',
  ),
  'stream_set_blocking' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_set_blocking',
  ),
  'stream_set_chunk_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$chunk_size',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'stream_set_chunk_size',
  ),
  'stream_set_read_buffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$buffer',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'stream_set_read_buffer',
  ),
  'stream_set_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$microseconds',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_set_timeout',
  ),
  'stream_set_write_buffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$buffer',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'stream_set_write_buffer',
  ),
  'stream_socket_accept' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$server_socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'initializer' => '= ini_get("default_socket_timeout")',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$peername',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_socket_accept',
  ),
  'stream_socket_client' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$remote_socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$errno',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$errstr',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'initializer' => '= ini_get("default_socket_timeout")',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= STREAM_CLIENT_CONNECT',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_socket_client',
  ),
  'stream_socket_enable_crypto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$enable',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$crypto_type',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '$session_stream',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'stream_socket_enable_crypto',
  ),
  'stream_socket_get_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$want_peer',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'stream_socket_get_name',
  ),
  'stream_socket_pair' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$protocol',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'stream_socket_pair',
  ),
  'stream_socket_recvfrom' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$address',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'stream_socket_recvfrom',
  ),
  'stream_socket_sendto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$address',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'stream_socket_sendto',
  ),
  'stream_socket_server' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$local_socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$errno',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$errstr',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= STREAM_SERVER_BIND | STREAM_SERVER_LISTEN',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stream_socket_server',
  ),
  'stream_socket_shutdown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$how',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_socket_shutdown',
  ),
  'stream_supports_lock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_supports_lock',
  ),
  'stream_wrapper_register' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$protocol',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_wrapper_register',
  ),
  'stream_wrapper_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$protocol',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_wrapper_restore',
  ),
  'stream_wrapper_unregister' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$protocol',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stream_wrapper_unregister',
  ),
  'body' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'tidyNode',
    'name' => 'body',
  ),
  'cleanRepair' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'cleanRepair',
  ),
  'diagnose' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'diagnose',
  ),
  'getConfig' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Config_Abstract',
    'name' => 'getConfig',
  ),
  'getHtmlVer' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getHtmlVer',
  ),
  'getOpt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getOpt',
  ),
  'getOptDoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$optname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getOptDoc',
  ),
  'getRelease' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'getRelease',
  ),
  'getStatus' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'getStatus',
  ),
  'head' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'tidyNode',
    'name' => 'head',
  ),
  'html' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'tidyNode',
    'name' => 'html',
  ),
  'isXhtml' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isXhtml',
  ),
  'isXml' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isXml',
  ),
  'parseFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'parseFile',
  ),
  'parseString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'parseString',
  ),
  'repairFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'repairFile',
  ),
  'repairString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'repairString',
  ),
  'root' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'tidyNode',
    'name' => 'root',
  ),
  'tidy_get_body' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'tidyNode',
    'name' => 'tidy_get_body',
  ),
  'tidy_clean_repair' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tidy_clean_repair',
  ),
  'tidy_diagnose' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tidy_diagnose',
  ),
  'tidy_get_error_buffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$tidy',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'tidy_get_error_buffer',
  ),
  'tidy_get_config' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'tidy_get_config',
  ),
  'tidy_get_html_ver' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'tidy_get_html_ver',
  ),
  'tidy_getopt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'tidy_getopt',
  ),
  'tidy_get_opt_doc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$optname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'tidy_get_opt_doc',
  ),
  'tidy_get_release' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'tidy_get_release',
  ),
  'tidy_get_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'tidy_get_status',
  ),
  'tidy_get_head' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'tidyNode',
    'name' => 'tidy_get_head',
  ),
  'tidy_get_html' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'tidyNode',
    'name' => 'tidy_get_html',
  ),
  'tidy_is_xhtml' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tidy_is_xhtml',
  ),
  'tidy_is_xml' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tidy_is_xml',
  ),
  'tidy_parse_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'tidy',
    'name' => 'tidy_parse_file',
  ),
  'tidy_parse_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'tidy',
    'name' => 'tidy_parse_string',
  ),
  'tidy_repair_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'tidy_repair_file',
  ),
  'tidy_repair_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'tidy_repair_string',
  ),
  'tidy_get_root' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'tidyNode',
    'name' => 'tidy_get_root',
  ),
  'getParent' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'tidyNode',
    'name' => 'getParent',
  ),
  'hasSiblings' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'hasSiblings',
  ),
  'isAsp' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isAsp',
  ),
  'isComment' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isComment',
  ),
  'isHtml' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isHtml',
  ),
  'isJste' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isJste',
  ),
  'isPhp' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isPhp',
  ),
  'isText' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'isText',
  ),
  'ob_tidyhandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ob_tidyhandler',
  ),
  'tidy_access_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'tidy_access_count',
  ),
  'tidy_config_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'tidy_config_count',
  ),
  'tidy_error_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'tidy_error_count',
  ),
  'tidy_get_output' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'tidy_get_output',
  ),
  'tidy_load_config' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'tidy_load_config',
  ),
  'tidy_reset_config' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'tidy_reset_config',
  ),
  'tidy_save_config' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tidy_save_config',
  ),
  'tidy_set_encoding' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tidy_set_encoding',
  ),
  'tidy_setopt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$option',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'tidy_setopt',
  ),
  'tidy_warning_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'tidy',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'tidy_warning_count',
  ),
  'token_get_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'token_get_all',
  ),
  'token_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$token',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'token_name',
  ),
  'base64_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$strict',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'base64_decode',
  ),
  'base64_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'base64_encode',
  ),
  'get_headers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'get_headers',
  ),
  'get_meta_tags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$use_include_path',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'get_meta_tags',
  ),
  'http_build_query' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$query_data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$numeric_prefix',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$arg_separator',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$enc_type',
        'initializer' => '= PHP_QUERY_RFC1738',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_build_query',
  ),
  'parse_url' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$component',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'parse_url',
  ),
  'rawurldecode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'rawurldecode',
  ),
  'rawurlencode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'rawurlencode',
  ),
  'urldecode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'urldecode',
  ),
  'urlencode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'urlencode',
  ),
  'executeString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$script',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$identifier',
        'initializer' => '= "V8Js::executeString()"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= V8Js::FLAG_NONE',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'executeString',
  ),
  'getExtensions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getExtensions',
  ),
  'getPendingException' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'V8JsException',
    'name' => 'getPendingException',
  ),
  'registerExtension' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$extension_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$script',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$dependencies',
        'initializer' => '= array()',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$auto_enable',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'registerExtension',
  ),
  'getJsFileName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'getJsFileName',
  ),
  'getJsLineNumber' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'int',
    'name' => 'getJsLineNumber',
  ),
  'getJsSourceLine' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'getJsSourceLine',
  ),
  'getJsTrace' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'getJsTrace',
  ),
  'yaml_emit_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$encoding',
        'initializer' => '= YAML_ANY_ENCODING',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$linebreak',
        'initializer' => '= YAML_ANY_BREAK',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$callbacks',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'yaml_emit_file',
  ),
  'yaml_emit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$encoding',
        'initializer' => '= YAML_ANY_ENCODING',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$linebreak',
        'initializer' => '= YAML_ANY_BREAK',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$callbacks',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'yaml_emit',
  ),
  'yaml_parse_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pos',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$ndocs',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$callbacks',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'yaml_parse_file',
  ),
  'yaml_parse_url' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pos',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$ndocs',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$callbacks',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'yaml_parse_url',
  ),
  'yaml_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pos',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$ndocs',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$callbacks',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'yaml_parse',
  ),
  'app' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'app',
  ),
  'bootstrap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Bootstrap_Abstract',
        'name' => '$bootstrap',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'bootstrap',
  ),
  'clearLastError' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Application',
    'name' => 'clearLastError',
  ),
  'environ' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'environ',
  ),
  'getAppDirectory' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Application',
    'name' => 'getAppDirectory',
  ),
  'getDispatcher' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'getDispatcher',
  ),
  'getLastErrorMsg' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getLastErrorMsg',
  ),
  'getLastErrorNo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getLastErrorNo',
  ),
  'getModules' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getModules',
  ),
  'setAppDirectory' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Application',
    'name' => 'setAppDirectory',
  ),
  'autoRender' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'autoRender',
  ),
  'catchException' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'catchException',
  ),
  'disableView' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'disableView',
  ),
  'dispatch' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'dispatch',
  ),
  'enableView' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'enableView',
  ),
  'flushInstantly' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'flushInstantly',
  ),
  'getApplication' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Application',
    'name' => 'getApplication',
  ),
  'getInstance' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getInstance',
  ),
  'getRequest' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getRequest',
  ),
  'getRouter' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Router',
    'name' => 'getRouter',
  ),
  'initView' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'initView',
  ),
  'registerPlugin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Plugin_Abstract',
        'name' => '$plugin',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'registerPlugin',
  ),
  'returnResponse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'returnResponse',
  ),
  'setDefaultAction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$action',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'setDefaultAction',
  ),
  'setDefaultController' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$controller',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'setDefaultController',
  ),
  'setDefaultModule' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$module',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'setDefaultModule',
  ),
  'setErrorHandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'call',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$error_types',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'setErrorHandler',
  ),
  'setRequest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'setRequest',
  ),
  'setView' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_View_Interface',
        'name' => '$view',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'setView',
  ),
  'throwException' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Dispatcher',
    'name' => 'throwException',
  ),
  'readonly' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'readonly',
  ),
  'display' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$tpl',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tpl_vars',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'display',
  ),
  'forward' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$action',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$paramters',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'forward',
  ),
  'getInvokeArg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getInvokeArg',
  ),
  'getInvokeArgs' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getInvokeArgs',
  ),
  'getModuleName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getModuleName',
  ),
  'getResponse' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getResponse',
  ),
  'getView' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_View_Interface',
    'name' => 'getView',
  ),
  'getViewpath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getViewpath',
  ),
  'redirect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$session',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => false,
      ),
    ),
    'modifier' => 'static',
    'type' => 'void',
    'name' => 'redirect',
  ),
  'setViewpath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$view_directory',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setViewpath',
  ),
  'getController' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Controller_Abstract',
    'name' => 'getController',
  ),
  'getScriptPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getScriptPath',
  ),
  'setScriptPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$template_dir',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setScriptPath',
  ),
  'assignRef' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'assignRef',
  ),
  'autoload' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'autoload',
  ),
  'clearLocalNamespace' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'clearLocalNamespace',
  ),
  'getLibraryPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$is_global',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Loader',
    'name' => 'getLibraryPath',
  ),
  'getLocalNamespace' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getLocalNamespace',
  ),
  'isLocalName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isLocalName',
  ),
  'registerLocalNamespace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$prefix',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'registerLocalNamespace',
  ),
  'setLibraryPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$is_global',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Loader',
    'name' => 'setLibraryPath',
  ),
  'dispatchLoopShutdown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Response_Abstract',
        'name' => '$response',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'dispatchLoopShutdown',
  ),
  'dispatchLoopStartup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Response_Abstract',
        'name' => '$response',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'dispatchLoopStartup',
  ),
  'postDispatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Response_Abstract',
        'name' => '$response',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'postDispatch',
  ),
  'preDispatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Response_Abstract',
        'name' => '$response',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'preDispatch',
  ),
  'preResponse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Response_Abstract',
        'name' => '$response',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'preResponse',
  ),
  'routerShutdown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Response_Abstract',
        'name' => '$response',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'routerShutdown',
  ),
  'routerStartup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Response_Abstract',
        'name' => '$response',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'routerStartup',
  ),
  'del' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'del',
  ),
  'has' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'has',
  ),
  'getActionName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getActionName',
  ),
  'getBaseUri' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getBaseUri',
  ),
  'getControllerName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getControllerName',
  ),
  'getEnv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$default',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getEnv',
  ),
  'getException' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getException',
  ),
  'getLanguage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getLanguage',
  ),
  'getParam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$param_name',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'mixed',
    'name' => 'getParam',
  ),
  'getParams' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'array',
    'name' => 'getParams',
  ),
  'getRequestUri' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getRequestUri',
  ),
  'getServer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$default',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getServer',
  ),
  'isCli' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isCli',
  ),
  'isDispatched' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isDispatched',
  ),
  'isGet' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isGet',
  ),
  'isHead' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isHead',
  ),
  'isOptions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isOptions',
  ),
  'isPost' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isPost',
  ),
  'isPut' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isPut',
  ),
  'isRouted' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isRouted',
  ),
  'isXmlHttpRequest' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isXmlHttpRequest',
  ),
  'setActionName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$action',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setActionName',
  ),
  'setBaseUri' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uir',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setBaseUri',
  ),
  'setControllerName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$controller',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setControllerName',
  ),
  'setDispatched' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setDispatched',
  ),
  'setModuleName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$module',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setModuleName',
  ),
  'setParam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$param_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$param_val',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'setParam',
  ),
  'setRequestUri' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uir',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setRequestUri',
  ),
  'setRouted' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$flag',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setRouted',
  ),
  'getCookie' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getCookie',
  ),
  'getFiles' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getFiles',
  ),
  'getPost' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getPost',
  ),
  'appendBody' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'appendBody',
  ),
  'clearBody' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'clearBody',
  ),
  'clearHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'clearHeaders',
  ),
  'getBody' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getBody',
  ),
  'getHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'modifier' => 'static',
    'type' => 'mixed',
    'name' => 'getHeader',
  ),
  'prependBody' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'prependBody',
  ),
  'response' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'response',
  ),
  'setAllHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'protected',
    'type' => 'void',
    'name' => 'setAllHeaders',
  ),
  'setBody' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$request_body_data',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setBody',
  ),
  'setHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$replace',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setHeader',
  ),
  'setRedirect' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setRedirect',
  ),
  'assemble' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$info',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$query',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'assemble',
  ),
  'route' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Request_Abstract',
        'name' => '$request',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'route',
  ),
  'addConfig' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'Yaf_Config_Abstract',
        'name' => '$config',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addConfig',
  ),
  'addRoute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'Yaf_Route_Abstract',
        'name' => '$route',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addRoute',
  ),
  'getCurrentRoute' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getCurrentRoute',
  ),
  'getRoute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Yaf_Route_Interface',
    'name' => 'getRoute',
  ),
  'getRoutes' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getRoutes',
  ),
  'match' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'match',
  ),
  'is_tainted' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_tainted',
  ),
  'taint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'taint',
  ),
  'untaint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'untaint',
  ),
  'chdb_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pathname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'chdb_create',
  ),
  'curl_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'curl_close',
  ),
  'curl_copy_handle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'curl_copy_handle',
  ),
  'curl_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'curl_errno',
  ),
  'curl_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'curl_error',
  ),
  'curl_escape' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'curl_escape',
  ),
  'curl_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'curl_exec',
  ),
  'curl_getinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$opt',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'curl_getinfo',
  ),
  'curl_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'curl_init',
  ),
  'curl_multi_add_handle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mh',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'curl_multi_add_handle',
  ),
  'curl_multi_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mh',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'curl_multi_close',
  ),
  'curl_multi_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mh',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$still_running',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'curl_multi_exec',
  ),
  'curl_multi_getcontent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'curl_multi_getcontent',
  ),
  'curl_multi_info_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mh',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$msgs_in_queue',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'curl_multi_info_read',
  ),
  'curl_multi_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'curl_multi_init',
  ),
  'curl_multi_remove_handle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mh',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'curl_multi_remove_handle',
  ),
  'curl_multi_select' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mh',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'initializer' => '= 1.0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'curl_multi_select',
  ),
  'curl_multi_setopt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$mh',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'curl_multi_setopt',
  ),
  'curl_multi_strerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errornum',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'curl_multi_strerror',
  ),
  'curl_pause' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$bitmask',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'curl_pause',
  ),
  'curl_reset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'curl_reset',
  ),
  'curl_setopt_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'curl_setopt_array',
  ),
  'curl_setopt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'curl_setopt',
  ),
  'curl_share_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sh',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'curl_share_close',
  ),
  'curl_share_init' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'curl_share_init',
  ),
  'curl_share_setopt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sh',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'curl_share_setopt',
  ),
  'curl_strerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errornum',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'curl_strerror',
  ),
  'curl_unescape' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ch',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'curl_unescape',
  ),
  'curl_version' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$age',
        'initializer' => '= CURLVERSION_NOW',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'curl_version',
  ),
  'getPostFilename' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPostFilename',
  ),
  'setMimeType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$mime',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMimeType',
  ),
  'setPostFilename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$postname',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setPostFilename',
  ),
  'curl_file_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mimetype',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$postname',
        'required' => false,
      ),
    ),
    'type' => 'CURLFile',
    'name' => 'curl_file_create',
  ),
  'addSignal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'double',
        'name' => '$timeout',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addSignal',
  ),
  'addTimer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'double',
        'name' => '$timeout',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addTimer',
  ),
  'delSignal' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'delSignal',
  ),
  'delTimer' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'delTimer',
  ),
  'getSupportedMethods' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getSupportedMethods',
  ),
  'pending' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'pending',
  ),
  'setPriority' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setPriority',
  ),
  'setTimer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBase',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$cb',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setTimer',
  ),
  'getFeatures' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFeatures',
  ),
  'getTimeOfDayCached' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'double',
    'name' => 'getTimeOfDayCached',
  ),
  'gotExit' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'gotExit',
  ),
  'gotStop' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'gotStop',
  ),
  'loop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$error_callback',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'loop',
  ),
  'priorityInit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$n_priorities',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'priorityInit',
  ),
  'reInit' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'reInit',
  ),
  'addBuffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBuffer',
        'name' => '$buf',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addBuffer',
  ),
  'appendFrom' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBuffer',
        'name' => '$buf',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'appendFrom',
  ),
  'copyout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max_bytes',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'copyout',
  ),
  'drain' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'drain',
  ),
  'enableLocking' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'enableLocking',
  ),
  'expand' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$basenode',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNode',
    'name' => 'expand',
  ),
  'freeze' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$at_front',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'freeze',
  ),
  'prepend' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'prepend',
  ),
  'prependBuffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBuffer',
        'name' => '$buf',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'prependBuffer',
  ),
  'pullup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'pullup',
  ),
  'readLine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$eol_style',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'readLine',
  ),
  'searchEol' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'initializer' => '= -1',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$eol_style',
        'initializer' => '= 
     EventBuffer::EOL_ANY',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'searchEol',
  ),
  'substr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'substr',
  ),
  'unfreeze' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$at_front',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'unfreeze',
  ),
  'connectHost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventDnsBase',
        'name' => '$dns_base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$family',
        'initializer' => '= EventUtil::AF_UNSPEC',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'connectHost',
  ),
  'createPair' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBase',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'createPair',
  ),
  'disable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'disable',
  ),
  'enable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'enable',
  ),
  'getDnsErrorString' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDnsErrorString',
  ),
  'getEnabled' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getEnabled',
  ),
  'getInput' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'EventBuffer',
    'name' => 'getInput',
  ),
  'getOutput' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'EventBuffer',
    'name' => 'getOutput',
  ),
  'readBuffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBuffer',
        'name' => '$buf',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'readBuffer',
  ),
  'setCallbacks' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$readcb',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$writecb',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$eventcb',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setCallbacks',
  ),
  'setTimeouts' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$timeout_read',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$timeout_write',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setTimeouts',
  ),
  'setWatermark' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$events',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$lowmark',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$highmark',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setWatermark',
  ),
  'sslError' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'sslError',
  ),
  'sslFilter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBase',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'EventBufferEvent',
        'name' => '$underlying',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'EventSslContext',
        'name' => '$ctx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$state',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'EventBufferEvent',
    'name' => 'sslFilter',
  ),
  'sslGetCipherInfo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'sslGetCipherInfo',
  ),
  'sslGetCipherName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'sslGetCipherName',
  ),
  'sslGetCipherVersion' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'sslGetCipherVersion',
  ),
  'sslGetProtocol' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'sslGetProtocol',
  ),
  'sslRenegotiate' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sslRenegotiate',
  ),
  'sslSocket' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBase',
        'name' => '$base',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$socket',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'EventSslContext',
        'name' => '$ctx',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$state',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'EventBufferEvent',
    'name' => 'sslSocket',
  ),
  'writeBuffer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBuffer',
        'name' => '$buf',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'writeBuffer',
  ),
  'avoidMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'avoidMethod',
  ),
  'requireFeatures' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$feature',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'requireFeatures',
  ),
  'setMaxDispatchInterval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$max_interval',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max_callbacks',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$min_priority',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMaxDispatchInterval',
  ),
  'addNameserverIp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ip',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addNameserverIp',
  ),
  'addSearch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addSearch',
  ),
  'clearSearch' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'clearSearch',
  ),
  'countNameservers' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'countNameservers',
  ),
  'loadHosts' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hosts',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'loadHosts',
  ),
  'parseResolvConf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'parseResolvConf',
  ),
  'setSearchNdots' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$ndots',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSearchNdots',
  ),
  'addServerAlias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addServerAlias',
  ),
  'removeServerAlias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'removeServerAlias',
  ),
  'setAllowedMethods' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$methods',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setAllowedMethods',
  ),
  'setDefaultCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cb',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setDefaultCallback',
  ),
  'setMaxBodySize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$max_size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMaxBodySize',
  ),
  'setMaxHeadersSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$max_size',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setMaxHeadersSize',
  ),
  'setTimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setTimeout',
  ),
  'getBase' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getBase',
  ),
  'getPeer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$address',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$port',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getPeer',
  ),
  'makeRequest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventHttpRequest',
        'name' => '$req',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'makeRequest',
  ),
  'setCloseCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setCloseCallback',
  ),
  'setLocalAddress' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$address',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setLocalAddress',
  ),
  'setLocalPort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setLocalPort',
  ),
  'setRetries' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$delay',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRetries',
  ),
  'addHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addHeader',
  ),
  'cancel' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'cancel',
  ),
  'closeConnection' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'EventHttpConnection',
    'name' => 'closeConnection',
  ),
  'findHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'findHeader',
  ),
  'getCommand' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getCommand',
  ),
  'getHost' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHost',
  ),
  'getInputBuffer' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'EventBuffer',
    'name' => 'getInputBuffer',
  ),
  'getInputHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getInputHeaders',
  ),
  'getOutputBuffer' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'EventBuffer',
    'name' => 'getOutputBuffer',
  ),
  'getOutputHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'getOutputHeaders',
  ),
  'getResponseCode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getResponseCode',
  ),
  'getUri' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getUri',
  ),
  'removeHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'removeHeader',
  ),
  'sendError' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$error',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$reason',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sendError',
  ),
  'sendReply' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$code',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$reason',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'EventBuffer',
        'name' => '$buf',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sendReply',
  ),
  'sendReplyChunk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'EventBuffer',
        'name' => '$buf',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sendReplyChunk',
  ),
  'sendReplyEnd' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sendReplyEnd',
  ),
  'sendReplyStart' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$code',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$reason',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sendReplyStart',
  ),
  'getSocketName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$address',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$port',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getSocketName',
  ),
  'setErrorCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cb',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setErrorCallback',
  ),
  'getLastSocketErrno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$socket',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getLastSocketErrno',
  ),
  'getLastSocketError' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$socket',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getLastSocketError',
  ),
  'getSocketFd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$socket',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getSocketFd',
  ),
  'setSocketOption' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$optname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$optval',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSocketOption',
  ),
  'sslRandPoll' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'sslRandPoll',
  ),
  'fam_cancel_monitor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$fam_monitor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fam_cancel_monitor',
  ),
  'fam_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'fam_close',
  ),
  'fam_monitor_collection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dirname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$depth',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$mask',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fam_monitor_collection',
  ),
  'fam_monitor_directory' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dirname',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fam_monitor_directory',
  ),
  'fam_monitor_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'fam_monitor_file',
  ),
  'fam_next_event' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'fam_next_event',
  ),
  'fam_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$appname',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fam_open',
  ),
  'fam_pending' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'fam_pending',
  ),
  'fam_resume_monitor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$fam_monitor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fam_resume_monitor',
  ),
  'fam_suspend_monitor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fam',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$fam_monitor',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'fam_suspend_monitor',
  ),
  'ftp_alloc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$filesize',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$result',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_alloc',
  ),
  'ftp_cdup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_cdup',
  ),
  'ftp_chdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_chdir',
  ),
  'ftp_chmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_chmod',
  ),
  'ftp_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_close',
  ),
  'ftp_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 21',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 90',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ftp_connect',
  ),
  'ftp_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_delete',
  ),
  'ftp_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_exec',
  ),
  'ftp_fget' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$resumepos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_fget',
  ),
  'ftp_fput' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$startpos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_fput',
  ),
  'ftp_get_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ftp_get_option',
  ),
  'ftp_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$local_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$resumepos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_get',
  ),
  'ftp_login' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_login',
  ),
  'ftp_mdtm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_mdtm',
  ),
  'ftp_mkdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ftp_mkdir',
  ),
  'ftp_nb_continue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_nb_continue',
  ),
  'ftp_nb_fget' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$resumepos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_nb_fget',
  ),
  'ftp_nb_fput' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$startpos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_nb_fput',
  ),
  'ftp_nb_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$local_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$resumepos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_nb_get',
  ),
  'ftp_nb_put' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$local_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$startpos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_nb_put',
  ),
  'ftp_nlist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ftp_nlist',
  ),
  'ftp_pasv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$pasv',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_pasv',
  ),
  'ftp_put' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$local_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$startpos',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_put',
  ),
  'ftp_pwd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ftp_pwd',
  ),
  'ftp_raw' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ftp_raw',
  ),
  'ftp_rawlist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$recursive',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ftp_rawlist',
  ),
  'ftp_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oldname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$newname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_rename',
  ),
  'ftp_rmdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$directory',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_rmdir',
  ),
  'ftp_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_set_option',
  ),
  'ftp_site' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ftp_site',
  ),
  'ftp_size' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ftp_size',
  ),
  'ftp_ssl_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 21',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 90',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ftp_ssl_connect',
  ),
  'ftp_systype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$ftp_stream',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ftp_systype',
  ),
  'addOptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addOptions',
  ),
  'addServer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$weight',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addServer',
  ),
  'addServers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$servers',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addServers',
  ),
  'addTask' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$context',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'addTask',
  ),
  'addTaskBackground' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$context',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'addTaskBackground',
  ),
  'addTaskHigh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$context',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'addTaskHigh',
  ),
  'addTaskHighBackground' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$context',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'addTaskHighBackground',
  ),
  'addTaskLow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$context',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'addTaskLow',
  ),
  'addTaskLowBackground' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$context',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'addTaskLowBackground',
  ),
  'addTaskStatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$job_handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$context',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'GearmanTask',
    'name' => 'addTaskStatus',
  ),
  'clearCallbacks' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'clearCallbacks',
  ),
  'context' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'context',
  ),
  'data' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'data',
  ),
  'do' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'do',
  ),
  'doBackground' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'doBackground',
  ),
  'doHigh' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'doHigh',
  ),
  'doHighBackground' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'doHighBackground',
  ),
  'doJobHandle' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'doJobHandle',
  ),
  'doLow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'doLow',
  ),
  'doLowBackground' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'doLowBackground',
  ),
  'doNormal' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$workload',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$unique',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'doNormal',
  ),
  'doStatus' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'doStatus',
  ),
  'echo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$arg1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'echo',
  ),
  'error' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'error',
  ),
  'getErrno' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getErrno',
  ),
  'jobStatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$job_handle',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'jobStatus',
  ),
  'removeOptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'removeOptions',
  ),
  'returnCode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'returnCode',
  ),
  'runTasks' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'runTasks',
  ),
  'setClientCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setClientCallback',
  ),
  'setCompleteCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setCompleteCallback',
  ),
  'setContext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setContext',
  ),
  'setCreatedCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setCreatedCallback',
  ),
  'setData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setData',
  ),
  'setDataCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setDataCallback',
  ),
  'setExceptionCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setExceptionCallback',
  ),
  'setFailCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFailCallback',
  ),
  'setOptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setOptions',
  ),
  'setStatusCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setStatusCallback',
  ),
  'setWarningCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setWarningCallback',
  ),
  'setWorkloadCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setWorkloadCallback',
  ),
  'complete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'complete',
  ),
  'exception' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$exception',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'exception',
  ),
  'fail' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'fail',
  ),
  'functionName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'functionName',
  ),
  'handle' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'handle',
  ),
  'sendComplete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sendComplete',
  ),
  'sendData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'sendData',
  ),
  'sendException' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$exception',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sendException',
  ),
  'sendFail' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sendFail',
  ),
  'sendStatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$numerator',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$denominator',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sendStatus',
  ),
  'sendWarning' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$warning',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'sendWarning',
  ),
  'setReturn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$gearman_return_t',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setReturn',
  ),
  'unique' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'unique',
  ),
  'warning' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$warning',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'warning',
  ),
  'workload' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'workload',
  ),
  'workloadSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'workloadSize',
  ),
  'dataSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'dataSize',
  ),
  'function' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'function',
  ),
  'isKnown' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isKnown',
  ),
  'jobHandle' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'jobHandle',
  ),
  'recvData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$data_len',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'recvData',
  ),
  'sendWorkload' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'sendWorkload',
  ),
  'taskDenominator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'taskDenominator',
  ),
  'taskNumerator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'taskNumerator',
  ),
  'uuid' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'uuid',
  ),
  'addFunction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$functions',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addFunction',
  ),
  'register' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'register',
  ),
  'setId' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setId',
  ),
  'unregister' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'unregister',
  ),
  'unregisterAll' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'unregisterAll',
  ),
  'work' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'work',
  ),
  'gopher_parsedir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dirent',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gopher_parsedir',
  ),
  'gupnp_context_get_host_ip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gupnp_context_get_host_ip',
  ),
  'gupnp_context_get_port' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gupnp_context_get_port',
  ),
  'gupnp_context_get_subscription_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'gupnp_context_get_subscription_timeout',
  ),
  'gupnp_context_host_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$local_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$server_path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_context_host_path',
  ),
  'gupnp_context_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host_ip',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'gupnp_context_new',
  ),
  'gupnp_context_set_subscription_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'gupnp_context_set_subscription_timeout',
  ),
  'gupnp_context_timeout_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_context_timeout_add',
  ),
  'gupnp_context_unhost_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$server_path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_context_unhost_path',
  ),
  'gupnp_control_point_browse_start' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$cpoint',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_control_point_browse_start',
  ),
  'gupnp_control_point_browse_stop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$cpoint',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_control_point_browse_stop',
  ),
  'gupnp_control_point_callback_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$cpoint',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$signal',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_control_point_callback_set',
  ),
  'gupnp_control_point_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$target',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'gupnp_control_point_new',
  ),
  'gupnp_device_action_callback_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$signal',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$action_name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_device_action_callback_set',
  ),
  'gupnp_device_info_get_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'gupnp_device_info_get_service',
  ),
  'gupnp_device_info_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gupnp_device_info_get',
  ),
  'gupnp_root_device_get_available' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_root_device_get_available',
  ),
  'gupnp_root_device_get_relative_location' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gupnp_root_device_get_relative_location',
  ),
  'gupnp_root_device_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$context',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$location',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$description_dir',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'gupnp_root_device_new',
  ),
  'gupnp_root_device_set_available' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$available',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_root_device_set_available',
  ),
  'gupnp_root_device_start' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_root_device_start',
  ),
  'gupnp_root_device_stop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root_device',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_root_device_stop',
  ),
  'gupnp_service_action_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$action',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'gupnp_service_action_get',
  ),
  'gupnp_service_action_return_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$action',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$error_code',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$error_description',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_action_return_error',
  ),
  'gupnp_service_action_return' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$action',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_action_return',
  ),
  'gupnp_service_action_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$action',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_action_set',
  ),
  'gupnp_service_freeze_notify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_freeze_notify',
  ),
  'gupnp_service_info_get_introspection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'gupnp_service_info_get_introspection',
  ),
  'gupnp_service_info_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gupnp_service_info_get',
  ),
  'gupnp_service_introspection_get_state_variable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$introspection',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$variable_name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gupnp_service_introspection_get_state_variable',
  ),
  'gupnp_service_notify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_notify',
  ),
  'gupnp_service_proxy_action_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$action',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'gupnp_service_proxy_action_get',
  ),
  'gupnp_service_proxy_action_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$action',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_proxy_action_set',
  ),
  'gupnp_service_proxy_add_notify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_proxy_add_notify',
  ),
  'gupnp_service_proxy_callback_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$signal',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$callback',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_proxy_callback_set',
  ),
  'gupnp_service_proxy_get_subscribed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_proxy_get_subscribed',
  ),
  'gupnp_service_proxy_remove_notify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_proxy_remove_notify',
  ),
  'gupnp_service_proxy_send_action' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$action',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$in_params',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$out_params',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gupnp_service_proxy_send_action',
  ),
  'gupnp_service_proxy_set_subscribed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$proxy',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$subscribed',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_proxy_set_subscribed',
  ),
  'gupnp_service_thaw_notify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$service',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'gupnp_service_thaw_notify',
  ),
  'factory' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$raw_message',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "HttpMessage"',
        'required' => false,
      ),
    ),
    'modifier' => 'static public',
    'type' => 'HttpMessage',
    'name' => 'factory',
  ),
  'addHeaders' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addHeaders',
  ),
  'fromEnv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$message_type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "HttpMessage"',
        'required' => false,
      ),
    ),
    'modifier' => 'static public',
    'type' => 'HttpMessage',
    'name' => 'fromEnv',
  ),
  'fromString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$raw_message',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "HttpMessage"',
        'required' => false,
      ),
    ),
    'modifier' => 'static public',
    'type' => 'HttpMessage',
    'name' => 'fromString',
  ),
  'getHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getHeaders',
  ),
  'getHttpVersion' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHttpVersion',
  ),
  'getParentMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'HttpMessage',
    'name' => 'getParentMessage',
  ),
  'getRequestMethod' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRequestMethod',
  ),
  'getRequestUrl' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRequestUrl',
  ),
  'getResponseStatus' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getResponseStatus',
  ),
  'guessContentType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$magic_file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$magic_mode',
        'initializer' => '= MAGIC_MIME',
        'required' => false,
      ),
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'guessContentType',
  ),
  'reverse' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'HttpMessage',
    'name' => 'reverse',
  ),
  'setHeaders' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setHeaders',
  ),
  'setHttpVersion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setHttpVersion',
  ),
  'setRequestMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRequestMethod',
  ),
  'setRequestUrl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRequestUrl',
  ),
  'setResponseCode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$code',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setResponseCode',
  ),
  'setResponseStatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setResponseStatus',
  ),
  'toMessageTypeObject' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'HttpRequest|HttpResponse',
    'name' => 'toMessageTypeObject',
  ),
  'toString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$url_encode',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'toString',
  ),
  'mod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'HttpQueryString',
    'name' => 'mod',
  ),
  'singleton' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$global',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'static public',
    'type' => 'HttpQueryString',
    'name' => 'singleton',
  ),
  'xlate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ie',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$oe',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'xlate',
  ),
  'addCookies' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$cookies',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addCookies',
  ),
  'addPostFields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$post_data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addPostFields',
  ),
  'addPostFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$content_type',
        'initializer' => '= "application/x-octetstream"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addPostFile',
  ),
  'addPutData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$put_data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addPutData',
  ),
  'addQueryData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$query_params',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addQueryData',
  ),
  'addRawPostData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$raw_post_data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addRawPostData',
  ),
  'addSslOptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addSslOptions',
  ),
  'clearHistory' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'clearHistory',
  ),
  'enableCookies' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'enableCookies',
  ),
  'getContentType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'getContentType',
  ),
  'getCookies' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getCookies',
  ),
  'getHistory' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'HttpMessage',
    'name' => 'getHistory',
  ),
  'getOptions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getOptions',
  ),
  'getPostFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getPostFields',
  ),
  'getPostFiles' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getPostFiles',
  ),
  'getPutData' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPutData',
  ),
  'getPutFile' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPutFile',
  ),
  'getQueryData' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getQueryData',
  ),
  'getRawPostData' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRawPostData',
  ),
  'getRawRequestMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRawRequestMessage',
  ),
  'getRawResponseMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRawResponseMessage',
  ),
  'getRequestMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'HttpMessage',
    'name' => 'getRequestMessage',
  ),
  'getResponseBody' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getResponseBody',
  ),
  'getResponseCookies' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$allowed_extras',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getResponseCookies',
  ),
  'getResponseData' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getResponseData',
  ),
  'getResponseHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getResponseHeader',
  ),
  'getResponseInfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getResponseInfo',
  ),
  'getResponseMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'HttpMessage',
    'name' => 'getResponseMessage',
  ),
  'getSslOptions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getSslOptions',
  ),
  'getUrl' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getUrl',
  ),
  'resetCookies' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$session_only',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'resetCookies',
  ),
  'setContentType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$content_type',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setContentType',
  ),
  'setCookies' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$cookies',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setCookies',
  ),
  'setMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$request_method',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setMethod',
  ),
  'setPostFields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$post_data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setPostFields',
  ),
  'setPostFiles' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$post_files',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setPostFiles',
  ),
  'setPutData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$put_data',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setPutData',
  ),
  'setPutFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setPutFile',
  ),
  'setQueryData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$query_data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setQueryData',
  ),
  'setRawPostData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$raw_post_data',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRawPostData',
  ),
  'setSslOptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSslOptions',
  ),
  'setUrl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setUrl',
  ),
  'getAttachedRequests' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getAttachedRequests',
  ),
  'getFinishedRequests' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getFinishedRequests',
  ),
  'socketPerform' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'protected',
    'type' => 'bool',
    'name' => 'socketPerform',
  ),
  'socketSelect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'protected',
    'type' => 'bool',
    'name' => 'socketSelect',
  ),
  'capture' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'void',
    'name' => 'capture',
  ),
  'getBufferSize' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'int',
    'name' => 'getBufferSize',
  ),
  'getCacheControl' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'getCacheControl',
  ),
  'getContentDisposition' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'getContentDisposition',
  ),
  'getETag' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'getETag',
  ),
  'getGzip' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'getGzip',
  ),
  'getLastModified' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'int',
    'name' => 'getLastModified',
  ),
  'getRequestBody' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'string',
    'name' => 'getRequestBody',
  ),
  'getRequestBodyStream' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'resource',
    'name' => 'getRequestBodyStream',
  ),
  'getRequestHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'array',
    'name' => 'getRequestHeaders',
  ),
  'getThrottleDelay' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'static',
    'type' => 'float',
    'name' => 'getThrottleDelay',
  ),
  'setBufferSize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$bytes',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setBufferSize',
  ),
  'setCache' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$cache',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setCache',
  ),
  'setCacheControl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$control',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max_age',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$must_revalidate',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setCacheControl',
  ),
  'setContentDisposition' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$inline',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setContentDisposition',
  ),
  'setETag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$etag',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setETag',
  ),
  'setFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setFile',
  ),
  'setGzip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$gzip',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setGzip',
  ),
  'setLastModified' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setLastModified',
  ),
  'setStream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setStream',
  ),
  'setThrottleDelay' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$seconds',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'bool',
    'name' => 'setThrottleDelay',
  ),
  'http_cache_etag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$etag',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_cache_etag',
  ),
  'http_cache_last_modified' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp_or_expires',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_cache_last_modified',
  ),
  'http_chunked_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoded',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'http_chunked_decode',
  ),
  'http_deflate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_deflate',
  ),
  'http_inflate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'http_inflate',
  ),
  'http_build_cookie' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$cookie',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'http_build_cookie',
  ),
  'http_date' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_date',
  ),
  'http_get_request_body_stream' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'http_get_request_body_stream',
  ),
  'http_get_request_body' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'http_get_request_body',
  ),
  'http_get_request_headers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'http_get_request_headers',
  ),
  'http_match_etag' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$etag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$for_range',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_match_etag',
  ),
  'http_match_modified' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= -1',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$for_range',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_match_modified',
  ),
  'http_match_request_header' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$header',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$match_case',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_match_request_header',
  ),
  'http_support' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$feature',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'http_support',
  ),
  'http_negotiate_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$supported',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$result',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_negotiate_charset',
  ),
  'http_negotiate_content_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$supported',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$result',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_negotiate_content_type',
  ),
  'http_negotiate_language' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$supported',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$result',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_negotiate_language',
  ),
  'ob_deflatehandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ob_deflatehandler',
  ),
  'ob_etaghandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ob_etaghandler',
  ),
  'ob_inflatehandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ob_inflatehandler',
  ),
  'http_parse_cookie' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cookie',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$allowed_extras',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'http_parse_cookie',
  ),
  'http_parse_headers' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$header',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'http_parse_headers',
  ),
  'http_parse_message' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'http_parse_message',
  ),
  'http_parse_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$param',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= HTTP_PARAMS_DEFAULT',
        'required' => false,
      ),
    ),
    'type' => 'object',
    'name' => 'http_parse_params',
  ),
  'http_persistent_handles_clean' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ident',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_persistent_handles_clean',
  ),
  'http_persistent_handles_count' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'object',
    'name' => 'http_persistent_handles_count',
  ),
  'http_persistent_handles_ident' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ident',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_persistent_handles_ident',
  ),
  'http_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_get',
  ),
  'http_head' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_head',
  ),
  'http_post_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_post_data',
  ),
  'http_post_fields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$files',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_post_fields',
  ),
  'http_put_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_put_data',
  ),
  'http_put_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_put_file',
  ),
  'http_put_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_put_stream',
  ),
  'http_request_body_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$fields',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$files',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'http_request_body_encode',
  ),
  'http_request_method_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'http_request_method_exists',
  ),
  'http_request_method_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'http_request_method_name',
  ),
  'http_request_method_register' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'http_request_method_register',
  ),
  'http_request_method_unregister' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$method',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_request_method_unregister',
  ),
  'http_request' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$body',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '&$info',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_request',
  ),
  'http_redirect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$session',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_redirect',
  ),
  'http_send_content_disposition' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$inline',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_send_content_disposition',
  ),
  'http_send_content_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$content_type',
        'initializer' => '= "application/x-octetstream"',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_send_content_type',
  ),
  'http_send_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_send_data',
  ),
  'http_send_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_send_file',
  ),
  'http_send_last_modified' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'initializer' => '= time()',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_send_last_modified',
  ),
  'http_send_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_send_status',
  ),
  'http_send_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'http_send_stream',
  ),
  'http_throttle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$sec',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$bytes',
        'initializer' => '= 40960',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'http_throttle',
  ),
  'http_build_str' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$arg_separator',
        'initializer' => '= ini_get("arg_separator.output")',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_build_str',
  ),
  'http_build_url' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$url',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$parts',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= HTTP_URL_REPLACE',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$new_url',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'http_build_url',
  ),
  'hwapi_attribute_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'type' => 'HW_API_Attribute',
    'name' => 'hwapi_attribute_new',
  ),
  'hwapi_content_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mimetype',
        'required' => true,
      ),
    ),
    'type' => 'HW_API_Content',
    'name' => 'hwapi_content_new',
  ),
  'hwapi_hgcsp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => false,
      ),
    ),
    'type' => 'HW_API',
    'name' => 'hwapi_hgcsp',
  ),
  'hwapi_object_new' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$parameter',
        'required' => true,
      ),
    ),
    'type' => 'hw_api_object',
    'name' => 'hwapi_object_new',
  ),
  'ldap_8859_to_t61' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_8859_to_t61',
  ),
  'ldap_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_add',
  ),
  'ldap_bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$bind_rdn',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$bind_password',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_bind',
  ),
  'ldap_compare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ldap_compare',
  ),
  'ldap_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 389',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_connect',
  ),
  'ldap_control_paged_result_response' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$cookie',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '&$estimated',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_control_paged_result_response',
  ),
  'ldap_control_paged_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pagesize',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$iscritical',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$cookie',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_control_paged_result',
  ),
  'ldap_count_entries' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ldap_count_entries',
  ),
  'ldap_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_delete',
  ),
  'ldap_dn2ufn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_dn2ufn',
  ),
  'ldap_err2str' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errno',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_err2str',
  ),
  'ldap_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ldap_errno',
  ),
  'ldap_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_error',
  ),
  'ldap_escape' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ignore',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_escape',
  ),
  'ldap_explode_dn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$with_attrib',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ldap_explode_dn',
  ),
  'ldap_first_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_entry_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_first_attribute',
  ),
  'ldap_first_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_first_entry',
  ),
  'ldap_first_reference' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_first_reference',
  ),
  'ldap_free_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_free_result',
  ),
  'ldap_get_attributes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_entry_identifier',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ldap_get_attributes',
  ),
  'ldap_get_dn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_entry_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_get_dn',
  ),
  'ldap_get_entries' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_identifier',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ldap_get_entries',
  ),
  'ldap_get_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$retval',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_get_option',
  ),
  'ldap_get_values_len' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_entry_identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ldap_get_values_len',
  ),
  'ldap_get_values' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_entry_identifier',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ldap_get_values',
  ),
  'ldap_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$base_dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filter',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$attributes',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$attrsonly',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$sizelimit',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$timelimit',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$deref',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_list',
  ),
  'ldap_mod_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_mod_add',
  ),
  'ldap_mod_del' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_mod_del',
  ),
  'ldap_mod_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_mod_replace',
  ),
  'ldap_modify_batch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_modify_batch',
  ),
  'ldap_modify' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_modify',
  ),
  'ldap_next_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_entry_identifier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_next_attribute',
  ),
  'ldap_next_entry' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result_entry_identifier',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_next_entry',
  ),
  'ldap_next_reference' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$entry',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_next_reference',
  ),
  'ldap_parse_reference' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$entry',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$referrals',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_parse_reference',
  ),
  'ldap_parse_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$errcode',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$matcheddn',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '&$errmsg',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'array',
        'name' => '&$referrals',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_parse_result',
  ),
  'ldap_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$base_dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filter',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$attributes',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$attrsonly',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$sizelimit',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$timelimit',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$deref',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_read',
  ),
  'ldap_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$newrdn',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$newparent',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$deleteoldrdn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_rename',
  ),
  'ldap_sasl_bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$binddn',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$sasl_mech',
        'initializer' => '= NULL',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$sasl_realm',
        'initializer' => '= NULL',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$sasl_authc_id',
        'initializer' => '= NULL',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$sasl_authz_id',
        'initializer' => '= NULL',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$props',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_sasl_bind',
  ),
  'ldap_search' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$base_dn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$filter',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$attributes',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$attrsonly',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$sizelimit',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$timelimit',
        'required' => false,
      ),
      7 => 
      array (
        'type' => 'int',
        'name' => '$deref',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ldap_search',
  ),
  'ldap_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$newval',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_set_option',
  ),
  'ldap_set_rebind_proc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_set_rebind_proc',
  ),
  'ldap_sort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$result',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sortfilter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_sort',
  ),
  'ldap_start_tls' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_start_tls',
  ),
  'ldap_t61_to_8859' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ldap_t61_to_8859',
  ),
  'ldap_unbind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link_identifier',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ldap_unbind',
  ),
  'decrement' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$initial_value',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$expiry',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'decrement',
  ),
  'getExtendedStats' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$slabid',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= 100',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'getExtendedStats',
  ),
  'getServerStatus' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 11211',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'getServerStatus',
  ),
  'getStats' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getStats',
  ),
  'increment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$initial_value',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$expiry',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'increment',
  ),
  'pconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'pconnect',
  ),
  'replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'replace',
  ),
  'setCompressThreshold' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$threshold',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$min_savings',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setCompressThreshold',
  ),
  'setServerParams' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 11211',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$retry_interval',
        'initializer' => '= false',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$status',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'callable',
        'name' => '$failure_callback',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setServerParams',
  ),
  'memcache_debug' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$on_off',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'memcache_debug',
  ),
  'addByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'addByKey',
  ),
  'appendByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'appendByKey',
  ),
  'cas' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$cas_token',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'cas',
  ),
  'casByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$cas_token',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'casByKey',
  ),
  'decrementByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$initial_value',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$expiry',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'decrementByKey',
  ),
  'deleteByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$time',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'deleteByKey',
  ),
  'deleteMulti' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$time',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'deleteMulti',
  ),
  'deleteMultiByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$time',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'deleteMultiByKey',
  ),
  'getAllKeys' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getAllKeys',
  ),
  'getByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$cache_cb',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '&$cas_token',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getByKey',
  ),
  'getDelayed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$with_cas',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$value_cb',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getDelayed',
  ),
  'getDelayedByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$with_cas',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$value_cb',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getDelayedByKey',
  ),
  'getMulti' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$cas_tokens',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getMulti',
  ),
  'getMultiByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$cas_tokens',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getMultiByKey',
  ),
  'getResultCode' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getResultCode',
  ),
  'getResultMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getResultMessage',
  ),
  'getServerByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getServerByKey',
  ),
  'getServerList' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getServerList',
  ),
  'incrementByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$initial_value',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$expiry',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'incrementByKey',
  ),
  'isPersistent' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isPersistent',
  ),
  'isPristine' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isPristine',
  ),
  'prependByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'prependByKey',
  ),
  'quit' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'quit',
  ),
  'replaceByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'replaceByKey',
  ),
  'resetServerList' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'resetServerList',
  ),
  'setByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setByKey',
  ),
  'setMulti' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$items',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setMulti',
  ),
  'setMultiByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$items',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setMultiByKey',
  ),
  'setSaslAuthData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSaslAuthData',
  ),
  'touchByKey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server_key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$expiration',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'touchByKey',
  ),
  'mqseries_back' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_back',
  ),
  'mqseries_begin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$beginOptions',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_begin',
  ),
  'mqseries_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$hobj',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_close',
  ),
  'mqseries_cmit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_cmit',
  ),
  'mqseries_conn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$qManagerName',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '&$hconn',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_conn',
  ),
  'mqseries_connx' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$qManagerName',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$connOptions',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '&$hconn',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_connx',
  ),
  'mqseries_disc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_disc',
  ),
  'mqseries_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hConn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$hObj',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$md',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$gmo',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '&$bufferLength',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '&$msg',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '&$data_length',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_get',
  ),
  'mqseries_inq' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$hobj',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$selectorCount',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$selectors',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$intAttrCount',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'resource',
        'name' => '&$intAttr',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$charAttrLength',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'resource',
        'name' => '&$charAttr',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_inq',
  ),
  'mqseries_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$objDesc',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '&$hobj',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_open',
  ),
  'mqseries_put1' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '&$objDesc',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '&$msgDesc',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'resource',
        'name' => '&$pmo',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$buffer',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_put1',
  ),
  'mqseries_put' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hConn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$hObj',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$md',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$pmo',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_put',
  ),
  'mqseries_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$hconn',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$hobj',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$selectorcount',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$selectors',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$intattrcount',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'array',
        'name' => '$intattrs',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$charattrlength',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'array',
        'name' => '$charattrs',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'resource',
        'name' => '&$compCode',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'resource',
        'name' => '&$reason',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'mqseries_set',
  ),
  'mqseries_strerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$reason',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'mqseries_strerror',
  ),
  'checkdnsrr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'initializer' => '= "MX"',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'checkdnsrr',
  ),
  'closelog' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'closelog',
  ),
  'define_syslog_variables' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'define_syslog_variables',
  ),
  'dns_get_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= DNS_ANY',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$authns',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$addtl',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '&$raw',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'dns_get_record',
  ),
  'fsockopen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$errno',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$errstr',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'initializer' => '= ini_get("default_socket_timeout")',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'fsockopen',
  ),
  'gethostbyaddr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ip_address',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gethostbyaddr',
  ),
  'gethostbyname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gethostbyname',
  ),
  'gethostbynamel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'gethostbynamel',
  ),
  'gethostname' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'gethostname',
  ),
  'getmxrr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$mxhosts',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$weight',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'getmxrr',
  ),
  'getprotobyname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getprotobyname',
  ),
  'getprotobynumber' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getprotobynumber',
  ),
  'getservbyname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$service',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$protocol',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'getservbyname',
  ),
  'getservbyport' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$protocol',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getservbyport',
  ),
  'header_register_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'header_register_callback',
  ),
  'header_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'header_remove',
  ),
  'header' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$replace',
        'initializer' => '= true',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$http_response_code',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'header',
  ),
  'headers_list' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'headers_list',
  ),
  'headers_sent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$file',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '&$line',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'headers_sent',
  ),
  'http_response_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$response_code',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'http_response_code',
  ),
  'inet_ntop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$in_addr',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'inet_ntop',
  ),
  'inet_pton' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$address',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'inet_pton',
  ),
  'ip2long' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ip_address',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ip2long',
  ),
  'long2ip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$proper_address',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'long2ip',
  ),
  'openlog' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ident',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$facility',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'openlog',
  ),
  'pfsockopen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= -1',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$errno',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '&$errstr',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'initializer' => '= ini_get("default_socket_timeout")',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'pfsockopen',
  ),
  'setcookie' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$expire',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$secure',
        'initializer' => '= false',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'bool',
        'name' => '$httponly',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setcookie',
  ),
  'setrawcookie' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$expire',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'bool',
        'name' => '$secure',
        'initializer' => '= false',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'bool',
        'name' => '$httponly',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'setrawcookie',
  ),
  'syslog' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$priority',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'syslog',
  ),
  'rrd_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rrd_create',
  ),
  'rrd_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'rrd_error',
  ),
  'rrd_fetch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'rrd_fetch',
  ),
  'rrd_first' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$raaindex',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'rrd_first',
  ),
  'rrd_graph' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'rrd_graph',
  ),
  'rrd_info' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'rrd_info',
  ),
  'rrd_last' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'rrd_last',
  ),
  'rrd_lastupdate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'rrd_lastupdate',
  ),
  'rrd_restore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$xml_file',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$rrd_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'rrd_restore',
  ),
  'rrd_tune' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rrd_tune',
  ),
  'rrd_update' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'rrd_update',
  ),
  'rrd_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'rrd_version',
  ),
  'rrd_xport' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'rrd_xport',
  ),
  'rrdc_disconnect' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'rrdc_disconnect',
  ),
  'addArchive' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$description',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addArchive',
  ),
  'addDataSource' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$description',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addDataSource',
  ),
  'saveVerbose' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'saveVerbose',
  ),
  'snmp_get_quick_print' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'snmp_get_quick_print',
  ),
  'snmp_get_valueretrieval' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'snmp_get_valueretrieval',
  ),
  'snmp_read_mib' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmp_read_mib',
  ),
  'snmp_set_enum_print' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$enum_print',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmp_set_enum_print',
  ),
  'snmp_set_oid_numeric_print' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$oid_format',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'snmp_set_oid_numeric_print',
  ),
  'snmp_set_oid_output_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$oid_format',
        'initializer' => '= SNMP_OID_OUTPUT_MODULE',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmp_set_oid_output_format',
  ),
  'snmp_set_quick_print' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$quick_print',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmp_set_quick_print',
  ),
  'snmp_set_valueretrieval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$method',
        'initializer' => '= SNMP_VALUE_LIBRARY',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmp_set_valueretrieval',
  ),
  'snmp2_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'snmp2_get',
  ),
  'snmp2_getnext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'snmp2_getnext',
  ),
  'snmp2_real_walk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'snmp2_real_walk',
  ),
  'snmp2_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmp2_set',
  ),
  'snmp2_walk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'snmp2_walk',
  ),
  'snmp3_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sec_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sec_level',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$auth_protocol',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$auth_passphrase',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$priv_protocol',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$priv_passphrase',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'snmp3_get',
  ),
  'snmp3_getnext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sec_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sec_level',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$auth_protocol',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$auth_passphrase',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$priv_protocol',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$priv_passphrase',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'snmp3_getnext',
  ),
  'snmp3_real_walk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sec_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sec_level',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$auth_protocol',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$auth_passphrase',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$priv_protocol',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$priv_passphrase',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'snmp3_real_walk',
  ),
  'snmp3_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sec_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sec_level',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$auth_protocol',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$auth_passphrase',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$priv_protocol',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$priv_passphrase',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      10 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      11 => 
      array (
        'type' => 'int',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmp3_set',
  ),
  'snmp3_walk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sec_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sec_level',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$auth_protocol',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$auth_passphrase',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$priv_protocol',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$priv_passphrase',
        'required' => true,
      ),
      7 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      8 => 
      array (
        'type' => 'string',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      9 => 
      array (
        'type' => 'string',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'snmp3_walk',
  ),
  'snmpget' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'snmpget',
  ),
  'snmpgetnext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'snmpgetnext',
  ),
  'snmprealwalk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'snmprealwalk',
  ),
  'snmpset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'snmpset',
  ),
  'snmpwalk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'snmpwalk',
  ),
  'snmpwalkoid' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$community',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$timeout',
        'initializer' => '= 1000000',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$retries',
        'initializer' => '= 5',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'snmpwalkoid',
  ),
  'getError' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getError',
  ),
  'getnext' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$object_id',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getnext',
  ),
  'setSecurity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$sec_level',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$auth_protocol',
        'initializer' => '=',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$auth_passphrase',
        'initializer' => '=',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$priv_protocol',
        'initializer' => '=',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$priv_passphrase',
        'initializer' => '=',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$contextName',
        'initializer' => '=',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$contextEngineID',
        'initializer' => '=',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSecurity',
  ),
  'walk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$object_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$suffix_as_key',
        'initializer' => '= FALSE',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$max_repetitions',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$non_repeaters',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'walk',
  ),
  'socket_accept' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'socket_accept',
  ),
  'socket_bind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$address',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_bind',
  ),
  'socket_clear_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'socket_clear_error',
  ),
  'socket_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'socket_close',
  ),
  'socket_cmsg_space' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_cmsg_space',
  ),
  'socket_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$address',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_connect',
  ),
  'socket_create_listen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$backlog',
        'initializer' => '= 128',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'socket_create_listen',
  ),
  'socket_create_pair' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$protocol',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$fd',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_create_pair',
  ),
  'socket_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$protocol',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'socket_create',
  ),
  'socket_get_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$optname',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'socket_get_option',
  ),
  'socket_getpeername' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$address',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$port',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_getpeername',
  ),
  'socket_getsockname' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$addr',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '&$port',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_getsockname',
  ),
  'socket_import_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$stream',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'socket_import_stream',
  ),
  'socket_last_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_last_error',
  ),
  'socket_listen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$backlog',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_listen',
  ),
  'socket_read' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'initializer' => '= PHP_BINARY_READ',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'socket_read',
  ),
  'socket_recv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$buf',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_recv',
  ),
  'socket_recvfrom' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$buf',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '&$name',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '&$port',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_recvfrom',
  ),
  'socket_recvmsg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$message',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_recvmsg',
  ),
  'socket_select' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$read',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$write',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$except',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$tv_sec',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$tv_usec',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_select',
  ),
  'socket_send' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$buf',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_send',
  ),
  'socket_sendmsg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$message',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_sendmsg',
  ),
  'socket_sendto' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$buf',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$addr',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_sendto',
  ),
  'socket_set_block' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_set_block',
  ),
  'socket_set_nonblock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_set_nonblock',
  ),
  'socket_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$level',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$optname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$optval',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_set_option',
  ),
  'socket_shutdown' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$how',
        'initializer' => '= 2',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'socket_shutdown',
  ),
  'socket_strerror' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errno',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'socket_strerror',
  ),
  'socket_write' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$socket',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$buffer',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'socket_write',
  ),
  'ssh2_auth_agent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_auth_agent',
  ),
  'ssh2_auth_hostbased_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$hostname',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$pubkeyfile',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$privkeyfile',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$local_username',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_auth_hostbased_file',
  ),
  'ssh2_auth_none' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'ssh2_auth_none',
  ),
  'ssh2_auth_password' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_auth_password',
  ),
  'ssh2_auth_pubkey_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pubkeyfile',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$privkeyfile',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$passphrase',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_auth_pubkey_file',
  ),
  'ssh2_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'initializer' => '= 22',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$methods',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$callbacks',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ssh2_connect',
  ),
  'ssh2_exec' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$command',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pty',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$env',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'initializer' => '= 80',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'initializer' => '= 25',
        'required' => false,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$width_height_type',
        'initializer' => '= SSH2_TERM_UNIT_CHARS',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ssh2_exec',
  ),
  'ssh2_fetch_stream' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$channel',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$streamid',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ssh2_fetch_stream',
  ),
  'ssh2_fingerprint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ssh2_fingerprint',
  ),
  'ssh2_methods_negotiated' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ssh2_methods_negotiated',
  ),
  'ssh2_publickey_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pkey',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$algoname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$blob',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$overwrite',
        'initializer' => '= false',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$attributes',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_publickey_add',
  ),
  'ssh2_publickey_init' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ssh2_publickey_init',
  ),
  'ssh2_publickey_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pkey',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ssh2_publickey_list',
  ),
  'ssh2_publickey_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$pkey',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$algoname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$blob',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_publickey_remove',
  ),
  'ssh2_scp_recv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$local_file',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_scp_recv',
  ),
  'ssh2_scp_send' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$local_file',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$remote_file',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$create_mode',
        'initializer' => '= 0644',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_scp_send',
  ),
  'ssh2_sftp_chmod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_sftp_chmod',
  ),
  'ssh2_sftp_lstat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ssh2_sftp_lstat',
  ),
  'ssh2_sftp_mkdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dirname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0777',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$recursive',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_sftp_mkdir',
  ),
  'ssh2_sftp_readlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ssh2_sftp_readlink',
  ),
  'ssh2_sftp_realpath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ssh2_sftp_realpath',
  ),
  'ssh2_sftp_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$from',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$to',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_sftp_rename',
  ),
  'ssh2_sftp_rmdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dirname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_sftp_rmdir',
  ),
  'ssh2_sftp_stat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'ssh2_sftp_stat',
  ),
  'ssh2_sftp_symlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$target',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_sftp_symlink',
  ),
  'ssh2_sftp_unlink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$sftp',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ssh2_sftp_unlink',
  ),
  'ssh2_sftp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ssh2_sftp',
  ),
  'ssh2_shell' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$term_type',
        'initializer' => '= "vanilla"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$env',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'initializer' => '= 80',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$height',
        'initializer' => '= 25',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$width_height_type',
        'initializer' => '= SSH2_TERM_UNIT_CHARS',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'ssh2_shell',
  ),
  'ssh2_tunnel' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'ssh2_tunnel',
  ),
  'stomp_connect_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'stomp_connect_error',
  ),
  'stomp_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'stomp_version',
  ),
  'abort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$transaction_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'abort',
  ),
  'ack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$msg',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'ack',
  ),
  'begin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$transaction_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'begin',
  ),
  'getReadTimeout' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getReadTimeout',
  ),
  'getSessionId' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSessionId',
  ),
  'hasFrame' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasFrame',
  ),
  'readFrame' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "stompFrame"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'stompframe',
    'name' => 'readFrame',
  ),
  'setReadTimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$microseconds',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setReadTimeout',
  ),
  'subscribe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'subscribe',
  ),
  'unsubscribe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'unsubscribe',
  ),
  'stomp_abort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$transaction_id',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_abort',
  ),
  'stomp_ack' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$msg',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_ack',
  ),
  'stomp_begin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$transaction_id',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_begin',
  ),
  'stomp_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$transaction_id',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_commit',
  ),
  'stomp_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$broker',
        'initializer' => '= ini_get("stomp.default_broker_uri")',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$username',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$password',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'stomp_connect',
  ),
  'stomp_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_close',
  ),
  'stomp_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'stomp_error',
  ),
  'stomp_get_read_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'stomp_get_read_timeout',
  ),
  'stomp_get_session_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'stomp_get_session_id',
  ),
  'stomp_has_frame' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_has_frame',
  ),
  'stomp_read_frame' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'stomp_read_frame',
  ),
  'stomp_send' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$msg',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_send',
  ),
  'stomp_set_read_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$seconds',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$microseconds',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'stomp_set_read_timeout',
  ),
  'stomp_subscribe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_subscribe',
  ),
  'stomp_unsubscribe' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$link',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$destination',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$headers',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'stomp_unsubscribe',
  ),
  'getDetails' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDetails',
  ),
  'checkProbabilityModel' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'checkProbabilityModel',
  ),
  'getLabels' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getLabels',
  ),
  'getNrClass' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getNrClass',
  ),
  'getSvmType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getSvmType',
  ),
  'getSvrProbability' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getSvrProbability',
  ),
  'predict_probability' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'predict_probability',
  ),
  'predict' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'predict',
  ),
  'svn_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$recursive',
        'initializer' => '= true',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$force',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_add',
  ),
  'svn_auth_get_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'svn_auth_get_parameter',
  ),
  'svn_auth_set_parameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'svn_auth_set_parameter',
  ),
  'svn_blame' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$repository_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$revision_no',
        'initializer' => '= SVN_REVISION_HEAD',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'svn_blame',
  ),
  'svn_cat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$repos_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$revision_no',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'svn_cat',
  ),
  'svn_checkout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$repos',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$targetpath',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$revision',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_checkout',
  ),
  'svn_cleanup' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$workingdir',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_cleanup',
  ),
  'svn_client_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'svn_client_version',
  ),
  'svn_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$log',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$targets',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$recursive',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'svn_commit',
  ),
  'svn_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$force',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_delete',
  ),
  'svn_diff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rev1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$path2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$rev2',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'svn_diff',
  ),
  'svn_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$frompath',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$topath',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$working_copy',
        'initializer' => '= true',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$revision_no',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_export',
  ),
  'svn_fs_abort_txn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$txn',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_abort_txn',
  ),
  'svn_fs_apply_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_fs_apply_text',
  ),
  'svn_fs_begin_txn2' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$repos',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rev',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_fs_begin_txn2',
  ),
  'svn_fs_change_node_prop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_change_node_prop',
  ),
  'svn_fs_check_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fsroot',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'svn_fs_check_path',
  ),
  'svn_fs_contents_changed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$root2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$path2',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_contents_changed',
  ),
  'svn_fs_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$from_root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$from_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$to_root',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$to_path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_copy',
  ),
  'svn_fs_delete' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_delete',
  ),
  'svn_fs_dir_entries' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fsroot',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'svn_fs_dir_entries',
  ),
  'svn_fs_file_contents' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fsroot',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_fs_file_contents',
  ),
  'svn_fs_file_length' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fsroot',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'svn_fs_file_length',
  ),
  'svn_fs_is_dir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_is_dir',
  ),
  'svn_fs_is_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_is_file',
  ),
  'svn_fs_make_dir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_make_dir',
  ),
  'svn_fs_make_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_make_file',
  ),
  'svn_fs_node_created_rev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fsroot',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'svn_fs_node_created_rev',
  ),
  'svn_fs_node_prop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fsroot',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$propname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'svn_fs_node_prop',
  ),
  'svn_fs_props_changed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$root1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'resource',
        'name' => '$root2',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$path2',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_fs_props_changed',
  ),
  'svn_fs_revision_prop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fs',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$revnum',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$propname',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'svn_fs_revision_prop',
  ),
  'svn_fs_revision_root' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fs',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$revnum',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_fs_revision_root',
  ),
  'svn_fs_txn_root' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$txn',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_fs_txn_root',
  ),
  'svn_fs_youngest_rev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$fs',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'svn_fs_youngest_rev',
  ),
  'svn_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$nonrecursive',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_import',
  ),
  'svn_log' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$repos_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start_revision',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$end_revision',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'svn_log',
  ),
  'svn_ls' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$repos_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$revision_no',
        'initializer' => '= SVN_REVISION_HEAD',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$recurse',
        'initializer' => '= false',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$peg',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'svn_ls',
  ),
  'svn_mkdir' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$log_message',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_mkdir',
  ),
  'svn_repos_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$config',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$fsconfig',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_repos_create',
  ),
  'svn_repos_fs_begin_txn_for_commit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$repos',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$rev',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$author',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$log_msg',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_repos_fs_begin_txn_for_commit',
  ),
  'svn_repos_fs_commit_txn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$txn',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'svn_repos_fs_commit_txn',
  ),
  'svn_repos_fs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$repos',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_repos_fs',
  ),
  'svn_repos_hotcopy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$repospath',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$destpath',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$cleanlogs',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_repos_hotcopy',
  ),
  'svn_repos_open' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'svn_repos_open',
  ),
  'svn_repos_recover' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_repos_recover',
  ),
  'svn_revert' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$recursive',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'svn_revert',
  ),
  'svn_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'svn_status',
  ),
  'svn_update' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$revno',
        'initializer' => '= SVN_REVISION_HEAD',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$recurse',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'svn_update',
  ),
  'tcpwrap_check' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$daemon',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$address',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$user',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$nodns',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'tcpwrap_check',
  ),
  'auth' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'auth',
  ),
  'ban' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$vcl_regex',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'ban',
  ),
  'banUrl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$vcl_regex',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'banUrl',
  ),
  'clearPanic' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'clearPanic',
  ),
  'disconnect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dsn',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQSocket',
    'name' => 'disconnect',
  ),
  'getPanic' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPanic',
  ),
  'setCompat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$compat',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setCompat',
  ),
  'setHost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setHost',
  ),
  'setIdent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ident',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setIdent',
  ),
  'setPort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setPort',
  ),
  'setSecret' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$secret',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setSecret',
  ),
  'getSnapshot' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getSnapshot',
  ),
  'getTagName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTagName',
  ),
  'yaz_addinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'yaz_addinfo',
  ),
  'yaz_ccl_conf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$config',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_ccl_conf',
  ),
  'yaz_ccl_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$result',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'yaz_ccl_parse',
  ),
  'yaz_close' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'yaz_close',
  ),
  'yaz_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$zurl',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'yaz_connect',
  ),
  'yaz_database' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$databases',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'yaz_database',
  ),
  'yaz_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$elementset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'yaz_element',
  ),
  'yaz_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'yaz_errno',
  ),
  'yaz_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'yaz_error',
  ),
  'yaz_es_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'yaz_es_result',
  ),
  'yaz_es' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_es',
  ),
  'yaz_get_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'yaz_get_option',
  ),
  'yaz_hits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$searchresult',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'yaz_hits',
  ),
  'yaz_itemorder' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_itemorder',
  ),
  'yaz_present' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'yaz_present',
  ),
  'yaz_range' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_range',
  ),
  'yaz_record' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pos',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'yaz_record',
  ),
  'yaz_scan_result' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$result',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'yaz_scan_result',
  ),
  'yaz_scan' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$startterm',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_scan',
  ),
  'yaz_schema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$schema',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_schema',
  ),
  'yaz_search' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'yaz_search',
  ),
  'yaz_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_set_option',
  ),
  'yaz_sort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$criteria',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_sort',
  ),
  'yaz_syntax' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$syntax',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yaz_syntax',
  ),
  'yaz_wait' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$options',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'yaz_wait',
  ),
  'yp_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$callback',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'yp_all',
  ),
  'yp_cat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'yp_cat',
  ),
  'yp_err_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$errorcode',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'yp_err_string',
  ),
  'yp_errno' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'yp_errno',
  ),
  'yp_first' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'yp_first',
  ),
  'yp_get_default_domain' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'yp_get_default_domain',
  ),
  'yp_master' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'yp_master',
  ),
  'yp_match' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'yp_match',
  ),
  'yp_next' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'yp_next',
  ),
  'yp_order' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$map',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'yp_order',
  ),
  'getSocket' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$persistent_id',
        'initializer' => '= null',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'callback',
        'name' => '$on_new_socket',
        'initializer' => '= null',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQSocket',
    'name' => 'getSocket',
  ),
  'setOpt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'number',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'boolean',
    'name' => 'setOpt',
  ),
  'getEndpoints' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getEndpoints',
  ),
  'getPersistentId' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getPersistentId',
  ),
  'getSocketType' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'integer',
    'name' => 'getSocketType',
  ),
  'getSockOpt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getSockOpt',
  ),
  'recv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'recv',
  ),
  'recvMulti' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'recvMulti',
  ),
  'setSockOpt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQSocket',
    'name' => 'setSockOpt',
  ),
  'unbind' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dsn',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQSocket',
    'name' => 'unbind',
  ),
  'getIdleTimeout' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ZMQDevice',
    'name' => 'getIdleTimeout',
  ),
  'getTimerTimeout' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ZMQDevice',
    'name' => 'getTimerTimeout',
  ),
  'setIdleCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$cb_func',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timeout',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$user_data',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQDevice',
    'name' => 'setIdleCallback',
  ),
  'setIdleTimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$timeout',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQDevice',
    'name' => 'setIdleTimeout',
  ),
  'setTimerCallback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$cb_func',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$timeout',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$user_data',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQDevice',
    'name' => 'setTimerCallback',
  ),
  'setTimerTimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$timeout',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ZMQDevice',
    'name' => 'setTimerTimeout',
  ),
  'udm_add_search_limit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$var',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'udm_add_search_limit',
  ),
  'udm_alloc_agent_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$databases',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'udm_alloc_agent_array',
  ),
  'udm_alloc_agent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dbaddr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dbmode',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'udm_alloc_agent',
  ),
  'udm_api_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'udm_api_version',
  ),
  'udm_cat_list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$category',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'udm_cat_list',
  ),
  'udm_cat_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$category',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'udm_cat_path',
  ),
  'udm_check_charset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$charset',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'udm_check_charset',
  ),
  'udm_clear_search_limits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'udm_clear_search_limits',
  ),
  'udm_crc32' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'udm_crc32',
  ),
  'udm_errno' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'udm_errno',
  ),
  'udm_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'udm_error',
  ),
  'udm_find' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'udm_find',
  ),
  'udm_free_agent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'udm_free_agent',
  ),
  'udm_free_ispell_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$agent',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'udm_free_ispell_data',
  ),
  'udm_free_res' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$res',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'udm_free_res',
  ),
  'udm_get_doc_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'udm_get_doc_count',
  ),
  'udm_get_res_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$res',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$row',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'udm_get_res_field',
  ),
  'udm_get_res_param' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$res',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$param',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'udm_get_res_param',
  ),
  'udm_hash32' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'udm_hash32',
  ),
  'udm_load_ispell_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$var',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$val1',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$val2',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'udm_load_ispell_data',
  ),
  'udm_set_agent_param' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$agent',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$var',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'udm_set_agent_param',
  ),
  'solr_get_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'solr_get_version',
  ),
  'digestXmlResponse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$xmlresponse',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$parse_mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrObject',
    'name' => 'digestXmlResponse',
  ),
  'escapeQueryChars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'escapeQueryChars',
  ),
  'getSolrVersion' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getSolrVersion',
  ),
  'queryPhrase' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'queryPhrase',
  ),
  'addField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addField',
  ),
  'deleteField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'deleteField',
  ),
  'fieldExists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'fieldExists',
  ),
  'getBoost' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getBoost',
  ),
  'getField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDocumentField',
    'name' => 'getField',
  ),
  'getFieldBoost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getFieldBoost',
  ),
  'getFieldNames' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFieldNames',
  ),
  'setBoost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$documentBoostValue',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setBoost',
  ),
  'setFieldBoost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldName',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$fieldBoostValue',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFieldBoost',
  ),
  'getInputDocument' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'SolrInputDocument',
    'name' => 'getInputDocument',
  ),
  'getPropertyNames' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getPropertyNames',
  ),
  'addDocument' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SolrInputDocument',
        'name' => '$doc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$overwrite',
        'initializer' => '= true',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$commitWithin',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'addDocument',
  ),
  'addDocuments' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$docs',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$overwrite',
        'initializer' => '= true',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$commitWithin',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addDocuments',
  ),
  'deleteById' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$id',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'deleteById',
  ),
  'deleteByIds' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$ids',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'deleteByIds',
  ),
  'deleteByQueries' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$queries',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'deleteByQueries',
  ),
  'deleteByQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'deleteByQuery',
  ),
  'getDebug' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDebug',
  ),
  'optimize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$maxSegments',
        'initializer' => '= 1',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$softCommit',
        'initializer' => '= true',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$waitSearcher',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'optimize',
  ),
  'request' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$raw_request',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrUpdateResponse',
    'name' => 'request',
  ),
  'setResponseWriter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$responseWriter',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setResponseWriter',
  ),
  'setServlet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setServlet',
  ),
  'threads' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'threads',
  ),
  'getDigestedResponse' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDigestedResponse',
  ),
  'getHttpStatus' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHttpStatus',
  ),
  'getHttpStatusMessage' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHttpStatusMessage',
  ),
  'getRawRequest' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRawRequest',
  ),
  'getRawRequestHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRawRequestHeaders',
  ),
  'getRawResponse' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRawResponse',
  ),
  'getRawResponseHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRawResponseHeaders',
  ),
  'setParseMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$parser_mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setParseMode',
  ),
  'success' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'success',
  ),
  'addParam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrParams',
    'name' => 'addParam',
  ),
  'getPreparedParams' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'final',
    'type' => 'array',
    'name' => 'getPreparedParams',
  ),
  'addFacetDateField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dateField',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addFacetDateField',
  ),
  'addFacetDateOther' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addFacetDateOther',
  ),
  'addFacetField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addFacetField',
  ),
  'addFacetQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$facetQuery',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addFacetQuery',
  ),
  'addFilterQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fq',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addFilterQuery',
  ),
  'addHighlightField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addHighlightField',
  ),
  'addMltField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addMltField',
  ),
  'addMltQueryField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$boost',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addMltQueryField',
  ),
  'addSortField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$order',
        'initializer' => '= SolrQuery::ORDER_DESC',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addSortField',
  ),
  'addStatsFacet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addStatsFacet',
  ),
  'addStatsField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'addStatsField',
  ),
  'getFacet' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getFacet',
  ),
  'getFacetDateEnd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFacetDateEnd',
  ),
  'getFacetDateFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFacetDateFields',
  ),
  'getFacetDateGap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFacetDateGap',
  ),
  'getFacetDateHardEnd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFacetDateHardEnd',
  ),
  'getFacetDateOther' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFacetDateOther',
  ),
  'getFacetDateStart' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFacetDateStart',
  ),
  'getFacetFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFacetFields',
  ),
  'getFacetLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFacetLimit',
  ),
  'getFacetMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFacetMethod',
  ),
  'getFacetMinCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFacetMinCount',
  ),
  'getFacetMissing' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getFacetMissing',
  ),
  'getFacetOffset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFacetOffset',
  ),
  'getFacetPrefix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFacetPrefix',
  ),
  'getFacetQueries' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFacetQueries',
  ),
  'getFacetSort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getFacetSort',
  ),
  'getFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFields',
  ),
  'getFilterQueries' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFilterQueries',
  ),
  'getHighlight' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getHighlight',
  ),
  'getHighlightAlternateField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHighlightAlternateField',
  ),
  'getHighlightFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getHighlightFields',
  ),
  'getHighlightFormatter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHighlightFormatter',
  ),
  'getHighlightFragmenter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHighlightFragmenter',
  ),
  'getHighlightFragsize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHighlightFragsize',
  ),
  'getHighlightHighlightMultiTerm' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getHighlightHighlightMultiTerm',
  ),
  'getHighlightMaxAlternateFieldLength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHighlightMaxAlternateFieldLength',
  ),
  'getHighlightMaxAnalyzedChars' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHighlightMaxAnalyzedChars',
  ),
  'getHighlightMergeContiguous' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getHighlightMergeContiguous',
  ),
  'getHighlightRegexMaxAnalyzedChars' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHighlightRegexMaxAnalyzedChars',
  ),
  'getHighlightRegexPattern' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHighlightRegexPattern',
  ),
  'getHighlightRegexSlop' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'float',
    'name' => 'getHighlightRegexSlop',
  ),
  'getHighlightRequireFieldMatch' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getHighlightRequireFieldMatch',
  ),
  'getHighlightSimplePost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHighlightSimplePost',
  ),
  'getHighlightSimplePre' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getHighlightSimplePre',
  ),
  'getHighlightSnippets' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getHighlightSnippets',
  ),
  'getHighlightUsePhraseHighlighter' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getHighlightUsePhraseHighlighter',
  ),
  'getMlt' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getMlt',
  ),
  'getMltBoost' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getMltBoost',
  ),
  'getMltCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMltCount',
  ),
  'getMltFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getMltFields',
  ),
  'getMltMaxNumQueryTerms' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMltMaxNumQueryTerms',
  ),
  'getMltMaxNumTokens' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMltMaxNumTokens',
  ),
  'getMltMaxWordLength' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMltMaxWordLength',
  ),
  'getMltMinDocFrequency' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMltMinDocFrequency',
  ),
  'getMltMinTermFrequency' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMltMinTermFrequency',
  ),
  'getMltMinWordLength' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getMltMinWordLength',
  ),
  'getMltQueryFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getMltQueryFields',
  ),
  'getRows' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getRows',
  ),
  'getSortFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getSortFields',
  ),
  'getStart' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getStart',
  ),
  'getStatsFacets' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getStatsFacets',
  ),
  'getStatsFields' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getStatsFields',
  ),
  'getTerms' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getTerms',
  ),
  'getTermsField' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTermsField',
  ),
  'getTermsIncludeLowerBound' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getTermsIncludeLowerBound',
  ),
  'getTermsIncludeUpperBound' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getTermsIncludeUpperBound',
  ),
  'getTermsLimit' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTermsLimit',
  ),
  'getTermsLowerBound' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTermsLowerBound',
  ),
  'getTermsMaxCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTermsMaxCount',
  ),
  'getTermsMinCount' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTermsMinCount',
  ),
  'getTermsPrefix' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTermsPrefix',
  ),
  'getTermsReturnRaw' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getTermsReturnRaw',
  ),
  'getTermsSort' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTermsSort',
  ),
  'getTermsUpperBound' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getTermsUpperBound',
  ),
  'getTimeAllowed' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getTimeAllowed',
  ),
  'removeFacetDateField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeFacetDateField',
  ),
  'removeFacetDateOther' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeFacetDateOther',
  ),
  'removeFacetField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeFacetField',
  ),
  'removeFacetQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeFacetQuery',
  ),
  'removeField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeField',
  ),
  'removeFilterQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fq',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeFilterQuery',
  ),
  'removeHighlightField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeHighlightField',
  ),
  'removeMltField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeMltField',
  ),
  'removeMltQueryField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$queryField',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeMltQueryField',
  ),
  'removeSortField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeSortField',
  ),
  'removeStatsFacet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeStatsFacet',
  ),
  'removeStatsField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'removeStatsField',
  ),
  'setEchoHandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setEchoHandler',
  ),
  'setEchoParams' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setEchoParams',
  ),
  'setExplainOther' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setExplainOther',
  ),
  'setFacet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacet',
  ),
  'setFacetDateEnd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetDateEnd',
  ),
  'setFacetDateGap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetDateGap',
  ),
  'setFacetDateHardEnd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetDateHardEnd',
  ),
  'setFacetDateStart' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetDateStart',
  ),
  'setFacetEnumCacheMinDefaultFrequency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$frequency',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetEnumCacheMinDefaultFrequency',
  ),
  'setFacetLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetLimit',
  ),
  'setFacetMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetMethod',
  ),
  'setFacetMinCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mincount',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetMinCount',
  ),
  'setFacetMissing' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetMissing',
  ),
  'setFacetOffset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetOffset',
  ),
  'setFacetPrefix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetPrefix',
  ),
  'setFacetSort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$facetSort',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setFacetSort',
  ),
  'setHighlight' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlight',
  ),
  'setHighlightAlternateField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightAlternateField',
  ),
  'setHighlightFormatter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$formatter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightFormatter',
  ),
  'setHighlightFragmenter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fragmenter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightFragmenter',
  ),
  'setHighlightFragsize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightFragsize',
  ),
  'setHighlightHighlightMultiTerm' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightHighlightMultiTerm',
  ),
  'setHighlightMaxAlternateFieldLength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$fieldLength',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightMaxAlternateFieldLength',
  ),
  'setHighlightMaxAnalyzedChars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightMaxAnalyzedChars',
  ),
  'setHighlightMergeContiguous' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightMergeContiguous',
  ),
  'setHighlightRegexMaxAnalyzedChars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$maxAnalyzedChars',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightRegexMaxAnalyzedChars',
  ),
  'setHighlightRegexPattern' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightRegexPattern',
  ),
  'setHighlightRegexSlop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$factor',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightRegexSlop',
  ),
  'setHighlightRequireFieldMatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightRequireFieldMatch',
  ),
  'setHighlightSimplePost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$simplePost',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightSimplePost',
  ),
  'setHighlightSimplePre' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$simplePre',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightSimplePre',
  ),
  'setHighlightSnippets' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$field_override',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightSnippets',
  ),
  'setHighlightUsePhraseHighlighter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setHighlightUsePhraseHighlighter',
  ),
  'setMlt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMlt',
  ),
  'setMltBoost' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltBoost',
  ),
  'setMltCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltCount',
  ),
  'setMltMaxNumQueryTerms' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltMaxNumQueryTerms',
  ),
  'setMltMaxNumTokens' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltMaxNumTokens',
  ),
  'setMltMaxWordLength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$maxWordLength',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltMaxWordLength',
  ),
  'setMltMinDocFrequency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$minDocFrequency',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltMinDocFrequency',
  ),
  'setMltMinTermFrequency' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$minTermFrequency',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltMinTermFrequency',
  ),
  'setMltMinWordLength' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$minWordLength',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setMltMinWordLength',
  ),
  'setOmitHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setOmitHeader',
  ),
  'setQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setQuery',
  ),
  'setRows' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$rows',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setRows',
  ),
  'setShowDebugInfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setShowDebugInfo',
  ),
  'setStart' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setStart',
  ),
  'setStats' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setStats',
  ),
  'setTerms' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTerms',
  ),
  'setTermsField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fieldname',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsField',
  ),
  'setTermsIncludeLowerBound' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsIncludeLowerBound',
  ),
  'setTermsIncludeUpperBound' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsIncludeUpperBound',
  ),
  'setTermsLimit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsLimit',
  ),
  'setTermsLowerBound' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$lowerBound',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsLowerBound',
  ),
  'setTermsMaxCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$frequency',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsMaxCount',
  ),
  'setTermsMinCount' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$frequency',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsMinCount',
  ),
  'setTermsPrefix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsPrefix',
  ),
  'setTermsReturnRaw' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$flag',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsReturnRaw',
  ),
  'setTermsSort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$sortType',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsSort',
  ),
  'setTermsUpperBound' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$upperBound',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTermsUpperBound',
  ),
  'setTimeAllowed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timeAllowed',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrQuery',
    'name' => 'setTimeAllowed',
  ),
  'addBigramPhraseField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$boost',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$slop',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'addBigramPhraseField',
  ),
  'addBoostQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$boost',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'addBoostQuery',
  ),
  'addPhraseField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$boost',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$slop',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'addPhraseField',
  ),
  'addQueryField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$boost',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'addQueryField',
  ),
  'addTrigramPhraseField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$boost',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$slop',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'addTrigramPhraseField',
  ),
  'addUserField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'addUserField',
  ),
  'removeBigramPhraseField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'removeBigramPhraseField',
  ),
  'removeBoostQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'removeBoostQuery',
  ),
  'removePhraseField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'removePhraseField',
  ),
  'removeQueryField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'removeQueryField',
  ),
  'removeTrigramPhraseField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'removeTrigramPhraseField',
  ),
  'removeUserField' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$field',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'removeUserField',
  ),
  'setBigramPhraseFields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fields',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setBigramPhraseFields',
  ),
  'setBigramPhraseSlop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$slop',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setBigramPhraseSlop',
  ),
  'setBoostFunction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setBoostFunction',
  ),
  'setBoostQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$q',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setBoostQuery',
  ),
  'setMinimumMatch' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setMinimumMatch',
  ),
  'setPhraseFields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fields',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setPhraseFields',
  ),
  'setPhraseSlop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$slop',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setPhraseSlop',
  ),
  'setQueryAlt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$q',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setQueryAlt',
  ),
  'setQueryPhraseSlop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$slop',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setQueryPhraseSlop',
  ),
  'setTieBreaker' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$tieBreaker',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setTieBreaker',
  ),
  'setTrigramPhraseFields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fields',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setTrigramPhraseFields',
  ),
  'setTrigramPhraseSlop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$slop',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setTrigramPhraseSlop',
  ),
  'setUserFields' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$fields',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'setUserFields',
  ),
  'useDisMaxQueryParser' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'useDisMaxQueryParser',
  ),
  'useEDisMaxQueryParser' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'SolrDisMaxQuery',
    'name' => 'useEDisMaxQueryParser',
  ),
  'getInternalInfo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getInternalInfo',
  ),
  'addQuery' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'initializer' => '= "*"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'addQuery',
  ),
  'buildExcerpts' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$docs',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$words',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$opts',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'buildExcerpts',
  ),
  'buildKeywords' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$query',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$hits',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'buildKeywords',
  ),
  'getLastError' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getLastError',
  ),
  'getLastWarning' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getLastWarning',
  ),
  'resetFilters' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'resetFilters',
  ),
  'resetGroupBy' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'resetGroupBy',
  ),
  'runQueries' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'runQueries',
  ),
  'setArrayResult' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$array_result',
        'initializer' => '= false',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setArrayResult',
  ),
  'setConnectTimeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$timeout',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setConnectTimeout',
  ),
  'setFieldWeights' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$weights',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFieldWeights',
  ),
  'setFilterFloatRange' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$min',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$max',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$exclude',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFilterFloatRange',
  ),
  'setFilterRange' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$min',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$max',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$exclude',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setFilterRange',
  ),
  'setGeoAnchor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$attrlat',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$attrlong',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '$latitude',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'float',
        'name' => '$longitude',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setGeoAnchor',
  ),
  'setGroupBy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$func',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$groupsort',
        'initializer' => '= "@group desc"',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setGroupBy',
  ),
  'setGroupDistinct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setGroupDistinct',
  ),
  'setIDRange' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$min',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setIDRange',
  ),
  'setIndexWeights' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$weights',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setIndexWeights',
  ),
  'setLimits' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$max_matches',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$cutoff',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setLimits',
  ),
  'setMatchMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setMatchMode',
  ),
  'setMaxQueryTime' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$qtime',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setMaxQueryTime',
  ),
  'setOverride' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$attribute',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setOverride',
  ),
  'setRankingMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$ranker',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRankingMode',
  ),
  'setSelect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$clause',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSelect',
  ),
  'setServer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setServer',
  ),
  'setSortMode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$sortby',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSortMode',
  ),
  'updateAttributes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$attributes',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$mva',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'updateAttributes',
  ),
  'apache_child_terminate' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'apache_child_terminate',
  ),
  'apache_get_modules' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'apache_get_modules',
  ),
  'apache_get_version' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'apache_get_version',
  ),
  'apache_getenv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$variable',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$walk_to_top',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'apache_getenv',
  ),
  'apache_lookup_uri' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'object',
    'name' => 'apache_lookup_uri',
  ),
  'apache_note' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$note_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$note_value',
        'initializer' => '= ""',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'apache_note',
  ),
  'apache_request_headers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'apache_request_headers',
  ),
  'apache_reset_timeout' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'apache_reset_timeout',
  ),
  'apache_response_headers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'apache_response_headers',
  ),
  'apache_setenv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$variable',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$walk_to_top',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'apache_setenv',
  ),
  'getallheaders' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'getallheaders',
  ),
  'virtual' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'virtual',
  ),
  'fastcgi_finish_request' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'boolean',
    'name' => 'fastcgi_finish_request',
  ),
  'iis_add_server' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$server_ip',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$port',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$host_name',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'int',
        'name' => '$rights',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'int',
        'name' => '$start_server',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_add_server',
  ),
  'iis_get_dir_security' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$virtual_path',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_get_dir_security',
  ),
  'iis_get_script_map' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$virtual_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$script_extension',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'iis_get_script_map',
  ),
  'iis_get_server_by_comment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_get_server_by_comment',
  ),
  'iis_get_server_by_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_get_server_by_path',
  ),
  'iis_get_server_rights' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$virtual_path',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_get_server_rights',
  ),
  'iis_get_service_state' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$service_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_get_service_state',
  ),
  'iis_remove_server' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_remove_server',
  ),
  'iis_set_app_settings' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$virtual_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$application_scope',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_set_app_settings',
  ),
  'iis_set_dir_security' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$virtual_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$directory_flags',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_set_dir_security',
  ),
  'iis_set_script_map' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$virtual_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$script_extension',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$engine_path',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$allow_scripting',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_set_script_map',
  ),
  'iis_set_server_rights' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$virtual_path',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$directory_flags',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_set_server_rights',
  ),
  'iis_start_server' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_start_server',
  ),
  'iis_start_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$service_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_start_service',
  ),
  'iis_stop_server' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$server_instance',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_stop_server',
  ),
  'iis_stop_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$service_id',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'iis_stop_service',
  ),
  'nsapi_request_headers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'nsapi_request_headers',
  ),
  'nsapi_response_headers' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'nsapi_response_headers',
  ),
  'nsapi_virtual' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'nsapi_virtual',
  ),
  'msession_connect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$host',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$port',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msession_connect',
  ),
  'msession_count' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'msession_count',
  ),
  'msession_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'msession_create',
  ),
  'msession_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msession_destroy',
  ),
  'msession_disconnect' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'msession_disconnect',
  ),
  'msession_find' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'msession_find',
  ),
  'msession_get_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'msession_get_array',
  ),
  'msession_get_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msession_get_data',
  ),
  'msession_get' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msession_get',
  ),
  'msession_inc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msession_inc',
  ),
  'msession_list' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'msession_list',
  ),
  'msession_listvar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'msession_listvar',
  ),
  'msession_lock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msession_lock',
  ),
  'msession_plugin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$val',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$param',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'msession_plugin',
  ),
  'msession_randstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$param',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'msession_randstr',
  ),
  'msession_set_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$tuples',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'msession_set_array',
  ),
  'msession_set_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msession_set_data',
  ),
  'msession_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'msession_set',
  ),
  'msession_timeout' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$param',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'msession_timeout',
  ),
  'msession_uniq' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$param',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'msession_uniq',
  ),
  'msession_unlock' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$session',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'msession_unlock',
  ),
  'session_abort' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'session_abort',
  ),
  'session_cache_expire' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$new_cache_expire',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'session_cache_expire',
  ),
  'session_cache_limiter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cache_limiter',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'session_cache_limiter',
  ),
  'session_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_decode',
  ),
  'session_destroy' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'session_destroy',
  ),
  'session_encode' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'session_encode',
  ),
  'session_get_cookie_params' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'session_get_cookie_params',
  ),
  'session_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$id',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'session_id',
  ),
  'session_is_registered' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_is_registered',
  ),
  'session_module_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$module',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'session_module_name',
  ),
  'session_name' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'session_name',
  ),
  'session_regenerate_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$delete_old_session',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_regenerate_id',
  ),
  'session_register_shutdown' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'session_register_shutdown',
  ),
  'session_register' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_register',
  ),
  'session_reset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'session_reset',
  ),
  'session_save_path' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'session_save_path',
  ),
  'session_set_cookie_params' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$lifetime',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$domain',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$secure',
        'initializer' => '= false',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$httponly',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'session_set_cookie_params',
  ),
  'session_set_save_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SessionHandlerInterface',
        'name' => '$sessionhandler',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$register_shutdown',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_set_save_handler',
  ),
  'session_start' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'session_start',
  ),
  'session_status' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'session_status',
  ),
  'session_unregister' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_unregister',
  ),
  'session_unset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'session_unset',
  ),
  'session_write_close' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'session_write_close',
  ),
  'create_sid' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'create_sid',
  ),
  'gc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$maxlifetime',
        'required' => true,
      ),
    ),
    'modifier' => 'abstract',
    'type' => 'bool',
    'name' => 'gc',
  ),
  'session_pgsql_add_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$error_level',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$error_message',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_pgsql_add_error',
  ),
  'session_pgsql_get_error' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$with_error_message',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'session_pgsql_get_error',
  ),
  'session_pgsql_get_field' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'session_pgsql_get_field',
  ),
  'session_pgsql_reset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'session_pgsql_reset',
  ),
  'session_pgsql_set_field' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'session_pgsql_set_field',
  ),
  'session_pgsql_status' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'session_pgsql_status',
  ),
  'bbcode_add_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bbcode_container',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$tag_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$tag_rules',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bbcode_add_element',
  ),
  'bbcode_add_smiley' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bbcode_container',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$smiley',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$replace_by',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bbcode_add_smiley',
  ),
  'bbcode_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$bbcode_initial_tags',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'bbcode_create',
  ),
  'bbcode_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bbcode_container',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bbcode_destroy',
  ),
  'bbcode_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bbcode_container',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$to_parse',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'bbcode_parse',
  ),
  'bbcode_set_arg_parser' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bbcode_container',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'resource',
        'name' => '$bbcode_arg_parser',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'bbcode_set_arg_parser',
  ),
  'bbcode_set_flags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$bbcode_container',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= BBCODE_SET_FLAGS_SET',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'bbcode_set_flags',
  ),
  'preg_filter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$replacement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$subject',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= -1',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '&$count',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'preg_filter',
  ),
  'preg_grep' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$input',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'preg_grep',
  ),
  'preg_last_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'preg_last_error',
  ),
  'preg_match_all' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$matches',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= PREG_PATTERN_ORDER',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'preg_match_all',
  ),
  'preg_match' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$matches',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'preg_match',
  ),
  'preg_quote' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'preg_quote',
  ),
  'preg_replace_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$subject',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= -1',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '&$count',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'preg_replace_callback',
  ),
  'preg_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$replacement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$subject',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= -1',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '&$count',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'preg_replace',
  ),
  'preg_split' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= -1',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'preg_split',
  ),
  'ereg_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$replacement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ereg_replace',
  ),
  'ereg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$regs',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'ereg',
  ),
  'eregi_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$replacement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'eregi_replace',
  ),
  'eregi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$regs',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'eregi',
  ),
  'split' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'split',
  ),
  'spliti' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$pattern',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'initializer' => '= -1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'spliti',
  ),
  'sql_regcase' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'sql_regcase',
  ),
  'ssdeep_fuzzy_compare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$signature1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$signature2',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ssdeep_fuzzy_compare',
  ),
  'ssdeep_fuzzy_hash_filename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$file_name',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ssdeep_fuzzy_hash_filename',
  ),
  'ssdeep_fuzzy_hash' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$to_hash',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ssdeep_fuzzy_hash',
  ),
  'addcslashes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$charlist',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'addcslashes',
  ),
  'addslashes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'addslashes',
  ),
  'bin2hex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'bin2hex',
  ),
  'chr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$ascii',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'chr',
  ),
  'chunk_split' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$body',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$chunklen',
        'initializer' => '= 76',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$end',
        'initializer' => '= "\\r\\n"',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'chunk_split',
  ),
  'convert_cyr_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$from',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$to',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'convert_cyr_string',
  ),
  'convert_uudecode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'convert_uudecode',
  ),
  'convert_uuencode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'convert_uuencode',
  ),
  'count_chars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'count_chars',
  ),
  'crc32' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'crc32',
  ),
  'crypt' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$salt',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'crypt',
  ),
  'explode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$limit',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'explode',
  ),
  'fprintf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'fprintf',
  ),
  'get_html_translation_table' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$table',
        'initializer' => '= HTML_SPECIALCHARS',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= ENT_COMPAT | ENT_HTML401',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= "UTF-8"',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'get_html_translation_table',
  ),
  'hebrev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hebrew_text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max_chars_per_line',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'hebrev',
  ),
  'hebrevc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$hebrew_text',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$max_chars_per_line',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'hebrevc',
  ),
  'hex2bin' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'hex2bin',
  ),
  'html_entity_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= ENT_COMPAT | ENT_HTML401',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= ini_get("default_charset")',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'html_entity_decode',
  ),
  'htmlentities' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= ENT_COMPAT | ENT_HTML401',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= ini_get("default_charset")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$double_encode',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'htmlentities',
  ),
  'htmlspecialchars_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= ENT_COMPAT | ENT_HTML401',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'htmlspecialchars_decode',
  ),
  'htmlspecialchars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= ENT_COMPAT | ENT_HTML401',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= ini_get("default_charset")',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$double_encode',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'htmlspecialchars',
  ),
  'implode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$pieces',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'implode',
  ),
  'lcfirst' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'lcfirst',
  ),
  'levenshtein' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$cost_ins',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$cost_rep',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$cost_del',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'levenshtein',
  ),
  'localeconv' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'localeconv',
  ),
  'ltrim' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$character_mask',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'ltrim',
  ),
  'md5_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'md5_file',
  ),
  'md5' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'md5',
  ),
  'metaphone' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$phonemes',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'metaphone',
  ),
  'money_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'float',
        'name' => '$number',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'money_format',
  ),
  'nl_langinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$item',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'nl_langinfo',
  ),
  'nl2br' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$is_xhtml',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'nl2br',
  ),
  'number_format' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'float',
        'name' => '$number',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$decimals',
        'initializer' => '= 0',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$dec_point',
        'initializer' => '= "."',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$thousands_sep',
        'initializer' => '= ","',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'number_format',
  ),
  'ord' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'ord',
  ),
  'parse_str' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '&$arr',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'parse_str',
  ),
  'print' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'print',
  ),
  'printf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'printf',
  ),
  'quoted_printable_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'quoted_printable_decode',
  ),
  'quoted_printable_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'quoted_printable_encode',
  ),
  'quotemeta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'quotemeta',
  ),
  'rtrim' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$character_mask',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'rtrim',
  ),
  'setlocale' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$category',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$locale',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'setlocale',
  ),
  'sha1_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'sha1_file',
  ),
  'sha1' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$raw_output',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'sha1',
  ),
  'similar_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$first',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$second',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'float',
        'name' => '&$percent',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'similar_text',
  ),
  'soundex' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'soundex',
  ),
  'sprintf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'sprintf',
  ),
  'sscanf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '&$...',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'sscanf',
  ),
  'str_getcsv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$delimiter',
        'initializer' => '= ","',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$enclosure',
        'initializer' => '= \'"\'',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$escape',
        'initializer' => '= "\\\\"',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'str_getcsv',
  ),
  'str_ireplace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$search',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$replace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$subject',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '&$count',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'str_ireplace',
  ),
  'str_pad' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$pad_length',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$pad_string',
        'initializer' => '= " "',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$pad_type',
        'initializer' => '= STR_PAD_RIGHT',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'str_pad',
  ),
  'str_repeat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$multiplier',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'str_repeat',
  ),
  'str_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$search',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$replace',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$subject',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '&$count',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'str_replace',
  ),
  'str_rot13' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'str_rot13',
  ),
  'str_shuffle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'str_shuffle',
  ),
  'str_split' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$split_length',
        'initializer' => '= 1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'str_split',
  ),
  'str_word_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$format',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$charlist',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'str_word_count',
  ),
  'strcasecmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strcasecmp',
  ),
  'strcmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strcmp',
  ),
  'strcoll' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strcoll',
  ),
  'strcspn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'strcspn',
  ),
  'strip_tags' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$allowable_tags',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'strip_tags',
  ),
  'stripcslashes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'stripcslashes',
  ),
  'stripos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'stripos',
  ),
  'stripslashes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'stripslashes',
  ),
  'stristr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$before_needle',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'stristr',
  ),
  'strlen' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strlen',
  ),
  'strnatcasecmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strnatcasecmp',
  ),
  'strnatcmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strnatcmp',
  ),
  'strncasecmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strncasecmp',
  ),
  'strncmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$len',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'strncmp',
  ),
  'strpbrk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$char_list',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strpbrk',
  ),
  'strpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'strpos',
  ),
  'strrchr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$needle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strrchr',
  ),
  'strrev' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strrev',
  ),
  'strripos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'strripos',
  ),
  'strrpos' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'strrpos',
  ),
  'strspn' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$subject',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$mask',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$start',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'strspn',
  ),
  'strstr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$before_needle',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'strstr',
  ),
  'strtok' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$token',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strtok',
  ),
  'strtolower' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strtolower',
  ),
  'strtoupper' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strtoupper',
  ),
  'strtr' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$replace_pairs',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strtr',
  ),
  'substr_compare' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$main_str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$case_insensitivity',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'substr_compare',
  ),
  'substr_count' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$haystack',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$needle',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'substr_count',
  ),
  'substr_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$string',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$replacement',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$start',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$length',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'substr_replace',
  ),
  'ucfirst' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ucfirst',
  ),
  'ucwords' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'ucwords',
  ),
  'vfprintf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'vfprintf',
  ),
  'vprintf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'vprintf',
  ),
  'vsprintf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$format',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'vsprintf',
  ),
  'wordwrap' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$str',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$width',
        'initializer' => '= 75',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$break',
        'initializer' => '= "\\n"',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$cut',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'wordwrap',
  ),
  'array_change_key_case' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$case',
        'initializer' => '= CASE_LOWER',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_change_key_case',
  ),
  'array_chunk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$preserve_keys',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_chunk',
  ),
  'array_column' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$column_key',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$index_key',
        'initializer' => '= null',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_column',
  ),
  'array_combine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$values',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'array_combine',
  ),
  'array_count_values' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'array_count_values',
  ),
  'array_diff_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_diff_assoc',
  ),
  'array_diff_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_diff_key',
  ),
  'array_diff_uassoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$key_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_diff_uassoc',
  ),
  'array_diff_ukey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$key_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_diff_ukey',
  ),
  'array_diff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_diff',
  ),
  'array_fill_keys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$keys',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'array_fill_keys',
  ),
  'array_fill' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$start_index',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'array_fill',
  ),
  'array_filter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$flag',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_filter',
  ),
  'array_flip' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'array_flip',
  ),
  'array_intersect_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_intersect_assoc',
  ),
  'array_intersect_key' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_intersect_key',
  ),
  'array_intersect_uassoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$key_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_intersect_uassoc',
  ),
  'array_intersect_ukey' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$key_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_intersect_ukey',
  ),
  'array_intersect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_intersect',
  ),
  'array_key_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$key',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'array_key_exists',
  ),
  'array_keys' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$search_value',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$strict',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_keys',
  ),
  'array_map' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_map',
  ),
  'array_merge_recursive' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_merge_recursive',
  ),
  'array_merge' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_merge',
  ),
  'array_multisort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$array1_sort_order',
        'initializer' => '= SORT_ASC',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$array1_sort_flags',
        'initializer' => '= SORT_REGULAR',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'array_multisort',
  ),
  'array_pad' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'array_pad',
  ),
  'array_pop' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'array_pop',
  ),
  'array_product' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'array_product',
  ),
  'array_push' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'array_push',
  ),
  'array_rand' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$num',
        'initializer' => '= 1',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'array_rand',
  ),
  'array_reduce' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$initial',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'array_reduce',
  ),
  'array_replace_recursive' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_replace_recursive',
  ),
  'array_replace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_replace',
  ),
  'array_reverse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$preserve_keys',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_reverse',
  ),
  'array_search' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$needle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$haystack',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$strict',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'array_search',
  ),
  'array_shift' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'array_shift',
  ),
  'array_slice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$preserve_keys',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_slice',
  ),
  'array_splice' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$input',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$length',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$replacement',
        'initializer' => '= array()',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_splice',
  ),
  'array_sum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'type' => 'number',
    'name' => 'array_sum',
  ),
  'array_udiff_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_udiff_assoc',
  ),
  'array_udiff_uassoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$key_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_udiff_uassoc',
  ),
  'array_udiff' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_udiff',
  ),
  'array_uintersect_assoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_uintersect_assoc',
  ),
  'array_uintersect_uassoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'callable',
        'name' => '$key_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_uintersect_uassoc',
  ),
  'array_uintersect' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$array2',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$...',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_uintersect',
  ),
  'array_unique' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sort_flags',
        'initializer' => '= SORT_STRING',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array_unique',
  ),
  'array_unshift' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value1',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'array_unshift',
  ),
  'array_values' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$array',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'array_values',
  ),
  'array_walk_recursive' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$userdata',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'array_walk_recursive',
  ),
  'array_walk' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$userdata',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'array_walk',
  ),
  'array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'array',
  ),
  'arsort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sort_flags',
        'initializer' => '= SORT_REGULAR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'arsort',
  ),
  'compact' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$varname1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'compact',
  ),
  'each' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'each',
  ),
  'end' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'end',
  ),
  'in_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$needle',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$haystack',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$strict',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'in_array',
  ),
  'krsort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sort_flags',
        'initializer' => '= SORT_REGULAR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'krsort',
  ),
  'list' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var1',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'list',
  ),
  'range' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$start',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$end',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'number',
        'name' => '$step',
        'initializer' => '= 1',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'range',
  ),
  'rsort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$sort_flags',
        'initializer' => '= SORT_REGULAR',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'rsort',
  ),
  'shuffle' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'shuffle',
  ),
  'usort' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '&$array',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$value_compare_func',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'usort',
  ),
  '__autoload' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => '__autoload',
  ),
  'call_user_method_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'object',
        'name' => '&$obj',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$params',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'call_user_method_array',
  ),
  'call_user_method' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'object',
        'name' => '&$obj',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$parameter',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'call_user_method',
  ),
  'class_alias' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$original',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$alias',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$autoload',
        'initializer' => '= TRUE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'class_alias',
  ),
  'class_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$autoload',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'class_exists',
  ),
  'get_called_class' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'get_called_class',
  ),
  'get_class_methods' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$class_name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'get_class_methods',
  ),
  'get_class_vars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'get_class_vars',
  ),
  'get_class' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'get_class',
  ),
  'get_declared_classes' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'get_declared_classes',
  ),
  'get_declared_interfaces' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'get_declared_interfaces',
  ),
  'get_declared_traits' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'get_declared_traits',
  ),
  'get_object_vars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'get_object_vars',
  ),
  'get_parent_class' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$object',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'get_parent_class',
  ),
  'interface_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$interface_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$autoload',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'interface_exists',
  ),
  'is_a' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$allow_string',
        'initializer' => '= FALSE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_a',
  ),
  'is_subclass_of' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$allow_string',
        'initializer' => '= TRUE',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_subclass_of',
  ),
  'method_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$method_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'method_exists',
  ),
  'property_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$class',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$property',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'property_exists',
  ),
  'trait_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$traitname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$autoload',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'trait_exists',
  ),
  'classkit_import' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'classkit_import',
  ),
  'classkit_method_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$args',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= CLASSKIT_ACC_PUBLIC',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'classkit_method_add',
  ),
  'classkit_method_copy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$dClass',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dMethod',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$sClass',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$sMethod',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'classkit_method_copy',
  ),
  'classkit_method_redefine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$args',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'initializer' => '= CLASSKIT_ACC_PUBLIC',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'classkit_method_redefine',
  ),
  'classkit_method_remove' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'classkit_method_remove',
  ),
  'classkit_method_rename' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$classname',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$methodname',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$newname',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'classkit_method_rename',
  ),
  'ctype_alnum' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_alnum',
  ),
  'ctype_alpha' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_alpha',
  ),
  'ctype_cntrl' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_cntrl',
  ),
  'ctype_digit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_digit',
  ),
  'ctype_graph' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_graph',
  ),
  'ctype_lower' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_lower',
  ),
  'ctype_print' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_print',
  ),
  'ctype_punct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_punct',
  ),
  'ctype_space' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_space',
  ),
  'ctype_upper' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_upper',
  ),
  'ctype_xdigit' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$text',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'ctype_xdigit',
  ),
  'filter_has_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$variable_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'filter_has_var',
  ),
  'filter_id' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filtername',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'filter_id',
  ),
  'filter_input_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$definition',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$add_empty',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'filter_input_array',
  ),
  'filter_input' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$variable_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'initializer' => '= FILTER_DEFAULT',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'filter_input',
  ),
  'filter_list' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'filter_list',
  ),
  'filter_var_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$definition',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$add_empty',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'filter_var_array',
  ),
  'filter_var' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$variable',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'initializer' => '= FILTER_DEFAULT',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'filter_var',
  ),
  'call_user_func_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$param_arr',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'call_user_func_array',
  ),
  'call_user_func' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$parameter',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'call_user_func',
  ),
  'create_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$args',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'create_function',
  ),
  'forward_static_call_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$parameters',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'forward_static_call_array',
  ),
  'forward_static_call' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$parameter',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'forward_static_call',
  ),
  'func_get_arg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$arg_num',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'func_get_arg',
  ),
  'func_get_args' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'func_get_args',
  ),
  'func_num_args' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'func_num_args',
  ),
  'function_exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'function_exists',
  ),
  'get_defined_functions' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'get_defined_functions',
  ),
  'register_shutdown_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$parameter',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'register_shutdown_function',
  ),
  'register_tick_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$function',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$arg',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'register_tick_function',
  ),
  'unregister_tick_function' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'unregister_tick_function',
  ),
  'exists' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$key',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'exists',
  ),
  'loadFromFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'QuickHashIntStringHash',
    'name' => 'loadFromFile',
  ),
  'loadFromString' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$contents',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'initializer' => '= 0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'QuickHashIntStringHash',
    'name' => 'loadFromString',
  ),
  'saveToString' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'saveToString',
  ),
  'getModifierNames' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$modifiers',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getModifierNames',
  ),
  'getConstant' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getConstant',
  ),
  'getConstants' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getConstants',
  ),
  'getConstructor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReflectionMethod',
    'name' => 'getConstructor',
  ),
  'getDefaultProperties' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getDefaultProperties',
  ),
  'getDocComment' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDocComment',
  ),
  'getEndLine' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getEndLine',
  ),
  'getExtensionName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getExtensionName',
  ),
  'getFileName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getFileName',
  ),
  'getInterfaceNames' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getInterfaceNames',
  ),
  'getInterfaces' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getInterfaces',
  ),
  'getMethods' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getMethods',
  ),
  'getModifiers' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getModifiers',
  ),
  'getNamespaceName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getNamespaceName',
  ),
  'getParentClass' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'object',
    'name' => 'getParentClass',
  ),
  'getProperties' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$filter',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getProperties',
  ),
  'getProperty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'ReflectionProperty',
    'name' => 'getProperty',
  ),
  'getShortName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getShortName',
  ),
  'getStartLine' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getStartLine',
  ),
  'getStaticProperties' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getStaticProperties',
  ),
  'getStaticPropertyValue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '&$def_value',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getStaticPropertyValue',
  ),
  'getTraitAliases' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getTraitAliases',
  ),
  'getTraitNames' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getTraitNames',
  ),
  'getTraits' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getTraits',
  ),
  'hasConstant' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasConstant',
  ),
  'hasMethod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasMethod',
  ),
  'hasProperty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasProperty',
  ),
  'implementsInterface' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$interface',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'implementsInterface',
  ),
  'inNamespace' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'inNamespace',
  ),
  'isAbstract' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isAbstract',
  ),
  'isCloneable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isCloneable',
  ),
  'isFinal' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isFinal',
  ),
  'isInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isInstance',
  ),
  'isInstantiable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isInstantiable',
  ),
  'isInterface' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isInterface',
  ),
  'isInternal' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isInternal',
  ),
  'isIterateable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isIterateable',
  ),
  'isSubclassOf' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isSubclassOf',
  ),
  'isTrait' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isTrait',
  ),
  'isUserDefined' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isUserDefined',
  ),
  'newInstance' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'object',
    'name' => 'newInstance',
  ),
  'newInstanceArgs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'object',
    'name' => 'newInstanceArgs',
  ),
  'newInstanceWithoutConstructor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'object',
    'name' => 'newInstanceWithoutConstructor',
  ),
  'setStaticPropertyValue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setStaticPropertyValue',
  ),
  'getAuthor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getAuthor',
  ),
  'getURL' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getURL',
  ),
  'getClasses' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getClasses',
  ),
  'getClassNames' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getClassNames',
  ),
  'getDependencies' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getDependencies',
  ),
  'getFunctions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getFunctions',
  ),
  'getINIEntries' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getINIEntries',
  ),
  'isTemporary' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isTemporary',
  ),
  'getClosure' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'Closure',
    'name' => 'getClosure',
  ),
  'invokeArgs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$args',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'invokeArgs',
  ),
  'isDisabled' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDisabled',
  ),
  'getClosureScopeClass' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReflectionClass',
    'name' => 'getClosureScopeClass',
  ),
  'getClosureThis' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'object',
    'name' => 'getClosureThis',
  ),
  'getNumberOfParameters' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getNumberOfParameters',
  ),
  'getNumberOfRequiredParameters' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getNumberOfRequiredParameters',
  ),
  'getParameters' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getParameters',
  ),
  'getStaticVariables' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getStaticVariables',
  ),
  'isClosure' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isClosure',
  ),
  'isDeprecated' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDeprecated',
  ),
  'isGenerator' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isGenerator',
  ),
  'isVariadic' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isVariadic',
  ),
  'returnsReference' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'returnsReference',
  ),
  'getDeclaringClass' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReflectionClass',
    'name' => 'getDeclaringClass',
  ),
  'getPrototype' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReflectionMethod',
    'name' => 'getPrototype',
  ),
  'isConstructor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isConstructor',
  ),
  'isDestructor' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDestructor',
  ),
  'isPrivate' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isPrivate',
  ),
  'isProtected' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isProtected',
  ),
  'isPublic' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isPublic',
  ),
  'isStatic' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isStatic',
  ),
  'setAccessible' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$accessible',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setAccessible',
  ),
  'allowsNull' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'allowsNull',
  ),
  'canBePassedByValue' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'canBePassedByValue',
  ),
  'getClass' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReflectionClass',
    'name' => 'getClass',
  ),
  'getDeclaringFunction' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'ReflectionFunctionAbstract',
    'name' => 'getDeclaringFunction',
  ),
  'getDefaultValue' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'getDefaultValue',
  ),
  'getDefaultValueConstantName' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getDefaultValueConstantName',
  ),
  'isArray' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isArray',
  ),
  'isCallable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isCallable',
  ),
  'isDefaultValueAvailable' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDefaultValueAvailable',
  ),
  'isDefaultValueConstant' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDefaultValueConstant',
  ),
  'isOptional' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isOptional',
  ),
  'isPassedByReference' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isPassedByReference',
  ),
  'getValue' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'integer',
    'name' => 'getValue',
  ),
  'isDefault' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDefault',
  ),
  'setValue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setValue',
  ),
  'boolval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'boolean',
    'name' => 'boolval',
  ),
  'debug_zval_dump' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$variable',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'debug_zval_dump',
  ),
  'empty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'empty',
  ),
  'floatval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'float',
    'name' => 'floatval',
  ),
  'get_defined_vars' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'get_defined_vars',
  ),
  'get_resource_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$handle',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'get_resource_type',
  ),
  'gettype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'gettype',
  ),
  'import_request_variables' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$types',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'import_request_variables',
  ),
  'intval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$base',
        'initializer' => '= 10',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'intval',
  ),
  'is_array' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_array',
  ),
  'is_bool' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_bool',
  ),
  'is_callable' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$syntax_only',
        'initializer' => '= false',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '&$callable_name',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_callable',
  ),
  'is_float' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_float',
  ),
  'is_int' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_int',
  ),
  'is_null' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_null',
  ),
  'is_numeric' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_numeric',
  ),
  'is_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_object',
  ),
  'is_resource' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_resource',
  ),
  'is_scalar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_scalar',
  ),
  'is_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_string',
  ),
  'isset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'isset',
  ),
  'print_r' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$expression',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$return',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'print_r',
  ),
  'settype' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '&$var',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'settype',
  ),
  'strval' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'strval',
  ),
  'unset' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'unset',
  ),
  'var_dump' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$expression',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'var_dump',
  ),
  'var_export' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$expression',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$return',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'var_export',
  ),
  'oauth_get_sbs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$http_method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$request_parameters',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'oauth_get_sbs',
  ),
  'oauth_urlencode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'oauth_urlencode',
  ),
  'disableDebug' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'disableDebug',
  ),
  'disableRedirects' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'disableRedirects',
  ),
  'disableSSLChecks' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'disableSSLChecks',
  ),
  'enableDebug' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'enableDebug',
  ),
  'enableRedirects' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'enableRedirects',
  ),
  'enableSSLChecks' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'enableSSLChecks',
  ),
  'generateSignature' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$http_method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$extra_parameters',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'generateSignature',
  ),
  'getAccessToken' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$access_token_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$auth_session_handle',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$verifier_token',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$http_method',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getAccessToken',
  ),
  'getCAPath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getCAPath',
  ),
  'getLastResponse' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getLastResponse',
  ),
  'getLastResponseHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getLastResponseHeaders',
  ),
  'getLastResponseInfo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getLastResponseInfo',
  ),
  'getRequestHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$http_method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$url',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$extra_parameters',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getRequestHeader',
  ),
  'getRequestToken' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$request_token_url',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$callback_url',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$http_method',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getRequestToken',
  ),
  'setAuthType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$auth_type',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setAuthType',
  ),
  'setCAPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ca_path',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ca_info',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setCAPath',
  ),
  'setNonce' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$nonce',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setNonce',
  ),
  'setRequestEngine' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$reqengine',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setRequestEngine',
  ),
  'setRSACertificate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$cert',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'setRSACertificate',
  ),
  'setSSLChecks' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$sslcheck',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSSLChecks',
  ),
  'setToken' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$token',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$token_secret',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setToken',
  ),
  'setVersion' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setVersion',
  ),
  'addRequiredParameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$req_params',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'addRequiredParameter',
  ),
  'callconsumerHandler' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'callconsumerHandler',
  ),
  'callTimestampNonceHandler' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'callTimestampNonceHandler',
  ),
  'calltokenHandler' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'calltokenHandler',
  ),
  'checkOAuthRequest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'checkOAuthRequest',
  ),
  'consumerHandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback_function',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'consumerHandler',
  ),
  'generateToken' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$size',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$strong',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'generateToken',
  ),
  'is2LeggedEndpoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$params_array',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'is2LeggedEndpoint',
  ),
  'isRequestTokenEndpoint' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$will_issue_request_token',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'isRequestTokenEndpoint',
  ),
  'removeRequiredParameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$req_params',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'removeRequiredParameter',
  ),
  'reportProblem' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$oauthexception',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$send_headers',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'final',
    'type' => 'string',
    'name' => 'reportProblem',
  ),
  'setRequestTokenPath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'modifier' => 'final',
    'type' => 'bool',
    'name' => 'setRequestTokenPath',
  ),
  'timestampNonceHandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback_function',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'timestampNonceHandler',
  ),
  'tokenHandler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$callback_function',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'tokenHandler',
  ),
  'is_soap_fault' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'is_soap_fault',
  ),
  'use_soap_error_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$handler',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'use_soap_error_handler',
  ),
  'SoapClient' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$wsdl',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'name' => 'SoapClient',
    'type' => 'mixed',
  ),
  '__doRequest' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$request',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$location',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$action',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$version',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'int',
        'name' => '$one_way',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => '__doRequest',
  ),
  '__getFunctions' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => '__getFunctions',
  ),
  '__getLastRequest' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => '__getLastRequest',
  ),
  '__getLastRequestHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => '__getLastRequestHeaders',
  ),
  '__getLastResponse' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => '__getLastResponse',
  ),
  '__getLastResponseHeaders' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => '__getLastResponseHeaders',
  ),
  '__getTypes' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => '__getTypes',
  ),
  '__setCookie' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => '__setCookie',
  ),
  '__setLocation' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$new_location',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => '__setLocation',
  ),
  '__setSoapHeaders' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$soapheaders',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => '__setSoapHeaders',
  ),
  '__soapCall' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$function_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$arguments',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'mixed',
        'name' => '$input_headers',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '&$output_headers',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => '__soapCall',
  ),
  'addSoapHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SoapHeader',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addSoapHeader',
  ),
  'fault' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$code',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$string',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$actor',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$details',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'fault',
  ),
  'setClass' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$args',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setClass',
  ),
  'setObject' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$object',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setObject',
  ),
  'setPersistence' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$mode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setPersistence',
  ),
  'SoapServer' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$wsdl',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'name' => 'SoapServer',
    'type' => 'mixed',
  ),
  'SoapFault' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$faultcode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$faultstring',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$faultactor',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$detail',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$faultname',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$headerfault',
        'required' => false,
      ),
    ),
    'name' => 'SoapFault',
    'type' => 'string',
  ),
  'SoapHeader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespace',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$mustunderstand',
        'initializer' => '= false',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$actor',
        'required' => false,
      ),
    ),
    'name' => 'SoapHeader',
    'type' => 'string',
  ),
  'SoapParam' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'name' => 'SoapParam',
    'type' => 'mixed',
  ),
  'SoapVar' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$type_name',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$type_namespace',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$node_name',
        'required' => false,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$node_namespace',
        'required' => false,
      ),
    ),
    'name' => 'SoapVar',
    'type' => 'mixed',
  ),
  'xmlrpc_decode_request' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$xml',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '&$method',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'xmlrpc_decode_request',
  ),
  'xmlrpc_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$xml',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= "iso-8859-1"',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'xmlrpc_decode',
  ),
  'xmlrpc_encode_request' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$method',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$params',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$output_options',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'xmlrpc_encode_request',
  ),
  'xmlrpc_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'xmlrpc_encode',
  ),
  'xmlrpc_get_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'xmlrpc_get_type',
  ),
  'xmlrpc_is_fault' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$arg',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlrpc_is_fault',
  ),
  'xmlrpc_parse_method_descriptions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$xml',
        'required' => true,
      ),
    ),
    'type' => 'array',
    'name' => 'xmlrpc_parse_method_descriptions',
  ),
  'xmlrpc_server_add_introspection_data' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'array',
        'name' => '$desc',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xmlrpc_server_add_introspection_data',
  ),
  'xmlrpc_server_call_method' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$xml',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$user_data',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$output_options',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'xmlrpc_server_call_method',
  ),
  'xmlrpc_server_create' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'xmlrpc_server_create',
  ),
  'xmlrpc_server_destroy' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$server',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xmlrpc_server_destroy',
  ),
  'xmlrpc_server_register_introspection_callback' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlrpc_server_register_introspection_callback',
  ),
  'xmlrpc_server_register_method' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$server',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$method_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$function',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlrpc_server_register_method',
  ),
  'xmlrpc_set_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '&$value',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlrpc_set_type',
  ),
  'com_create_guid' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'string',
    'name' => 'com_create_guid',
  ),
  'com_event_sink' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'variant',
        'name' => '$comobject',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'object',
        'name' => '$sinkobject',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$sinkinterface',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'com_event_sink',
  ),
  'com_get_active_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$progid',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$code_page',
        'required' => false,
      ),
    ),
    'type' => 'variant',
    'name' => 'com_get_active_object',
  ),
  'com_load_typelib' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$typelib_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$case_insensitive',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'com_load_typelib',
  ),
  'com_message_pump' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timeoutms',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'com_message_pump',
  ),
  'com_print_typeinfo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$comobject',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$dispinterface',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$wantsink',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'com_print_typeinfo',
  ),
  'variant_abs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$val',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_abs',
  ),
  'variant_add' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_add',
  ),
  'variant_and' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_and',
  ),
  'variant_cast' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'variant',
        'name' => '$variant',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'variant',
    'name' => 'variant_cast',
  ),
  'variant_cat' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_cat',
  ),
  'variant_cmp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$lcid',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'variant_cmp',
  ),
  'variant_date_from_timestamp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$timestamp',
        'required' => true,
      ),
    ),
    'type' => 'variant',
    'name' => 'variant_date_from_timestamp',
  ),
  'variant_date_to_timestamp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'variant',
        'name' => '$variant',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'variant_date_to_timestamp',
  ),
  'variant_div' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_div',
  ),
  'variant_eqv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_eqv',
  ),
  'variant_fix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$variant',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_fix',
  ),
  'variant_get_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'variant',
        'name' => '$variant',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'variant_get_type',
  ),
  'variant_idiv' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_idiv',
  ),
  'variant_imp' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_imp',
  ),
  'variant_int' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$variant',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_int',
  ),
  'variant_mod' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_mod',
  ),
  'variant_mul' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_mul',
  ),
  'variant_neg' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$variant',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_neg',
  ),
  'variant_not' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$variant',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_not',
  ),
  'variant_or' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_or',
  ),
  'variant_pow' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_pow',
  ),
  'variant_round' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$variant',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$decimals',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_round',
  ),
  'variant_set_type' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'variant',
        'name' => '$variant',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$type',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'variant_set_type',
  ),
  'variant_set' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'variant',
        'name' => '$variant',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'variant_set',
  ),
  'variant_sub' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_sub',
  ),
  'variant_xor' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$left',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$right',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'variant_xor',
  ),
  'win32_ps_list_procs' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'win32_ps_list_procs',
  ),
  'win32_ps_stat_mem' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'win32_ps_stat_mem',
  ),
  'win32_ps_stat_proc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$pid',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'array',
    'name' => 'win32_ps_stat_proc',
  ),
  'win32_continue_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servicename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$machine',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'win32_continue_service',
  ),
  'win32_create_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'array',
        'name' => '$details',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$machine',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'win32_create_service',
  ),
  'win32_delete_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servicename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$machine',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'win32_delete_service',
  ),
  'win32_get_last_control_message' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'int',
    'name' => 'win32_get_last_control_message',
  ),
  'win32_pause_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servicename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$machine',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'win32_pause_service',
  ),
  'win32_query_service_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servicename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$machine',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'win32_query_service_status',
  ),
  'win32_set_service_status' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$status',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$checkpoint',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'win32_set_service_status',
  ),
  'win32_start_service_ctrl_dispatcher' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'win32_start_service_ctrl_dispatcher',
  ),
  'win32_start_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servicename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$machine',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'win32_start_service',
  ),
  'win32_stop_service' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$servicename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$machine',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'win32_stop_service',
  ),
  'isId' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isId',
  ),
  'appendData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'appendData',
  ),
  'deleteData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'deleteData',
  ),
  'insertData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'insertData',
  ),
  'replaceData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'replaceData',
  ),
  'substringData' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$count',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'substringData',
  ),
  'createAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMAttr',
    'name' => 'createAttribute',
  ),
  'createAttributeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifiedName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMAttr',
    'name' => 'createAttributeNS',
  ),
  'createCDATASection' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMCDATASection',
    'name' => 'createCDATASection',
  ),
  'createComment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMComment',
    'name' => 'createComment',
  ),
  'createDocumentFragment' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'DOMDocumentFragment',
    'name' => 'createDocumentFragment',
  ),
  'createElement' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMElement',
    'name' => 'createElement',
  ),
  'createElementNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifiedName',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMElement',
    'name' => 'createElementNS',
  ),
  'createEntityReference' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMEntityReference',
    'name' => 'createEntityReference',
  ),
  'createProcessingInstruction' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$target',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMProcessingInstruction',
    'name' => 'createProcessingInstruction',
  ),
  'createTextNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMText',
    'name' => 'createTextNode',
  ),
  'getElementById' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$elementId',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMElement',
    'name' => 'getElementById',
  ),
  'getElementsByTagName' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNodeList',
    'name' => 'getElementsByTagName',
  ),
  'getElementsByTagNameNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNodeList',
    'name' => 'getElementsByTagNameNS',
  ),
  'importNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$importedNode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$deep',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNode',
    'name' => 'importNode',
  ),
  'loadHTML' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'loadHTML',
  ),
  'loadHTMLFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'loadHTMLFile',
  ),
  'loadXML' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'loadXML',
  ),
  'normalizeDocument' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'normalizeDocument',
  ),
  'registerNodeClass' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$baseclass',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$extendedclass',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'registerNodeClass',
  ),
  'relaxNGValidate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'relaxNGValidate',
  ),
  'relaxNGValidateSource' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'relaxNGValidateSource',
  ),
  'saveHTML' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$node',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'saveHTML',
  ),
  'saveHTMLFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'saveHTMLFile',
  ),
  'saveXML' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$node',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'saveXML',
  ),
  'schemaValidate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'schemaValidate',
  ),
  'schemaValidateSource' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'schemaValidateSource',
  ),
  'xinclude' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'xinclude',
  ),
  'appendXML' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'appendXML',
  ),
  'getAttributeNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMAttr',
    'name' => 'getAttributeNode',
  ),
  'getAttributeNodeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMAttr',
    'name' => 'getAttributeNodeNS',
  ),
  'getAttributeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getAttributeNS',
  ),
  'hasAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasAttribute',
  ),
  'hasAttributeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasAttributeNS',
  ),
  'removeAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'removeAttribute',
  ),
  'removeAttributeNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMAttr',
        'name' => '$oldnode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'removeAttributeNode',
  ),
  'removeAttributeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'removeAttributeNS',
  ),
  'setAttributeNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMAttr',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMAttr',
    'name' => 'setAttributeNode',
  ),
  'setAttributeNodeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMAttr',
        'name' => '$attr',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMAttr',
    'name' => 'setAttributeNodeNS',
  ),
  'setAttributeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifiedName',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setAttributeNS',
  ),
  'setIdAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$isId',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setIdAttribute',
  ),
  'setIdAttributeNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMAttr',
        'name' => '$attr',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$isId',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setIdAttributeNode',
  ),
  'setIdAttributeNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$isId',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'setIdAttributeNS',
  ),
  'createDocument' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifiedName',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'DOMDocumentType',
        'name' => '$doctype',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMDocument',
    'name' => 'createDocument',
  ),
  'createDocumentType' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$qualifiedName',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$publicId',
        'initializer' => '= NULL',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$systemId',
        'initializer' => '= NULL',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMDocumentType',
    'name' => 'createDocumentType',
  ),
  'hasFeature' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$feature',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasFeature',
  ),
  'getNamedItem' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'DOMNode',
    'name' => 'getNamedItem',
  ),
  'getNamedItemNS' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'type' => 'DOMNode',
    'name' => 'getNamedItemNS',
  ),
  'item' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'type' => 'DOMNode',
    'name' => 'item',
  ),
  'appendChild' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$newnode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNode',
    'name' => 'appendChild',
  ),
  'C14N' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$exclusive',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$with_comments',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$xpath',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$ns_prefixes',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'C14N',
  ),
  'C14NFile' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$exclusive',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$with_comments',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '$xpath',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'array',
        'name' => '$ns_prefixes',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'C14NFile',
  ),
  'cloneNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$deep',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNode',
    'name' => 'cloneNode',
  ),
  'getLineNo' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'int',
    'name' => 'getLineNo',
  ),
  'getNodePath' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getNodePath',
  ),
  'hasAttributes' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasAttributes',
  ),
  'hasChildNodes' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'hasChildNodes',
  ),
  'insertBefore' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$newnode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DOMNode',
        'name' => '$refnode',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNode',
    'name' => 'insertBefore',
  ),
  'isDefaultNamespace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isDefaultNamespace',
  ),
  'isSameNode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$node',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isSameNode',
  ),
  'isSupported' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$feature',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$version',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isSupported',
  ),
  'lookupNamespaceURI' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'lookupNamespaceURI',
  ),
  'lookupPrefix' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'lookupPrefix',
  ),
  'removeChild' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$oldnode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNode',
    'name' => 'removeChild',
  ),
  'replaceChild' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$newnode',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DOMNode',
        'name' => '$oldnode',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMNode',
    'name' => 'replaceChild',
  ),
  'isWhitespaceInElementContent' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'isWhitespaceInElementContent',
  ),
  'splitText' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'DOMText',
    'name' => 'splitText',
  ),
  'evaluate' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$expression',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'DOMNode',
        'name' => '$contextnode',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$registerNodeNS',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'evaluate',
  ),
  'registerNamespace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'registerNamespace',
  ),
  'registerPhpFunctions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$restrict',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'registerPhpFunctions',
  ),
  'dom_import_simplexml' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'SimpleXMLElement',
        'name' => '$node',
        'required' => true,
      ),
    ),
    'type' => 'DOMElement',
    'name' => 'dom_import_simplexml',
  ),
  'libxml_clear_errors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'libxml_clear_errors',
  ),
  'libxml_disable_entity_loader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$disable',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'libxml_disable_entity_loader',
  ),
  'libxml_get_errors' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'array',
    'name' => 'libxml_get_errors',
  ),
  'libxml_get_last_error' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'LibXMLError',
    'name' => 'libxml_get_last_error',
  ),
  'libxml_set_external_entity_loader' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'callable',
        'name' => '$resolver_function',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'libxml_set_external_entity_loader',
  ),
  'libxml_set_streams_context' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$streams_context',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'libxml_set_streams_context',
  ),
  'libxml_use_internal_errors' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$use_errors',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'libxml_use_internal_errors',
  ),
  'addAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$namespace',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'void',
    'name' => 'addAttribute',
  ),
  'addChild' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$namespace',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SimpleXMLElement',
    'name' => 'addChild',
  ),
  'asXML' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'mixed',
    'name' => 'asXML',
  ),
  'attributes' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ns',
        'initializer' => '= NULL',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$is_prefix',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SimpleXMLElement',
    'name' => 'attributes',
  ),
  'children' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$ns',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$is_prefix',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'SimpleXMLElement',
    'name' => 'children',
  ),
  'getDocNamespaces' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$recursive',
        'initializer' => '= false',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$from_root',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getDocNamespaces',
  ),
  'getNamespaces' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'bool',
        'name' => '$recursive',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'getNamespaces',
  ),
  'registerXPathNamespace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$ns',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'registerXPathNamespace',
  ),
  'xpath' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$path',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'array',
    'name' => 'xpath',
  ),
  'simplexml_import_dom' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$node',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "SimpleXMLElement"',
        'required' => false,
      ),
    ),
    'type' => 'SimpleXMLElement',
    'name' => 'simplexml_import_dom',
  ),
  'simplexml_load_file' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "SimpleXMLElement"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$ns',
        'initializer' => '= ""',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$is_prefix',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'SimpleXMLElement',
    'name' => 'simplexml_load_file',
  ),
  'simplexml_load_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$class_name',
        'initializer' => '= "SimpleXMLElement"',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$ns',
        'initializer' => '= ""',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'bool',
        'name' => '$is_prefix',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'SimpleXMLElement',
    'name' => 'simplexml_load_string',
  ),
  'wddx_add_vars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$packet_id',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$var_name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'wddx_add_vars',
  ),
  'wddx_deserialize' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$packet',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'wddx_deserialize',
  ),
  'wddx_packet_end' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$packet_id',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'wddx_packet_end',
  ),
  'wddx_packet_start' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'wddx_packet_start',
  ),
  'wddx_serialize_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$comment',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'wddx_serialize_value',
  ),
  'wddx_serialize_vars' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$var_name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'mixed',
        'name' => '$...',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'wddx_serialize_vars',
  ),
  'utf8_decode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'utf8_decode',
  ),
  'utf8_encode' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'utf8_encode',
  ),
  'xml_error_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$code',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'xml_error_string',
  ),
  'xml_get_current_byte_index' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xml_get_current_byte_index',
  ),
  'xml_get_current_column_number' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xml_get_current_column_number',
  ),
  'xml_get_current_line_number' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xml_get_current_line_number',
  ),
  'xml_get_error_code' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'xml_get_error_code',
  ),
  'xml_parse_into_struct' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '&$values',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'array',
        'name' => '&$index',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'xml_parse_into_struct',
  ),
  'xml_parse' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$data',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$is_final',
        'initializer' => '= false',
        'required' => false,
      ),
    ),
    'type' => 'int',
    'name' => 'xml_parse',
  ),
  'xml_parser_create_ns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$separator',
        'initializer' => '= ":"',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'xml_parser_create_ns',
  ),
  'xml_parser_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'xml_parser_create',
  ),
  'xml_parser_free' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_parser_free',
  ),
  'xml_parser_get_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'xml_parser_get_option',
  ),
  'xml_parser_set_option' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'int',
        'name' => '$option',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'mixed',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_parser_set_option',
  ),
  'xml_set_character_data_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_character_data_handler',
  ),
  'xml_set_default_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_default_handler',
  ),
  'xml_set_element_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$start_element_handler',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'callable',
        'name' => '$end_element_handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_element_handler',
  ),
  'start_element_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'array',
        'name' => '$attribs',
        'required' => true,
      ),
    ),
    'name' => 'start_element_handler',
    'type' => 'resource',
  ),
  'end_element_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'name' => 'end_element_handler',
    'type' => 'resource',
  ),
  'xml_set_end_namespace_decl_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_end_namespace_decl_handler',
  ),
  'xml_set_external_entity_ref_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_external_entity_ref_handler',
  ),
  'xml_set_notation_decl_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_notation_decl_handler',
  ),
  'xml_set_object' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'object',
        'name' => '&$object',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_object',
  ),
  'xml_set_processing_instruction_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_processing_instruction_handler',
  ),
  'xml_set_start_namespace_decl_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_start_namespace_decl_handler',
  ),
  'xml_set_unparsed_entity_decl_handler' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$parser',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'callable',
        'name' => '$handler',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xml_set_unparsed_entity_decl_handler',
  ),
  'getAttributeNo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getAttributeNo',
  ),
  'getAttributeNs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'getAttributeNs',
  ),
  'getParserProperty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$property',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'getParserProperty',
  ),
  'lookupNamespace' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'lookupNamespace',
  ),
  'moveToAttribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'moveToAttribute',
  ),
  'moveToAttributeNo' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$index',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'moveToAttributeNo',
  ),
  'moveToAttributeNs' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'moveToAttributeNs',
  ),
  'moveToElement' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'moveToElement',
  ),
  'moveToFirstAttribute' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'moveToFirstAttribute',
  ),
  'moveToNextAttribute' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'moveToNextAttribute',
  ),
  'readInnerXML' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'readInnerXML',
  ),
  'readOuterXML' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'readOuterXML',
  ),
  'readString' => 
  array (
    'args' => 
    array (
    ),
    'modifier' => 'public',
    'type' => 'string',
    'name' => 'readString',
  ),
  'setParserProperty' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'int',
        'name' => '$property',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setParserProperty',
  ),
  'setRelaxNGSchema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRelaxNGSchema',
  ),
  'setRelaxNGSchemaSource' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setRelaxNGSchemaSource',
  ),
  'setSchema' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'setSchema',
  ),
  'xml' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$source',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'int',
        'name' => '$options',
        'initializer' => '= 0',
        'required' => false,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'xml',
  ),
  'xmlwriter_end_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_attribute',
  ),
  'xmlwriter_end_cdata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_cdata',
  ),
  'xmlwriter_end_comment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_comment',
  ),
  'xmlwriter_end_document' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_document',
  ),
  'xmlwriter_end_dtd_attlist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_dtd_attlist',
  ),
  'xmlwriter_end_dtd_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_dtd_element',
  ),
  'xmlwriter_end_dtd_entity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_dtd_entity',
  ),
  'xmlwriter_end_dtd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_dtd',
  ),
  'xmlwriter_end_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_element',
  ),
  'xmlwriter_end_pi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_end_pi',
  ),
  'xmlwriter_flush' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$empty',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'mixed',
    'name' => 'xmlwriter_flush',
  ),
  'xmlwriter_full_end_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_full_end_element',
  ),
  'xmlwriter_open_memory' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'resource',
    'name' => 'xmlwriter_open_memory',
  ),
  'xmlwriter_open_uri' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'type' => 'resource',
    'name' => 'xmlwriter_open_uri',
  ),
  'xmlwriter_output_memory' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$flush',
        'initializer' => '= true',
        'required' => false,
      ),
    ),
    'type' => 'string',
    'name' => 'xmlwriter_output_memory',
  ),
  'xmlwriter_set_indent_string' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$indentString',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_set_indent_string',
  ),
  'xmlwriter_set_indent' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'bool',
        'name' => '$indent',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_set_indent',
  ),
  'xmlwriter_start_attribute_ns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_attribute_ns',
  ),
  'xmlwriter_start_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_attribute',
  ),
  'xmlwriter_start_cdata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_cdata',
  ),
  'xmlwriter_start_comment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_comment',
  ),
  'xmlwriter_start_document' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$version',
        'initializer' => '= 1.0',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$encoding',
        'initializer' => '= NULL',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$standalone',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_document',
  ),
  'xmlwriter_start_dtd_attlist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_dtd_attlist',
  ),
  'xmlwriter_start_dtd_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifiedName',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_dtd_element',
  ),
  'xmlwriter_start_dtd_entity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'bool',
        'name' => '$isparam',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_dtd_entity',
  ),
  'xmlwriter_start_dtd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$qualifiedName',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$publicId',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$systemId',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_dtd',
  ),
  'xmlwriter_start_element_ns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_element_ns',
  ),
  'xmlwriter_start_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_element',
  ),
  'xmlwriter_start_pi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$target',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_start_pi',
  ),
  'xmlwriter_text' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_text',
  ),
  'xmlwriter_write_attribute_ns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_attribute_ns',
  ),
  'xmlwriter_write_attribute' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_attribute',
  ),
  'xmlwriter_write_cdata' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_cdata',
  ),
  'xmlwriter_write_comment' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_comment',
  ),
  'xmlwriter_write_dtd_attlist' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_dtd_attlist',
  ),
  'xmlwriter_write_dtd_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_dtd_element',
  ),
  'xmlwriter_write_dtd_entity' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'bool',
        'name' => '$pe',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$pubid',
        'required' => true,
      ),
      5 => 
      array (
        'type' => 'string',
        'name' => '$sysid',
        'required' => true,
      ),
      6 => 
      array (
        'type' => 'string',
        'name' => '$ndataid',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_dtd_entity',
  ),
  'xmlwriter_write_dtd' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$publicId',
        'required' => false,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$systemId',
        'required' => false,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$subset',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_dtd',
  ),
  'xmlwriter_write_element_ns' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$prefix',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      3 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
      4 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_element_ns',
  ),
  'xmlwriter_write_element' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => false,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_element',
  ),
  'xmlwriter_write_pi' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$target',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_pi',
  ),
  'xmlwriter_write_raw' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$xmlwriter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$content',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'xmlwriter_write_raw',
  ),
  'getParameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'getParameter',
  ),
  'hasExsltSupport' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'bool',
    'name' => 'hasExsltSupport',
  ),
  'importStylesheet' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$stylesheet',
        'required' => true,
      ),
    ),
    'modifier' => 'public',
    'type' => 'bool',
    'name' => 'importStylesheet',
  ),
  'registerPHPFunctions' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'mixed',
        'name' => '$restrict',
        'required' => false,
      ),
    ),
    'type' => 'void',
    'name' => 'registerPHPFunctions',
  ),
  'removeParameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespaceURI',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$localName',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'removeParameter',
  ),
  'setParameter' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$namespace',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      2 => 
      array (
        'type' => 'string',
        'name' => '$value',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setParameter',
  ),
  'setProfiling' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$filename',
        'required' => true,
      ),
    ),
    'type' => 'bool',
    'name' => 'setProfiling',
  ),
  'transformToDoc' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMNode',
        'name' => '$doc',
        'required' => true,
      ),
    ),
    'type' => 'DOMDocument',
    'name' => 'transformToDoc',
  ),
  'transformToURI' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'DOMDocument',
        'name' => '$doc',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'string',
        'name' => '$uri',
        'required' => true,
      ),
    ),
    'type' => 'int',
    'name' => 'transformToURI',
  ),
  'transformToXML' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'object',
        'name' => '$doc',
        'required' => true,
      ),
    ),
    'type' => 'string',
    'name' => 'transformToXML',
  ),
  'bumpValue' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'name' => 'bumpValue',
    'type' => 'integer',
  ),
  'resetValue' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'resetValue',
  ),
  'getMeta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$attribute',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'getMeta',
  ),
  'getNamed' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'Counter',
    'name' => 'getNamed',
  ),
  'setCounterClass' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
    ),
    'modifier' => 'static',
    'type' => 'void',
    'name' => 'setCounterClass',
  ),
  'counter_get' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'integer',
    'name' => 'counter_get',
  ),
  'counter_bump' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'integer',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'counter_bump',
  ),
  'counter_reset' => 
  array (
    'args' => 
    array (
    ),
    'type' => 'void',
    'name' => 'counter_reset',
  ),
  'counter_create' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'string',
        'name' => '$name',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$initial_value',
        'required' => false,
      ),
      2 => 
      array (
        'type' => 'integer',
        'name' => '$flags',
        'required' => false,
      ),
    ),
    'type' => 'resource',
    'name' => 'counter_create',
  ),
  'counter_get_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$counter',
        'required' => true,
      ),
    ),
    'type' => 'integer',
    'name' => 'counter_get_value',
  ),
  'counter_bump_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$counter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$offset',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'counter_bump_value',
  ),
  'counter_reset_value' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$counter',
        'required' => true,
      ),
    ),
    'type' => 'void',
    'name' => 'counter_reset_value',
  ),
  'counter_get_meta' => 
  array (
    'args' => 
    array (
      0 => 
      array (
        'type' => 'resource',
        'name' => '$counter',
        'required' => true,
      ),
      1 => 
      array (
        'type' => 'integer',
        'name' => '$attribute',
        'required' => true,
      ),
    ),
    'type' => 'mixed',
    'name' => 'counter_get_meta',
  ),
);
 