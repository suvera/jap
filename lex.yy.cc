
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[370] =
    {   0,
        0,    0,  104,  102,   98,   99,   99,   97,  101,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   47,   97,
       97,   97,   97,  100,   97,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       97,   98,   99,   26,   17,   24,   18,    0,    0,    0,
        0,    0,   94,   14,   34,   12,   35,    0,   47,   13,
       81,   48,   16,    1,    2,   15,   48,   93,   31,   29,
       25,   82,   30,   32,  100,   20,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   59,  100,  100,  100,  100,
      100,  100,  100,  100,   45,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,   19,   23,   28,    0,    0,    0,    0,    0,   96,
        0,   48,   21,   27,   22,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,   61,
      100,  100,  100,  100,   52,   41,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,   69,  100,  100,    0,    0,    0,    0,    0,
        0,   48,  100,  100,  100,  100,  100,  100,  100,  100,
      100,   55,  100,   63,  100,  100,  100,  100,  100,  100,

      100,   10,   46,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   95,  100,  100,  100,  100,  100,  100,
      100,  100,   83,  100,  100,  100,   85,  100,  100,   49,
       51,  100,    0,    0,    0,   36,    0,  100,  100,  100,
      100,  100,  100,  100,  100,   57,   65,   70,    5,   42,
       67,  100,  100,  100,    0,  100,  100,   50,   76,   53,
      100,  100,  100,  100,  100,  100,  100,  100,   11,  100,
      100,  100,  100,  100,  100,  100,  100,   72,   77,   60,
        0,   40,    0,    0,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,   54,    0,   43,  100,  100,  100,

       74,  100,    4,  100,  100,  100,   84,  100,  100,    6,
       68,   58,   73,   56,   62,   39,    0,    0,  100,   92,
      100,  100,  100,  100,  100,  100,  100,   64,   44,   79,
       71,  100,  100,  100,  100,    3,    8,  100,   37,   38,
      100,   90,   89,  100,  100,  100,   75,   66,    9,  100,
      100,  100,  100,   86,  100,  100,   87,  100,  100,   78,
        7,   88,  100,   80,   33,  100,  100,   91,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    8,    9,   10,    1,   11,
       12,   13,   14,    8,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   20,
       21,   22,    8,    8,   23,   24,   25,   26,   27,   28,
       24,   29,   30,   24,   24,   31,   32,   33,   34,   35,
       24,   36,   37,   38,   24,   24,   24,   24,   24,   24,
        8,    1,    8,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   24,   50,   51,   52,   53,
       54,   55,   24,   56,   57,   58,   59,   60,   61,   62,
       63,   24,    8,   64,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[371] =
    {   0,
        0,    0,  409,  410,   63,  410,  405,  386,  410,  410,
      385,   56,   29,   54,   55,   66,   62,   72,   56,  386,
       70,   73,   75,    0,  383,  363,   50,   44,   58,   56,
       60,   64,   68,   57,   76,  357,   83,   71,  347,  352,
       83,  124,  410,  378,  410,  410,  410,  342,  343,  342,
      342,  336,  372,  410,  410,  410,  410,  374,  115,  410,
      410,  107,  410,  410,  410,  410,  112,  410,  370,  410,
      369,  410,  410,  368,    0,  410,  117,  331,  331,  332,
      340,   50,   97,  331,  337,  323,  333,  323,  321,  327,
      324,  322,  319,  100,    0,  319,   79,  312,  321,  103,

      107,  329,  312,  313,  317,  113,  318,  111,  121,  317,
      316,  410,  410,  410,  308,  309,  303,  303,  304,  410,
      150,  145,  410,  410,  410,  328,  328,  327,  326,  328,
      331,  317,  294,  310,  299,  308,  303,  304,  289,  292,
      113,  303,  301,  288,  296,  295,  282,  297,  296,    0,
      293,  276,  122,  276,  288,    0,  281,  281,  285,  121,
      271,  277,  268,  270,  279,  266,  274,  264,  264,  266,
      270,  273,    0,  273,  265,  274,  263,  271,  300,  262,
      292,  291,  285,  271,  275,  272,  266,  271,  279,  245,
      237,    0,  249,    0,  250,  240,  251,  237,  245,  234,

      241,    0,  161,  238,  245,  238,  230,  229,  230,  240,
      228,  242,  226,    0,  240,  227,  221,  237,  232,  227,
      219,  233,    0,  224,  219,  228,    0,  209,  211,    0,
        0,  223,  204,  254,  214,  410,  211,  226,  222,  234,
      233,  230,  231,  227,  215,    0,    0,    0,    0,    0,
        0,  202,  203,  208,  203,  205,  206,    0,  198,    0,
      199,  202,  194,  187,  191,  197,  195,  183,    0,  182,
      196,  195,  184,  173,  192,  187,  185,    0,    0,    0,
      220,  410,  186,  183,  192,  188,  187,  186,  191,  187,
      185,  179,  162,  162,    0,  173,    0,  161,  154,  162,

        0,  170,    0,  171,  172,  167,    0,  166,  151,    0,
        0,    0,    0,    0,    0,  410,  196,  195,  166,    0,
      165,  164,  177,  167,  161,  142,  154,    0,  410,    0,
        0,  145,  144,  151,  152,    0,    0,  149,  410,  410,
      153,    0,    0,  152,  168,  149,    0,    0,    0,  130,
      133,  141,  141,    0,  143,  157,    0,  122,  132,    0,
        0,    0,  150,    0,    0,  135,  100,    0,  410,   77
    } ;

static yyconst flex_int16_t yy_def[371] =
    {   0,
      369,    1,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  370,  369,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  370,  369,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  369,  369,  369,  369,  369,
      369,  369,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  369,  369,  369,  369,  369,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  369,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      369,  369,  369,  369,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  369,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  369,  369,  369,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  369,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  369,  369,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,    0,  369
    } ;

static yyconst flex_int16_t yy_nxt[475] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,   12,
       13,   10,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   24,   24,   33,   24,
       24,   24,   34,   24,   35,   36,   37,   38,   24,   39,
       40,   24,   24,   41,   42,   46,   53,   42,   55,   48,
       49,   67,   50,   59,   54,   56,   47,   51,   75,   62,
       57,   58,   63,   59,   64,   52,   60,   61,   65,   69,
       70,   78,   66,   71,   72,   73,   74,   80,   82,   81,

       85,   98,   87,  112,   90,   79,  137,  138,   83,   86,
       88,   84,   91,   95,   92,   99,  100,   93,  108,   96,
       97,   89,   94,  104,   62,   42,  109,  105,   42,  122,
       67,  101,   59,  121,  102,  154,  155,  139,  121,  368,
      106,  126,  127,  107,  128,  158,  113,  129,  130,  131,
      140,  121,  151,  166,  132,  160,  121,  152,  159,  169,
      161,  171,  122,  181,  181,  255,  170,  182,  167,  198,
      199,  121,  210,  217,  367,  211,  366,  365,  364,  172,
      218,  363,  362,  173,  361,  360,  359,  358,  357,  121,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,

      346,  345,  344,  343,  342,  341,  340,  339,  338,  256,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  254,  253,  252,  251,  250,  249,  248,  247,  246,

      245,  244,  243,  242,  241,  240,  239,  238,  182,  182,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  216,
      215,  214,  213,  212,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  180,
      179,  178,  177,  176,  175,  174,  168,  165,  164,  163,
      162,  157,  156,  153,  150,  149,  148,  147,  146,  145,
      144,  143,  142,  141,  136,  135,  134,  133,  125,  124,
      123,   62,  120,  119,  118,  117,  116,  115,  114,  111,

      110,  103,   77,   76,   68,   45,   44,   43,  369,    3,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369
    } ;

static yyconst flex_int16_t yy_chk[475] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,   12,   14,    5,   15,   13,
       13,   19,   13,   19,   14,   15,   12,   13,  370,   17,
       16,   16,   17,   16,   18,   13,   16,   16,   18,   21,
       21,   27,   18,   22,   22,   23,   23,   28,   29,   28,

       30,   34,   31,   41,   32,   27,   82,   82,   29,   30,
       31,   29,   32,   33,   32,   34,   35,   32,   38,   33,
       33,   31,   32,   37,   62,   42,   38,   37,   42,   67,
       59,   35,   59,   62,   35,   97,   97,   83,   67,  367,
       37,   77,   77,   37,   77,  100,   41,   77,   77,   77,
       83,   62,   94,  106,   77,  101,   67,   94,  100,  108,
      101,  109,  122,  121,  121,  203,  108,  121,  106,  141,
      141,  122,  153,  160,  366,  153,  363,  359,  358,  109,
      160,  356,  355,  109,  353,  352,  351,  350,  346,  122,
      345,  344,  341,  338,  335,  334,  333,  332,  327,  326,

      325,  324,  323,  322,  321,  319,  318,  317,  309,  203,
      308,  306,  305,  304,  302,  300,  299,  298,  296,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  281,  277,  276,  275,  274,  273,  272,  271,  270,
      268,  267,  266,  265,  264,  263,  262,  261,  259,  257,
      256,  255,  254,  253,  252,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  235,  234,  233,  232,  229,  228,
      226,  225,  224,  222,  221,  220,  219,  218,  217,  216,
      215,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  201,  200,  199,  198,  197,  196,  195,  193,  191,

      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  159,
      158,  157,  155,  154,  152,  151,  149,  148,  147,  146,
      145,  144,  143,  142,  140,  139,  138,  137,  136,  135,
      134,  133,  132,  131,  130,  129,  128,  127,  126,  119,
      118,  117,  116,  115,  111,  110,  107,  105,  104,  103,
      102,   99,   98,   96,   93,   92,   91,   90,   89,   88,
       87,   86,   85,   84,   81,   80,   79,   78,   74,   71,
       69,   58,   53,   52,   51,   50,   49,   48,   44,   40,

       39,   36,   26,   25,   20,   11,    8,    7,    3,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[104] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[103] =
    {   0,
       49,   66,   83,   87,   91,   95,   99,  103,  107,  111,
      115,  119,  123,  127,  131,  135,  139,  143,  147,  151,
      155,  159,  163,  167,  171,  175,  179,  183,  187,  191,
      195,  199,  203,  207,  211,  215,  219,  223,  227,  231,
      235,  239,  243,  247,  251,  256,  260,  264,  268,  272,
      276,  280,  284,  288,  292,  296,  300,  304,  308,  312,
      316,  320,  324,  328,  332,  336,  340,  344,  348,  352,
      356,  360,  364,  368,  372,  376,  380,  384,  388,  392,
      396,  400,  404,  408,  412,  416,  420,  424,  428,  432,
      436,  440,  444,  448,  451,  455,  460,  469,  474,  481,

      485,  509
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "jap.l"
#line 2 "jap.l"
/* C++ string header, for string ops below */
#include <string>
#include <iostream>
#include <ego/ego.h>

#define YYERROR_VERBOSE
#define YYSTYPE ego::ParseNode

using namespace std;

#include <jap.tab.hh>
typedef yy::parser::token token;

#include <ego/ego.cpp>
extern ego::FileParser *kicker;
ego::FileParser *kicker;

void p(const char *);
void incrChars();
int simpleLexAction(int);

void registerLexToken(int type);
void printError(string type, string msg);

/*%option noyywrap */
/**  more definitions */
#line 771 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 47 "jap.l"


#line 931 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 370 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 410 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 103 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 103 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 104 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 49 "jap.l"
{
    int c;
    
    while((c = kicker->lexer->yyinput()) != 0 && c != EOF) {
        kicker->xState->incrChars();
        
        if(c == '\n') {
            kicker->xState->incrLines();
        } else if(c == '*') {
            if((c = kicker->lexer->yyinput()) == '/')
                break;
        } else {
            //unput(c);
        }
    }
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "jap.l"
{
    int c;
    
    while((c = kicker->lexer->yyinput()) != 0 && c != EOF) {
        kicker->xState->incrChars();
        
        if(c == '\n') {
            kicker->xState->incrLines();
            break;
        } else {
            //unput(c);
        }
    }
    
    kicker->xState->registerRawToken(token::T_WHITESPACE, string("\n"), kicker->xState->getNumLines(), kicker->xState->getNumChars());
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 83 "jap.l"
{
    return simpleLexAction(token::T_PACKAGE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 87 "jap.l"
{
    return simpleLexAction(token::T_IMPORT);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 91 "jap.l"
{
    return simpleLexAction(token::T_CLASS);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 95 "jap.l"
{
    return simpleLexAction(token::T_PUBLIC);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 99 "jap.l"
{
    return simpleLexAction(token::T_PROTECTED);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "jap.l"
{
    return simpleLexAction(token::T_PRIVATE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 107 "jap.l"
{
    return simpleLexAction(token::T_FUNCTION);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 111 "jap.l"
{
	return simpleLexAction(token::T_ECHO);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 115 "jap.l"
{
	return simpleLexAction(token::T_ECHO);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "jap.l"
{
	return simpleLexAction(token::T_PLUS_EQUAL);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 123 "jap.l"
{
	return simpleLexAction(token::T_MINUS_EQUAL);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "jap.l"
{
	return simpleLexAction(token::T_MUL_EQUAL);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 131 "jap.l"
{
	return simpleLexAction(token::T_DIV_EQUAL);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 135 "jap.l"
{
	return simpleLexAction(token::T_CONCAT_EQUAL);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 139 "jap.l"
{
	return simpleLexAction(token::T_MOD_EQUAL);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 143 "jap.l"
{
	return simpleLexAction(token::T_AND_EQUAL);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 147 "jap.l"
{
	return simpleLexAction(token::T_OR_EQUAL);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "jap.l"
{
	return simpleLexAction(token::T_XOR_EQUAL);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 155 "jap.l"
{
	return simpleLexAction(token::T_SL_EQUAL);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 159 "jap.l"
{
	return simpleLexAction(token::T_SR_EQUAL);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 163 "jap.l"
{
	return simpleLexAction(token::T_BOOLEAN_OR);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 167 "jap.l"
{
	return simpleLexAction(token::T_BOOLEAN_AND);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 171 "jap.l"
{
	return simpleLexAction(token::T_IS_EQUAL);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 175 "jap.l"
{
	return simpleLexAction(token::T_IS_NOT_EQUAL);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 179 "jap.l"
{
	return simpleLexAction(token::T_IS_IDENTICAL);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 183 "jap.l"
{
	return simpleLexAction(token::T_IS_NOT_IDENTICAL);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 187 "jap.l"
{
	return simpleLexAction(token::T_IS_SMALLER_OR_EQUAL);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 191 "jap.l"
{
	return simpleLexAction(token::T_IS_GREATER_OR_EQUAL);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 195 "jap.l"
{
	return simpleLexAction(token::T_SL);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 199 "jap.l"
{
	return simpleLexAction(token::T_SR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 203 "jap.l"
{
	return simpleLexAction(token::T_INSTANCEOF);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 207 "jap.l"
{
	return simpleLexAction(token::T_INC);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 211 "jap.l"
{
	return simpleLexAction(token::T_DEC);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 215 "jap.l"
{
	return simpleLexAction(token::T_INT_CAST);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 219 "jap.l"
{
	return simpleLexAction(token::T_DOUBLE_CAST);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 223 "jap.l"
{
	return simpleLexAction(token::T_STRING_CAST);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 227 "jap.l"
{
	return simpleLexAction(token::T_ARRAY_CAST);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 231 "jap.l"
{
	return simpleLexAction(token::T_BOOL_CAST);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 235 "jap.l"
{
	return simpleLexAction(token::T_NEW);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 239 "jap.l"
{
	return simpleLexAction(token::T_CLONE);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 243 "jap.l"
{
	return simpleLexAction(token::T_ELSEIF);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 247 "jap.l"
{
	return simpleLexAction(token::T_ELSEIF);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 251 "jap.l"
{
    //std::cout << "lex: IF found\n";
	return simpleLexAction(token::T_IF);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "jap.l"
{
	return simpleLexAction(token::T_ELSE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 260 "jap.l"
{
	return simpleLexAction(token::T_LNUMBER);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 264 "jap.l"
{
	return simpleLexAction(token::T_DNUMBER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 268 "jap.l"
{
	return simpleLexAction(token::T_BOOLEAN);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 272 "jap.l"
{
	return simpleLexAction(token::T_BOOLEAN);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 276 "jap.l"
{
	return simpleLexAction(token::T_VOID);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 280 "jap.l"
{
	return simpleLexAction(token::T_LNUMBER_NAME);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 284 "jap.l"
{
	return simpleLexAction(token::T_DNUMBER_NAME);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 288 "jap.l"
{
	return simpleLexAction(token::T_DNUMBER_NAME);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 292 "jap.l"
{
	return simpleLexAction(token::T_BOOLEAN_NAME);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 296 "jap.l"
{
	return simpleLexAction(token::T_STRING_NAME);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 300 "jap.l"
{
	return simpleLexAction(token::T_ARRAY_NAME);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 304 "jap.l"
{
	return simpleLexAction(token::T_SARRAY_NAME);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 308 "jap.l"
{
	return simpleLexAction(token::T_DO);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 312 "jap.l"
{
	return simpleLexAction(token::T_WHILE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 316 "jap.l"
{
	return simpleLexAction(token::T_FOR);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 320 "jap.l"
{
	return simpleLexAction(token::T_SWITCH);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 324 "jap.l"
{
	return simpleLexAction(token::T_CASE);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 328 "jap.l"
{
	return simpleLexAction(token::T_DEFAULT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 332 "jap.l"
{
	return simpleLexAction(token::T_BREAK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 336 "jap.l"
{
	return simpleLexAction(token::T_CONTINUE);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 340 "jap.l"
{
	return simpleLexAction(token::T_CONST);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 344 "jap.l"
{
	return simpleLexAction(token::T_RETURN);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 348 "jap.l"
{
	return simpleLexAction(token::T_TRY);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 352 "jap.l"
{
	return simpleLexAction(token::T_CATCH);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 356 "jap.l"
{
	return simpleLexAction(token::T_FINALLY);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 360 "jap.l"
{
	return simpleLexAction(token::T_THROW);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 364 "jap.l"
{
	return simpleLexAction(token::T_STATIC);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 368 "jap.l"
{
	return simpleLexAction(token::T_FUTURE);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 372 "jap.l"
{
	return simpleLexAction(token::T_ABSTRACT);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 376 "jap.l"
{
	return simpleLexAction(token::T_FINAL);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 380 "jap.l"
{
	return simpleLexAction(token::T_TRAIT);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 384 "jap.l"
{
	return simpleLexAction(token::T_INTERFACE);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 388 "jap.l"
{
	return simpleLexAction(token::T_EXTENDS);
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 392 "jap.l"
{
	return simpleLexAction(token::T_IMPLEMENTS);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 396 "jap.l"
{
	return simpleLexAction(token::T_OBJECT_OPERATOR);
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 400 "jap.l"
{
	return simpleLexAction(token::T_DOUBLE_ARROW);
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 404 "jap.l"
{
	return simpleLexAction(token::T_SELF);
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 408 "jap.l"
{
	return simpleLexAction(token::T_PARENT);
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 412 "jap.l"
{
	return simpleLexAction(token::T_THIS);
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 416 "jap.l"
{
	return simpleLexAction(token::T_CLASS_C);
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 420 "jap.l"
{
	return simpleLexAction(token::T_TRAIT_C);
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 424 "jap.l"
{
	return simpleLexAction(token::T_METHOD_C);
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 428 "jap.l"
{
	return simpleLexAction(token::T_LINE);
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 432 "jap.l"
{
	return simpleLexAction(token::T_FILE);
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 436 "jap.l"
{
	return simpleLexAction(token::T_NS_C);
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 440 "jap.l"
{
	return simpleLexAction(token::T_DIR);
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 444 "jap.l"
{
	return simpleLexAction(token::T_PAAMAYIM_NEKUDOTAYIM);
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 448 "jap.l"
{
	return simpleLexAction(token::T_POW);
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 451 "jap.l"
{
	return simpleLexAction(token::T_NULL);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 455 "jap.l"
{
	return simpleLexAction(token::T_POW_EQUAL);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 460 "jap.l"
{
    p("Token lex ");
    incrChars();
    registerLexToken(token::T_TOKEN);
    
    const char *text = kicker->lexer->YYText();
    return text[0];
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 469 "jap.l"
{ 
    p("WHITESPACE lex found"); 
    incrChars();
    registerLexToken(token::T_WHITESPACE);
}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 474 "jap.l"
{ 
    p("NEWLINE lex found"); 
    incrChars();
    kicker->xState->incrLines();
    registerLexToken(token::T_WHITESPACE);
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 481 "jap.l"
{
    return simpleLexAction(token::T_ID);
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 485 "jap.l"
{
    int c;
    string str;
    
    while((c = kicker->lexer->yyinput()) != 0 && c != EOF) {
        kicker->xState->incrChars();
        
        if(c == '\n') {
            kicker->xState->incrLines();
        }
        
        if (c == '"'){
            break;
        } else {
            str.push_back(c);
        }
    }
    
    kicker->xState->setLastString(str);
    
    registerLexToken(token::T_STRING);
    return token::T_STRING; //simpleLexAction(token::T_STRING);
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 509 "jap.l"
{ 
    incrChars();
    p("unknown character found");
    exit(255); 
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 515 "jap.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1833 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 370 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 370 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 369);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 515 "jap.l"



#include "jap.tab.cc"
#include <jap.cpp>


/*
 * Methods
*/
void p(const char* msg) {
    //std::cout << msg << " " << kicker->lexer->YYText() << endl;
}

void registerLexToken(int type) {
    kicker->xState->registerRawToken(type, kicker->xState->getLastString(), kicker->xState->getNumLines(), kicker->xState->getNumChars());
}


void incrChars() {
    kicker->xState->setLastString(kicker->lexer->YYText());
    kicker->xState->incrChars(kicker->lexer->YYLeng());
}

int simpleLexAction(int t) {
    incrChars();
    registerLexToken(t);
    
    return t;
}

/**
* When the scanner receives an end-of-file indication from YY_INPUT, 
* it then checks the `yywrap()' function. If `yywrap()' returns false 
* (zero), then it is assumed that the function has gone ahead and 
* set up yyin to point to another input file, and scanning continues. If it 
* returns true (non-zero), then the scanner terminates, returning 0 to its caller. 
* Note that in either case, the start condition remains 
* unchanged; it does not revert to INITIAL.
*/
int yyFlexLexer::yywrap() {
    kicker->xState->setEofReached(true);
    //std::cout << "End of file reached" << std::endl;
    return 1; 
}

void ego::throwError(string err) {
    printError(string("Error: "), err);

	exit(EXIT_FAILURE);
}

void yy::parser::error(const yy::parser::location_type& loc, const std::string& msg) {
    printError(string("Parse error: "), msg);
    exit(EXIT_FAILURE);
}

void printError(string type, string msg) {
    ego::LexState *xState = kicker->xState;
    
    std::cerr << type << msg << " on line "
	    << xState->getNumLines() << " on column " << xState->columnPos
        << " on character " << xState->getNumChars()
	    << " '" << xState->getLastString() << "' "
        << std::endl
        << "at '" << xState->getLastTokens(6) << "' "
        << std::endl;
}



